
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c96c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c44  0800cafc  0800cafc  0000dafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d740  0800d740  0000f064  2**0
                  CONTENTS
  4 .ARM          00000008  0800d740  0800d740  0000e740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d748  0800d748  0000f064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d748  0800d748  0000e748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800d750  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f064  2**0
                  CONTENTS
 10 .bss          000051c8  20000068  20000068  0000f068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005230  20005230  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7d8  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a4  00000000  00000000  0002b86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  0002f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013b4  00000000  00000000  00030b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004406  00000000  00000000  00031edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9a1  00000000  00000000  000362e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d95fc  00000000  00000000  00052c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c27f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071f0  00000000  00000000  0012c2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001334b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cae4 	.word	0x0800cae4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800cae4 	.word	0x0800cae4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <__NVIC_SystemReset+0x24>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eae:	4904      	ldr	r1, [pc, #16]	@ (8000ec0 <__NVIC_SystemReset+0x24>)
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_SystemReset+0x28>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb6:	f3bf 8f4f 	dsb	sy
}
 8000eba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <__NVIC_SystemReset+0x20>
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	05fa0004 	.word	0x05fa0004

08000ec8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ecc:	f002 f9fc 	bl	80032c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ed0:	f000 f884 	bl	8000fdc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ed4:	f000 fb7c 	bl	80015d0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ed8:	f000 f8de 	bl	8001098 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000edc:	f000 f90a 	bl	80010f4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ee0:	f000 f9a6 	bl	8001230 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ee4:	f000 f9f8 	bl	80012d8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ee8:	f000 fa4a 	bl	8001380 <MX_TIM4_Init>
	MX_TIM8_Init();
 8000eec:	f000 fa9c 	bl	8001428 <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000ef0:	f000 fb44 	bl	800157c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000ef4:	f002 f95c 	bl	80031b0 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000ef8:	2205      	movs	r2, #5
 8000efa:	4921      	ldr	r1, [pc, #132]	@ (8000f80 <main+0xb8>)
 8000efc:	4821      	ldr	r0, [pc, #132]	@ (8000f84 <main+0xbc>)
 8000efe:	f007 fb9e 	bl	800863e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f02:	f008 fb4b 	bl	800959c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f06:	4a20      	ldr	r2, [pc, #128]	@ (8000f88 <main+0xc0>)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <main+0xc4>)
 8000f0c:	f008 fb90 	bl	8009630 <osThreadNew>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <main+0xc8>)
 8000f14:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f16:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <main+0xcc>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <main+0xd0>)
 8000f1c:	f008 fb88 	bl	8009630 <osThreadNew>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <main+0xd4>)
 8000f24:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f26:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <main+0xd8>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	481e      	ldr	r0, [pc, #120]	@ (8000fa4 <main+0xdc>)
 8000f2c:	f008 fb80 	bl	8009630 <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <main+0xe0>)
 8000f34:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <main+0xe4>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	481d      	ldr	r0, [pc, #116]	@ (8000fb0 <main+0xe8>)
 8000f3c:	f008 fb78 	bl	8009630 <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <main+0xec>)
 8000f44:	6013      	str	r3, [r2, #0]

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <main+0xf0>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	481c      	ldr	r0, [pc, #112]	@ (8000fbc <main+0xf4>)
 8000f4c:	f008 fb70 	bl	8009630 <osThreadNew>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <main+0xf8>)
 8000f54:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderRTask */
	encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL,
 8000f56:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <main+0xfc>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	481b      	ldr	r0, [pc, #108]	@ (8000fc8 <main+0x100>)
 8000f5c:	f008 fb68 	bl	8009630 <osThreadNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <main+0x104>)
 8000f64:	6013      	str	r3, [r2, #0]
			&encoderRTask_attributes);

	/* creation of encoderLTask */
	encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL,
 8000f66:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd0 <main+0x108>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <main+0x10c>)
 8000f6c:	f008 fb60 	bl	8009630 <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <main+0x110>)
 8000f74:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f76:	f008 fb35 	bl	80095e4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1){
 8000f7a:	bf00      	nop
 8000f7c:	e7fd      	b.n	8000f7a <main+0xb2>
 8000f7e:	bf00      	nop
 8000f80:	200002a4 	.word	0x200002a4
 8000f84:	20000240 	.word	0x20000240
 8000f88:	0800cb94 	.word	0x0800cb94
 8000f8c:	08001d39 	.word	0x08001d39
 8000f90:	20000288 	.word	0x20000288
 8000f94:	0800cbb8 	.word	0x0800cbb8
 8000f98:	08001d61 	.word	0x08001d61
 8000f9c:	2000028c 	.word	0x2000028c
 8000fa0:	0800cbdc 	.word	0x0800cbdc
 8000fa4:	080021ad 	.word	0x080021ad
 8000fa8:	20000290 	.word	0x20000290
 8000fac:	0800cc00 	.word	0x0800cc00
 8000fb0:	080022c9 	.word	0x080022c9
 8000fb4:	20000294 	.word	0x20000294
 8000fb8:	0800cc24 	.word	0x0800cc24
 8000fbc:	08002465 	.word	0x08002465
 8000fc0:	20000298 	.word	0x20000298
 8000fc4:	0800cc48 	.word	0x0800cc48
 8000fc8:	0800268d 	.word	0x0800268d
 8000fcc:	2000029c 	.word	0x2000029c
 8000fd0:	0800cc6c 	.word	0x0800cc6c
 8000fd4:	08002715 	.word	0x08002715
 8000fd8:	200002a0 	.word	0x200002a0

08000fdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	@ 0x50
 8000fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	@ 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00b f8a4 	bl	800c138 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <SystemClock_Config+0xb4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <SystemClock_Config+0xb4>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <SystemClock_Config+0xb4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <SystemClock_Config+0xb8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <SystemClock_Config+0xb8>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <SystemClock_Config+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fa5f 	bl	8006510 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x80>
		Error_Handler();
 8001058:	f001 fba0 	bl	800279c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fcc2 	bl	8006a00 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xaa>
		Error_Handler();
 8001082:	f001 fb8b 	bl	800279c <Error_Handler>
	}
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	@ 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	@ (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f002 fd0f 	bl	8003af8 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80010e0:	f001 fb5c 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000084 	.word	0x20000084
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b096      	sub	sp, #88	@ 0x58
 80010f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001108:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f00b f803 	bl	800c138 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001132:	4b3d      	ldr	r3, [pc, #244]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001134:	4a3d      	ldr	r2, [pc, #244]	@ (800122c <MX_TIM1_Init+0x138>)
 8001136:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <MX_TIM1_Init+0x134>)
 800113a:	22a0      	movs	r2, #160	@ 0xa0
 800113c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b3a      	ldr	r3, [pc, #232]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001144:	4b38      	ldr	r3, [pc, #224]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001146:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b36      	ldr	r3, [pc, #216]	@ (8001228 <MX_TIM1_Init+0x134>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001152:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001158:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <MX_TIM1_Init+0x134>)
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800115e:	4832      	ldr	r0, [pc, #200]	@ (8001228 <MX_TIM1_Init+0x134>)
 8001160:	f005 fe2e 	bl	8006dc0 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800116a:	f001 fb17 	bl	800279c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001174:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001178:	4619      	mov	r1, r3
 800117a:	482b      	ldr	r0, [pc, #172]	@ (8001228 <MX_TIM1_Init+0x134>)
 800117c:	f006 fb62 	bl	8007844 <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x96>
		Error_Handler();
 8001186:	f001 fb09 	bl	800279c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800118a:	4827      	ldr	r0, [pc, #156]	@ (8001228 <MX_TIM1_Init+0x134>)
 800118c:	f005 fe67 	bl	8006e5e <HAL_TIM_PWM_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001196:	f001 fb01 	bl	800279c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80011a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a6:	4619      	mov	r1, r3
 80011a8:	481f      	ldr	r0, [pc, #124]	@ (8001228 <MX_TIM1_Init+0x134>)
 80011aa:	f007 f88b 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80011b4:	f001 faf2 	bl	800279c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b8:	2360      	movs	r3, #96	@ 0x60
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80011d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d4:	220c      	movs	r2, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <MX_TIM1_Init+0x134>)
 80011da:	f006 fa71 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80011e4:	f001 fada 	bl	800279c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001200:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <MX_TIM1_Init+0x134>)
 800120c:	f007 f8d6 	bl	80083bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 8001216:	f001 fac1 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800121a:	4803      	ldr	r0, [pc, #12]	@ (8001228 <MX_TIM1_Init+0x134>)
 800121c:	f001 fcb0 	bl	8002b80 <HAL_TIM_MspPostInit>

}
 8001220:	bf00      	nop
 8001222:	3758      	adds	r7, #88	@ 0x58
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000d8 	.word	0x200000d8
 800122c:	40010000 	.word	0x40010000

08001230 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f00a ff7a 	bl	800c138 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001266:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001274:	2303      	movs	r3, #3
 8001276:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001284:	230a      	movs	r3, #10
 8001286:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8001294:	230a      	movs	r3, #10
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012a0:	f005 ff4d 	bl	800713e <HAL_TIM_Encoder_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x7e>
		Error_Handler();
 80012aa:	f001 fa77 	bl	800279c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012bc:	f007 f802 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80012c6:	f001 fa69 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000120 	.word	0x20000120

080012d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00a ff26 	bl	800c138 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_TIM3_Init+0xa0>)
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <MX_TIM3_Init+0xa4>)
 80012f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <MX_TIM3_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800131a:	2303      	movs	r3, #3
 800131c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800132a:	230a      	movs	r3, #10
 800132c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001332:	2301      	movs	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 800133a:	230a      	movs	r3, #10
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001346:	f005 fefa 	bl	800713e <HAL_TIM_Encoder_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001350:	f001 fa24 	bl	800279c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM3_Init+0xa0>)
 8001362:	f006 ffaf 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 800136c:	f001 fa16 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	@ 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000168 	.word	0x20000168
 800137c:	40000400 	.word	0x40000400

08001380 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <MX_TIM4_Init+0xa0>)
 800139e:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_TIM4_Init+0xa4>)
 80013a0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013a4:	220f      	movs	r2, #15
 80013a6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b4:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 80013c2:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013c4:	f005 fe6c 	bl	80070a0 <HAL_TIM_IC_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0x52>
		Error_Handler();
 80013ce:	f001 f9e5 	bl	800279c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	480f      	ldr	r0, [pc, #60]	@ (8001420 <MX_TIM4_Init+0xa0>)
 80013e2:	f006 ff6f 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 80013ec:	f001 f9d6 	bl	800279c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_TIM4_Init+0xa0>)
 8001408:	f006 f8bd 	bl	8007586 <HAL_TIM_IC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x96>
		Error_Handler();
 8001412:	f001 f9c3 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001b0 	.word	0x200001b0
 8001424:	40000800 	.word	0x40000800

08001428 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b096      	sub	sp, #88	@ 0x58
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800142e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800143c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2220      	movs	r2, #32
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00a fe69 	bl	800c138 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001466:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001468:	4a43      	ldr	r2, [pc, #268]	@ (8001578 <MX_TIM8_Init+0x150>)
 800146a:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800146c:	4b41      	ldr	r3, [pc, #260]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001478:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800147a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800147e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001486:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001492:	4838      	ldr	r0, [pc, #224]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001494:	f005 fc94 	bl	8006dc0 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM8_Init+0x7a>
		Error_Handler();
 800149e:	f001 f97d 	bl	800279c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 80014a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014ac:	4619      	mov	r1, r3
 80014ae:	4831      	ldr	r0, [pc, #196]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014b0:	f006 f9c8 	bl	8007844 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM8_Init+0x96>
		Error_Handler();
 80014ba:	f001 f96f 	bl	800279c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014be:	482d      	ldr	r0, [pc, #180]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014c0:	f005 fccd 	bl	8006e5e <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0xa6>
		Error_Handler();
 80014ca:	f001 f967 	bl	800279c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 80014d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014da:	4619      	mov	r1, r3
 80014dc:	4825      	ldr	r0, [pc, #148]	@ (8001574 <MX_TIM8_Init+0x14c>)
 80014de:	f006 fef1 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80014e8:	f001 f958 	bl	800279c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2360      	movs	r3, #96	@ 0x60
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4818      	ldr	r0, [pc, #96]	@ (8001574 <MX_TIM8_Init+0x14c>)
 8001512:	f006 f8d5 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 800151c:	f001 f93e 	bl	800279c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 8001520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001524:	2204      	movs	r2, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800152a:	f006 f8c9 	bl	80076c0 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8001534:	f001 f932 	bl	800279c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_TIM8_Init+0x14c>)
 800155c:	f006 ff2e 	bl	80083bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 8001566:	f001 f919 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3758      	adds	r7, #88	@ 0x58
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f8 	.word	0x200001f8
 8001578:	40010400 	.word	0x40010400

0800157c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_USART3_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART3_UART_Init+0x4c>)
 80015b4:	f006 ff68 	bl	8008488 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80015be:	f001 f8ed 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000240 	.word	0x20000240
 80015cc:	40004800 	.word	0x40004800

080015d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b58      	ldr	r3, [pc, #352]	@ (8001758 <MX_GPIO_Init+0x188>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a53      	ldr	r2, [pc, #332]	@ (8001758 <MX_GPIO_Init+0x188>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b51      	ldr	r3, [pc, #324]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a4c      	ldr	r2, [pc, #304]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b43      	ldr	r3, [pc, #268]	@ (8001758 <MX_GPIO_Init+0x188>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <MX_GPIO_Init+0x188>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a3e      	ldr	r2, [pc, #248]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <MX_GPIO_Init+0x188>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <MX_GPIO_Init+0x188>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001694:	4831      	ldr	r0, [pc, #196]	@ (800175c <MX_GPIO_Init+0x18c>)
 8001696:	f002 f9fb 	bl	8003a90 <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 800169a:	2200      	movs	r2, #0
 800169c:	213c      	movs	r1, #60	@ 0x3c
 800169e:	4830      	ldr	r0, [pc, #192]	@ (8001760 <MX_GPIO_Init+0x190>)
 80016a0:	f002 f9f6 	bl	8003a90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016aa:	482e      	ldr	r0, [pc, #184]	@ (8001764 <MX_GPIO_Init+0x194>)
 80016ac:	f002 f9f0 	bl	8003a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016b6:	482c      	ldr	r0, [pc, #176]	@ (8001768 <MX_GPIO_Init+0x198>)
 80016b8:	f002 f9ea 	bl	8003a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 80016bc:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 80016c0:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4821      	ldr	r0, [pc, #132]	@ (800175c <MX_GPIO_Init+0x18c>)
 80016d6:	f002 f83f 	bl	8003758 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 80016da:	233c      	movs	r3, #60	@ 0x3c
 80016dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e6:	2302      	movs	r3, #2
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	481b      	ldr	r0, [pc, #108]	@ (8001760 <MX_GPIO_Init+0x190>)
 80016f2:	f002 f831 	bl	8003758 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	@ (8001764 <MX_GPIO_Init+0x194>)
 8001710:	f002 f822 	bl	8003758 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 8001714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001718:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800171e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	@ (8001768 <MX_GPIO_Init+0x198>)
 800172c:	f002 f814 	bl	8003758 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001734:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	@ (8001768 <MX_GPIO_Init+0x198>)
 800174a:	f002 f805 	bl	8003758 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3730      	adds	r7, #48	@ 0x30
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40021000 	.word	0x40021000
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020c00 	.word	0x40020c00

0800176c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 8001774:	2205      	movs	r2, #5
 8001776:	4905      	ldr	r1, [pc, #20]	@ (800178c <HAL_UART_RxCpltCallback+0x20>)
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_UART_RxCpltCallback+0x24>)
 800177a:	f006 ff60 	bl	800863e <HAL_UART_Receive_IT>
	receivedInstruction = 1;
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_UART_RxCpltCallback+0x28>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002a4 	.word	0x200002a4
 8001790:	20000240 	.word	0x20000240
 8001794:	200002f4 	.word	0x200002f4

08001798 <moveCarStraight>:

// movement
void moveCarStraight(double distance) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75;
 80017a2:	a333      	add	r3, pc, #204	@ (adr r3, 8001870 <moveCarStraight+0xd8>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ac:	f7fe ff1c 	bl	80005e8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	e9c7 2300 	strd	r2, r3, [r7]
	osDelay(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f007 ffcb 	bl	8009754 <osDelay>
	pwmVal_servo = SERVOCENTER;
 80017be:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <moveCarStraight+0xb8>)
 80017c0:	2293      	movs	r2, #147	@ 0x93
 80017c2:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80017c4:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80017c8:	f007 ffc4 	bl	8009754 <osDelay>
	e_brake = 0;
 80017cc:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <moveCarStraight+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <moveCarStraight+0xc0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 80017d8:	4b20      	ldr	r3, [pc, #128]	@ (800185c <moveCarStraight+0xc4>)
 80017da:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <moveCarStraight+0xc8>)
 80017dc:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <moveCarStraight+0xcc>)
 80017e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <moveCarStraight+0xc8>)
 80017e2:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 80017e4:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <moveCarStraight+0xd0>)
 80017e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001860 <moveCarStraight+0xc8>)
 80017e8:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <moveCarStraight+0xd4>)
 80017ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <moveCarStraight+0xc8>)
 80017ee:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <moveCarStraight+0xd0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe8d 	bl	8000514 <__aeabi_i2d>
 80017fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017fe:	f7fe fd3d 	bl	800027c <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f987 	bl	8000b1c <__aeabi_d2iz>
 800180e:	4603      	mov	r3, r0
 8001810:	4a15      	ldr	r2, [pc, #84]	@ (8001868 <moveCarStraight+0xd0>)
 8001812:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <moveCarStraight+0xd4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe7b 	bl	8000514 <__aeabi_i2d>
 800181e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001822:	f7fe fd2b 	bl	800027c <__adddf3>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f975 	bl	8000b1c <__aeabi_d2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <moveCarStraight+0xd4>)
 8001836:	6013      	str	r3, [r2, #0]
	while (finishCheck());
 8001838:	bf00      	nop
 800183a:	f000 f9b7 	bl	8001bac <finishCheck>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1fa      	bne.n	800183a <moveCarStraight+0xa2>
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000
 8001854:	200002bc 	.word	0x200002bc
 8001858:	200002b8 	.word	0x200002b8
 800185c:	200002c0 	.word	0x200002c0
 8001860:	000124f8 	.word	0x000124f8
 8001864:	200002c4 	.word	0x200002c4
 8001868:	200002c8 	.word	0x200002c8
 800186c:	200002cc 	.word	0x200002cc
 8001870:	00000000 	.word	0x00000000
 8001874:	4052c000 	.word	0x4052c000

08001878 <moveCarRight>:
	e_brake = 1;
	pwmVal_servo = SERVOCENTER;
	osDelay(200);
}

void moveCarRight(double angle) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <moveCarRight+0x58>)
 8001884:	22fa      	movs	r2, #250	@ 0xfa
 8001886:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 8001888:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800188c:	f007 ff62 	bl	8009754 <osDelay>
	e_brake = 0;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <moveCarRight+0x5c>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <moveCarRight+0x60>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <moveCarRight+0x64>)
 800189e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a6:	f7fe fce7 	bl	8000278 <__aeabi_dsub>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	490b      	ldr	r1, [pc, #44]	@ (80018dc <moveCarRight+0x64>)
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 80018b4:	bf00      	nop
 80018b6:	f000 f979 	bl	8001bac <finishCheck>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1fa      	bne.n	80018b6 <moveCarRight+0x3e>
	pwmVal_servo = SERVOCENTER;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <moveCarRight+0x58>)
 80018c2:	2293      	movs	r2, #147	@ 0x93
 80018c4:	801a      	strh	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000
 80018d4:	200002bc 	.word	0x200002bc
 80018d8:	200002b8 	.word	0x200002b8
 80018dc:	200002d0 	.word	0x200002d0

080018e0 <moveCarLeft>:

void moveCarLeft(double angle) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <moveCarLeft+0x58>)
 80018ec:	2260      	movs	r2, #96	@ 0x60
 80018ee:	801a      	strh	r2, [r3, #0]
	osDelay(450);
 80018f0:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80018f4:	f007 ff2e 	bl	8009754 <osDelay>
	e_brake = 0;
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <moveCarLeft+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 80018fe:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <moveCarLeft+0x60>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <moveCarLeft+0x64>)
 8001906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800190e:	f7fe fcb5 	bl	800027c <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	490b      	ldr	r1, [pc, #44]	@ (8001944 <moveCarLeft+0x64>)
 8001918:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 800191c:	bf00      	nop
 800191e:	f000 f945 	bl	8001bac <finishCheck>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1fa      	bne.n	800191e <moveCarLeft+0x3e>
	pwmVal_servo = SERVOCENTER;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <moveCarLeft+0x58>)
 800192a:	2293      	movs	r2, #147	@ 0x93
 800192c:	801a      	strh	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	200002bc 	.word	0x200002bc
 8001940:	200002b8 	.word	0x200002b8
 8001944:	200002d0 	.word	0x200002d0

08001948 <PID_Control>:
//chatgpt code
//Define proportional gain for speed control
#define KP_SPEED 3.0  // Tune this value
#define KP_ANGLE 3.0  // Tune this value for angular correction

int PID_Control(int error, int right) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	// Adjust motor direction based on error
	if (right) {
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d018      	beq.n	800198a <PID_Control+0x42>
		if (error > 0) {
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	dd0a      	ble.n	8001974 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // forward
 800195e:	2201      	movs	r2, #1
 8001960:	2110      	movs	r1, #16
 8001962:	483c      	ldr	r0, [pc, #240]	@ (8001a54 <PID_Control+0x10c>)
 8001964:	f002 f894 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2120      	movs	r1, #32
 800196c:	4839      	ldr	r0, [pc, #228]	@ (8001a54 <PID_Control+0x10c>)
 800196e:	f002 f88f 	bl	8003a90 <HAL_GPIO_WritePin>
 8001972:	e022      	b.n	80019ba <PID_Control+0x72>
		} else {
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // reverse
 8001974:	2200      	movs	r2, #0
 8001976:	2110      	movs	r1, #16
 8001978:	4836      	ldr	r0, [pc, #216]	@ (8001a54 <PID_Control+0x10c>)
 800197a:	f002 f889 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	2120      	movs	r1, #32
 8001982:	4834      	ldr	r0, [pc, #208]	@ (8001a54 <PID_Control+0x10c>)
 8001984:	f002 f884 	bl	8003a90 <HAL_GPIO_WritePin>
 8001988:	e017      	b.n	80019ba <PID_Control+0x72>
		}
	} else {
		if (error > 0) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd0a      	ble.n	80019a6 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // forward
 8001990:	2201      	movs	r2, #1
 8001992:	2108      	movs	r1, #8
 8001994:	482f      	ldr	r0, [pc, #188]	@ (8001a54 <PID_Control+0x10c>)
 8001996:	f002 f87b 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	482d      	ldr	r0, [pc, #180]	@ (8001a54 <PID_Control+0x10c>)
 80019a0:	f002 f876 	bl	8003a90 <HAL_GPIO_WritePin>
 80019a4:	e009      	b.n	80019ba <PID_Control+0x72>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // reverse
 80019a6:	2200      	movs	r2, #0
 80019a8:	2108      	movs	r1, #8
 80019aa:	482a      	ldr	r0, [pc, #168]	@ (8001a54 <PID_Control+0x10c>)
 80019ac:	f002 f870 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2104      	movs	r1, #4
 80019b4:	4827      	ldr	r0, [pc, #156]	@ (8001a54 <PID_Control+0x10c>)
 80019b6:	f002 f86b 	bl	8003a90 <HAL_GPIO_WritePin>
		}
	}

	// Apply proportional control based on error
	int output = (int)(KP_SPEED * abs(error));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bfb8      	it	lt
 80019c0:	425b      	neglt	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fda6 	bl	8000514 <__aeabi_i2d>
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <PID_Control+0x110>)
 80019ce:	f7fe fe0b 	bl	80005e8 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f89f 	bl	8000b1c <__aeabi_d2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
	if (output > 3500) output = 3500;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80019e8:	4293      	cmp	r3, r2
 80019ea:	dd03      	ble.n	80019f4 <PID_Control+0xac>
 80019ec:	f640 53ac 	movw	r3, #3500	@ 0xdac
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e02a      	b.n	8001a4a <PID_Control+0x102>
	else if (output > 2000) output = 2000;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019fa:	dd03      	ble.n	8001a04 <PID_Control+0xbc>
 80019fc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e022      	b.n	8001a4a <PID_Control+0x102>
	else if (output > 1000) output = 1400;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a0a:	dd03      	ble.n	8001a14 <PID_Control+0xcc>
 8001a0c:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e01a      	b.n	8001a4a <PID_Control+0x102>
	else if (output > 500) output = 1000;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a1a:	dd03      	ble.n	8001a24 <PID_Control+0xdc>
 8001a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e012      	b.n	8001a4a <PID_Control+0x102>
	else if (output > 2) {
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	dd08      	ble.n	8001a3c <PID_Control+0xf4>
		times_acceptable++;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <PID_Control+0x114>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <PID_Control+0x114>)
 8001a32:	6013      	str	r3, [r2, #0]
		output = 800;
 8001a34:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e006      	b.n	8001a4a <PID_Control+0x102>
	} else {
		times_acceptable++;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <PID_Control+0x114>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <PID_Control+0x114>)
 8001a44:	6013      	str	r3, [r2, #0]
		output = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
	}
	return output;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40080000 	.word	0x40080000
 8001a5c:	200002b8 	.word	0x200002b8

08001a60 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a6a:	6078      	str	r0, [r7, #4]
	int error = (int)(errord * 10);
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <PID_Angle+0x13c>)
 8001a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a76:	f7fe fdb7 	bl	80005e8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f84b 	bl	8000b1c <__aeabi_d2iz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	613b      	str	r3, [r7, #16]

	// Adjust motor direction based on error
	if (right) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d018      	beq.n	8001ac2 <PID_Angle+0x62>
		if (error > 0) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dd0a      	ble.n	8001aac <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // forward
 8001a96:	2201      	movs	r2, #1
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4841      	ldr	r0, [pc, #260]	@ (8001ba0 <PID_Angle+0x140>)
 8001a9c:	f001 fff8 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	483e      	ldr	r0, [pc, #248]	@ (8001ba0 <PID_Angle+0x140>)
 8001aa6:	f001 fff3 	bl	8003a90 <HAL_GPIO_WritePin>
 8001aaa:	e022      	b.n	8001af2 <PID_Angle+0x92>
		} else {
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // reverse
 8001aac:	2200      	movs	r2, #0
 8001aae:	2110      	movs	r1, #16
 8001ab0:	483b      	ldr	r0, [pc, #236]	@ (8001ba0 <PID_Angle+0x140>)
 8001ab2:	f001 ffed 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2120      	movs	r1, #32
 8001aba:	4839      	ldr	r0, [pc, #228]	@ (8001ba0 <PID_Angle+0x140>)
 8001abc:	f001 ffe8 	bl	8003a90 <HAL_GPIO_WritePin>
 8001ac0:	e017      	b.n	8001af2 <PID_Angle+0x92>
		}
	} else {
		if (error < 0) {
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0a      	bge.n	8001ade <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // forward
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2108      	movs	r1, #8
 8001acc:	4834      	ldr	r0, [pc, #208]	@ (8001ba0 <PID_Angle+0x140>)
 8001ace:	f001 ffdf 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	4832      	ldr	r0, [pc, #200]	@ (8001ba0 <PID_Angle+0x140>)
 8001ad8:	f001 ffda 	bl	8003a90 <HAL_GPIO_WritePin>
 8001adc:	e009      	b.n	8001af2 <PID_Angle+0x92>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // reverse
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	482f      	ldr	r0, [pc, #188]	@ (8001ba0 <PID_Angle+0x140>)
 8001ae4:	f001 ffd4 	bl	8003a90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2104      	movs	r1, #4
 8001aec:	482c      	ldr	r0, [pc, #176]	@ (8001ba0 <PID_Angle+0x140>)
 8001aee:	f001 ffcf 	bl	8003a90 <HAL_GPIO_WritePin>
		}
	}

	// Apply proportional control based on error
	int output = (int)(KP_ANGLE * abs(error));
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bfb8      	it	lt
 8001af8:	425b      	neglt	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd0a 	bl	8000514 <__aeabi_i2d>
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <PID_Angle+0x144>)
 8001b06:	f7fe fd6f 	bl	80005e8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f803 	bl	8000b1c <__aeabi_d2iz>
 8001b16:	4603      	mov	r3, r0
 8001b18:	617b      	str	r3, [r7, #20]
	if (output > 3500) output = 3500;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001b20:	4293      	cmp	r3, r2
 8001b22:	dd03      	ble.n	8001b2c <PID_Angle+0xcc>
 8001b24:	f640 53ac 	movw	r3, #3500	@ 0xdac
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e031      	b.n	8001b90 <PID_Angle+0x130>
	else if (output > 2000) output = 3000;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b32:	dd03      	ble.n	8001b3c <PID_Angle+0xdc>
 8001b34:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e029      	b.n	8001b90 <PID_Angle+0x130>
	else if (output > 1000) output = 1600;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b42:	dd03      	ble.n	8001b4c <PID_Angle+0xec>
 8001b44:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e021      	b.n	8001b90 <PID_Angle+0x130>
	else if (output > 500) output = 1400;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b52:	dd03      	ble.n	8001b5c <PID_Angle+0xfc>
 8001b54:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e019      	b.n	8001b90 <PID_Angle+0x130>
	else if (output > 10) output = 1000;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b0a      	cmp	r3, #10
 8001b60:	dd03      	ble.n	8001b6a <PID_Angle+0x10a>
 8001b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	e012      	b.n	8001b90 <PID_Angle+0x130>
	else if (output >= 2) {
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	dd08      	ble.n	8001b82 <PID_Angle+0x122>
		times_acceptable++;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <PID_Angle+0x148>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba8 <PID_Angle+0x148>)
 8001b78:	6013      	str	r3, [r2, #0]
		output = 800;
 8001b7a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e006      	b.n	8001b90 <PID_Angle+0x130>
	} else {
		times_acceptable++;
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <PID_Angle+0x148>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <PID_Angle+0x148>)
 8001b8a:	6013      	str	r3, [r2, #0]
		output = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
	}
	return output;
 8001b90:	697b      	ldr	r3, [r7, #20]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40240000 	.word	0x40240000
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40080000 	.word	0x40080000
 8001ba8:	200002b8 	.word	0x200002b8

08001bac <finishCheck>:
//		times_acceptable++;
//		return 0;
//	}
//}

int finishCheck() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <finishCheck+0x48>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b14      	cmp	r3, #20
 8001bb6:	dd1a      	ble.n	8001bee <finishCheck+0x42>
		e_brake = 1;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <finishCheck+0x4c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <finishCheck+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	801a      	strh	r2, [r3, #0]
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <finishCheck+0x50>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <finishCheck+0x54>)
 8001bca:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <finishCheck+0x58>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <finishCheck+0x5c>)
 8001bd2:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <finishCheck+0x60>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <finishCheck+0x64>)
 8001bda:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <finishCheck+0x48>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001be2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001be6:	f007 fdb5 	bl	8009754 <osDelay>
		return 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <finishCheck+0x44>
	}
	return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200002b8 	.word	0x200002b8
 8001bf8:	200002bc 	.word	0x200002bc
 8001bfc:	200002b4 	.word	0x200002b4
 8001c00:	200002b6 	.word	0x200002b6
 8001c04:	200002c4 	.word	0x200002c4
 8001c08:	200002cc 	.word	0x200002cc
 8001c0c:	200002c0 	.word	0x200002c0
 8001c10:	200002c8 	.word	0x200002c8

08001c14 <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001c20:	4a0e      	ldr	r2, [pc, #56]	@ (8001c5c <readByte+0x48>)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <readByte+0x4c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	b299      	uxth	r1, r3
 8001c2e:	230a      	movs	r3, #10
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <readByte+0x48>)
 8001c36:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <readByte+0x50>)
 8001c38:	f002 f8b8 	bl	8003dac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <readByte+0x4c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	b299      	uxth	r1, r3
 8001c44:	2314      	movs	r3, #20
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <readByte+0x50>)
 8001c4e:	f002 f9ab 	bl	8003fa8 <HAL_I2C_Master_Receive>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002e0 	.word	0x200002e0
 8001c60:	20000002 	.word	0x20000002
 8001c64:	20000084 	.word	0x20000084

08001c68 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <writeByte+0x3c>)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001c7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <writeByte+0x3c>)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <writeByte+0x40>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	b299      	uxth	r1, r3
 8001c8c:	2314      	movs	r3, #20
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2302      	movs	r3, #2
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <writeByte+0x3c>)
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <writeByte+0x44>)
 8001c96:	f002 f889 	bl	8003dac <HAL_I2C_Master_Transmit>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002e0 	.word	0x200002e0
 8001ca8:	20000002 	.word	0x20000002
 8001cac:	20000084 	.word	0x20000084

08001cb0 <gyroInit>:

void gyroInit() {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2006      	movs	r0, #6
 8001cb8:	f7ff ffd6 	bl	8001c68 <writeByte>
	osDelay(10); //initial value is 10
 8001cbc:	200a      	movs	r0, #10
 8001cbe:	f007 fd49 	bl	8009754 <osDelay>
	writeByte(0x03, 0x80);
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f7ff ffcf 	bl	8001c68 <writeByte>
	osDelay(10);
 8001cca:	200a      	movs	r0, #10
 8001ccc:	f007 fd42 	bl	8009754 <osDelay>
	writeByte(0x07, 0x07);
 8001cd0:	2107      	movs	r1, #7
 8001cd2:	2007      	movs	r0, #7
 8001cd4:	f7ff ffc8 	bl	8001c68 <writeByte>
	osDelay(10);
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f007 fd3b 	bl	8009754 <osDelay>
	writeByte(0x06, 0x01);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f7ff ffc1 	bl	8001c68 <writeByte>
	osDelay(10);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f007 fd34 	bl	8009754 <osDelay>
	writeByte(0x7F, 0x20);
 8001cec:	2120      	movs	r1, #32
 8001cee:	207f      	movs	r0, #127	@ 0x7f
 8001cf0:	f7ff ffba 	bl	8001c68 <writeByte>
	osDelay(10);
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f007 fd2d 	bl	8009754 <osDelay>
	writeByte(0x01, 0x2F);
 8001cfa:	212f      	movs	r1, #47	@ 0x2f
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff ffb3 	bl	8001c68 <writeByte>
	osDelay(10);
 8001d02:	200a      	movs	r0, #10
 8001d04:	f007 fd26 	bl	8009754 <osDelay>
	writeByte(0x0, 0x00);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff ffac 	bl	8001c68 <writeByte>
	osDelay(10);
 8001d10:	200a      	movs	r0, #10
 8001d12:	f007 fd1f 	bl	8009754 <osDelay>
	writeByte(0x7F, 0x00);
 8001d16:	2100      	movs	r1, #0
 8001d18:	207f      	movs	r0, #127	@ 0x7f
 8001d1a:	f7ff ffa5 	bl	8001c68 <writeByte>
	osDelay(10);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f007 fd18 	bl	8009754 <osDelay>
	writeByte(0x07, 0x00);
 8001d24:	2100      	movs	r1, #0
 8001d26:	2007      	movs	r0, #7
 8001d28:	f7ff ff9e 	bl	8001c68 <writeByte>
	osDelay(10);
 8001d2c:	200a      	movs	r0, #10
 8001d2e:	f007 fd11 	bl	8009754 <osDelay>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
//	aRxBuffer[3] = '0';
//	aRxBuffer[4] = '7';
//	osDelay(3000);
//	}
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <StartDefaultTask+0x20>)
 8001d46:	f001 febc 	bl	8003ac2 <HAL_GPIO_TogglePin>
		osDelay(2000);
 8001d4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d4e:	f007 fd01 	bl	8009754 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001d52:	bf00      	nop
 8001d54:	e7f4      	b.n	8001d40 <StartDefaultTask+0x8>
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8001d68:	4bad      	ldr	r3, [pc, #692]	@ (8002020 <StartMotorTask+0x2c0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8001d6e:	4bad      	ldr	r3, [pc, #692]	@ (8002024 <StartMotorTask+0x2c4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	48ab      	ldr	r0, [pc, #684]	@ (8002028 <StartMotorTask+0x2c8>)
 8001d7c:	f005 f8c8 	bl	8006f10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001d80:	2104      	movs	r1, #4
 8001d82:	48a9      	ldr	r0, [pc, #676]	@ (8002028 <StartMotorTask+0x2c8>)
 8001d84:	f005 f8c4 	bl	8006f10 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d88:	210c      	movs	r1, #12
 8001d8a:	48a8      	ldr	r0, [pc, #672]	@ (800202c <StartMotorTask+0x2cc>)
 8001d8c:	f005 f8c0 	bl	8006f10 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <StartMotorTask+0x2cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2293      	movs	r2, #147	@ 0x93
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	48a4      	ldr	r0, [pc, #656]	@ (8002030 <StartMotorTask+0x2d0>)
 8001d9e:	f001 fe77 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	48a2      	ldr	r0, [pc, #648]	@ (8002030 <StartMotorTask+0x2d0>)
 8001da8:	f001 fe72 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001dac:	2201      	movs	r2, #1
 8001dae:	2108      	movs	r1, #8
 8001db0:	489f      	ldr	r0, [pc, #636]	@ (8002030 <StartMotorTask+0x2d0>)
 8001db2:	f001 fe6d 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2104      	movs	r1, #4
 8001dba:	489d      	ldr	r0, [pc, #628]	@ (8002030 <StartMotorTask+0x2d0>)
 8001dbc:	f001 fe68 	bl	8003a90 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001dc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dc4:	f007 fcc6 	bl	8009754 <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8001dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002034 <StartMotorTask+0x2d4>)
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	4b97      	ldr	r3, [pc, #604]	@ (800202c <StartMotorTask+0x2cc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	641a      	str	r2, [r3, #64]	@ 0x40
		double error_angle = target_angle - total_angle;
 8001dd2:	4b99      	ldr	r3, [pc, #612]	@ (8002038 <StartMotorTask+0x2d8>)
 8001dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd8:	4b98      	ldr	r3, [pc, #608]	@ (800203c <StartMotorTask+0x2dc>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fa4b 	bl	8000278 <__aeabi_dsub>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (pwmVal_servo < 127) { //TURN LEFT
 8001dea:	4b92      	ldr	r3, [pc, #584]	@ (8002034 <StartMotorTask+0x2d4>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b7e      	cmp	r3, #126	@ 0x7e
 8001df0:	d84c      	bhi.n	8001e8c <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //right is master *1.072
 8001df2:	2001      	movs	r0, #1
 8001df4:	ed97 0b02 	vldr	d0, [r7, #8]
 8001df8:	f7ff fe32 	bl	8001a60 <PID_Angle>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb88 	bl	8000514 <__aeabi_i2d>
 8001e04:	a382      	add	r3, pc, #520	@ (adr r3, 8002010 <StartMotorTask+0x2b0>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbed 	bl	80005e8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fea9 	bl	8000b6c <__aeabi_d2uiz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b80      	ldr	r3, [pc, #512]	@ (8002020 <StartMotorTask+0x2c0>)
 8001e20:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.85); //left is slave *0.59
 8001e22:	4b7f      	ldr	r3, [pc, #508]	@ (8002020 <StartMotorTask+0x2c0>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb74 	bl	8000514 <__aeabi_i2d>
 8001e2c:	a37a      	add	r3, pc, #488	@ (adr r3, 8002018 <StartMotorTask+0x2b8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fbd9 	bl	80005e8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe95 	bl	8000b6c <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b77      	ldr	r3, [pc, #476]	@ (8002024 <StartMotorTask+0x2c4>)
 8001e48:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e56:	f7fe fe57 	bl	8000b08 <__aeabi_dcmpgt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8001e60:	2201      	movs	r2, #1
 8001e62:	2108      	movs	r1, #8
 8001e64:	4872      	ldr	r0, [pc, #456]	@ (8002030 <StartMotorTask+0x2d0>)
 8001e66:	f001 fe13 	bl	8003a90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4870      	ldr	r0, [pc, #448]	@ (8002030 <StartMotorTask+0x2d0>)
 8001e70:	f001 fe0e 	bl	8003a90 <HAL_GPIO_WritePin>
 8001e74:	e151      	b.n	800211a <StartMotorTask+0x3ba>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001e76:	2200      	movs	r2, #0
 8001e78:	2108      	movs	r1, #8
 8001e7a:	486d      	ldr	r0, [pc, #436]	@ (8002030 <StartMotorTask+0x2d0>)
 8001e7c:	f001 fe08 	bl	8003a90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2104      	movs	r1, #4
 8001e84:	486a      	ldr	r0, [pc, #424]	@ (8002030 <StartMotorTask+0x2d0>)
 8001e86:	f001 fe03 	bl	8003a90 <HAL_GPIO_WritePin>
 8001e8a:	e146      	b.n	800211a <StartMotorTask+0x3ba>
			}
		}

		else if (pwmVal_servo > 189) { //TURN RIGHT
 8001e8c:	4b69      	ldr	r3, [pc, #420]	@ (8002034 <StartMotorTask+0x2d4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	2bbd      	cmp	r3, #189	@ 0xbd
 8001e92:	d93d      	bls.n	8001f10 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 8001e94:	2000      	movs	r0, #0
 8001e96:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e9a:	f7ff fde1 	bl	8001a60 <PID_Angle>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <StartMotorTask+0x2c4>)
 8001ea4:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.85); //right is slave *0.59
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8002024 <StartMotorTask+0x2c4>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb32 	bl	8000514 <__aeabi_i2d>
 8001eb0:	a359      	add	r3, pc, #356	@ (adr r3, 8002018 <StartMotorTask+0x2b8>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fb97 	bl	80005e8 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe53 	bl	8000b6c <__aeabi_d2uiz>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	4b55      	ldr	r3, [pc, #340]	@ (8002020 <StartMotorTask+0x2c0>)
 8001ecc:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eda:	f7fe fdf7 	bl	8000acc <__aeabi_dcmplt>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	4851      	ldr	r0, [pc, #324]	@ (8002030 <StartMotorTask+0x2d0>)
 8001eea:	f001 fdd1 	bl	8003a90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	484f      	ldr	r0, [pc, #316]	@ (8002030 <StartMotorTask+0x2d0>)
 8001ef4:	f001 fdcc 	bl	8003a90 <HAL_GPIO_WritePin>
 8001ef8:	e10f      	b.n	800211a <StartMotorTask+0x3ba>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001efa:	2200      	movs	r2, #0
 8001efc:	2110      	movs	r1, #16
 8001efe:	484c      	ldr	r0, [pc, #304]	@ (8002030 <StartMotorTask+0x2d0>)
 8001f00:	f001 fdc6 	bl	8003a90 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2120      	movs	r1, #32
 8001f08:	4849      	ldr	r0, [pc, #292]	@ (8002030 <StartMotorTask+0x2d0>)
 8001f0a:	f001 fdc1 	bl	8003a90 <HAL_GPIO_WritePin>
 8001f0e:	e104      	b.n	800211a <StartMotorTask+0x3ba>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072; //*1.072
 8001f10:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <StartMotorTask+0x2e0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b4b      	ldr	r3, [pc, #300]	@ (8002044 <StartMotorTask+0x2e4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fd13 	bl	8001948 <PID_Control>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe faf5 	bl	8000514 <__aeabi_i2d>
 8001f2a:	a339      	add	r3, pc, #228	@ (adr r3, 8002010 <StartMotorTask+0x2b0>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb5a 	bl	80005e8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fe16 	bl	8000b6c <__aeabi_d2uiz>
 8001f40:	4603      	mov	r3, r0
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <StartMotorTask+0x2c0>)
 8001f46:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 8001f48:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <StartMotorTask+0x2e0>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002044 <StartMotorTask+0x2e4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f56:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <StartMotorTask+0x2e8>)
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <StartMotorTask+0x2ec>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1acb      	subs	r3, r1, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfb8      	it	lt
 8001f68:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dd03      	ble.n	8001f76 <StartMotorTask+0x216>
				straightCorrection++;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e002      	b.n	8001f7c <StartMotorTask+0x21c>
			} else {
				straightCorrection--;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 8001f7c:	4b30      	ldr	r3, [pc, #192]	@ (8002040 <StartMotorTask+0x2e0>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <StartMotorTask+0x2e4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001f8a:	db08      	blt.n	8001f9e <StartMotorTask+0x23e>
 8001f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002040 <StartMotorTask+0x2e0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <StartMotorTask+0x2e4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b63      	cmp	r3, #99	@ 0x63
 8001f98:	dc01      	bgt.n	8001f9e <StartMotorTask+0x23e>
				straightCorrection = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <StartMotorTask+0x2e8>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <StartMotorTask+0x2ec>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fccc 	bl	8001948 <PID_Control>
 8001fb0:	4603      	mov	r3, r0
					+ straightCorrection;
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29a      	uxth	r2, r3
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <StartMotorTask+0x2c4>)
 8001fbe:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <StartMotorTask+0x2e0>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <StartMotorTask+0x2e4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da64      	bge.n	8002098 <StartMotorTask+0x338>
				if (error_angle > 2) { // left +. right -.
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fda:	f7fe fd95 	bl	8000b08 <__aeabi_dcmpgt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <StartMotorTask+0x28c>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <StartMotorTask+0x2d4>)
 8001fe6:	22a6      	movs	r2, #166	@ 0xa6
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	e096      	b.n	800211a <StartMotorTask+0x3ba>
				} else if (error_angle < -2) {
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff8:	f7fe fd68 	bl	8000acc <__aeabi_dcmplt>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d026      	beq.n	8002050 <StartMotorTask+0x2f0>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <StartMotorTask+0x2d4>)
 8002004:	2280      	movs	r2, #128	@ 0x80
 8002006:	801a      	strh	r2, [r3, #0]
 8002008:	e087      	b.n	800211a <StartMotorTask+0x3ba>
 800200a:	bf00      	nop
 800200c:	f3af 8000 	nop.w
 8002010:	78d4fdf4 	.word	0x78d4fdf4
 8002014:	3ff126e9 	.word	0x3ff126e9
 8002018:	33333333 	.word	0x33333333
 800201c:	3feb3333 	.word	0x3feb3333
 8002020:	200002b4 	.word	0x200002b4
 8002024:	200002b6 	.word	0x200002b6
 8002028:	200001f8 	.word	0x200001f8
 800202c:	200000d8 	.word	0x200000d8
 8002030:	40020000 	.word	0x40020000
 8002034:	20000000 	.word	0x20000000
 8002038:	200002d0 	.word	0x200002d0
 800203c:	200002d8 	.word	0x200002d8
 8002040:	200002cc 	.word	0x200002cc
 8002044:	200002c4 	.word	0x200002c4
 8002048:	200002c8 	.word	0x200002c8
 800204c:	200002c0 	.word	0x200002c0
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <StartMotorTask+0x418>)
 8002056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800205a:	f7fe fac5 	bl	80005e8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b44      	ldr	r3, [pc, #272]	@ (800217c <StartMotorTask+0x41c>)
 800206c:	f7fe fbe6 	bl	800083c <__aeabi_ddiv>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	a33d      	add	r3, pc, #244	@ (adr r3, 8002170 <StartMotorTask+0x410>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe f8fd 	bl	800027c <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fd6f 	bl	8000b6c <__aeabi_d2uiz>
 800208e:	4603      	mov	r3, r0
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <StartMotorTask+0x420>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e040      	b.n	800211a <StartMotorTask+0x3ba>
				}

			} else {
				if (error_angle > 2) { // left +. right -.
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020a4:	f7fe fd30 	bl	8000b08 <__aeabi_dcmpgt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <StartMotorTask+0x356>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <StartMotorTask+0x420>)
 80020b0:	2280      	movs	r2, #128	@ 0x80
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	e031      	b.n	800211a <StartMotorTask+0x3ba>
				} else if (error_angle < -2) {
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80020be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020c2:	f7fe fd03 	bl	8000acc <__aeabi_dcmplt>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <StartMotorTask+0x374>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <StartMotorTask+0x420>)
 80020ce:	22a6      	movs	r2, #166	@ 0xa6
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	e022      	b.n	800211a <StartMotorTask+0x3ba>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <StartMotorTask+0x424>)
 80020da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020de:	f7fe fa83 	bl	80005e8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b23      	ldr	r3, [pc, #140]	@ (800217c <StartMotorTask+0x41c>)
 80020f0:	f7fe fba4 	bl	800083c <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	a31c      	add	r3, pc, #112	@ (adr r3, 8002170 <StartMotorTask+0x410>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe f8bb 	bl	800027c <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd2d 	bl	8000b6c <__aeabi_d2uiz>
 8002112:	4603      	mov	r3, r0
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <StartMotorTask+0x420>)
 8002118:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <StartMotorTask+0x428>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00e      	beq.n	8002140 <StartMotorTask+0x3e0>
			pwmVal_L = pwmVal_R = 0;
 8002122:	4b1a      	ldr	r3, [pc, #104]	@ (800218c <StartMotorTask+0x42c>)
 8002124:	2200      	movs	r2, #0
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	4b18      	ldr	r3, [pc, #96]	@ (800218c <StartMotorTask+0x42c>)
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <StartMotorTask+0x430>)
 800212e:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <StartMotorTask+0x434>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <StartMotorTask+0x438>)
 8002136:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <StartMotorTask+0x43c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <StartMotorTask+0x440>)
 800213e:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <StartMotorTask+0x430>)
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <StartMotorTask+0x444>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <StartMotorTask+0x42c>)
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <StartMotorTask+0x444>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38
		osDelay(1);
 8002154:	2001      	movs	r0, #1
 8002156:	f007 fafd 	bl	8009754 <osDelay>

		if (times_acceptable > 1000) {
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <StartMotorTask+0x448>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002162:	f77f ae31 	ble.w	8001dc8 <StartMotorTask+0x68>
			times_acceptable = 1001;
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <StartMotorTask+0x448>)
 8002168:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800216c:	601a      	str	r2, [r3, #0]
	for (;;) {
 800216e:	e62b      	b.n	8001dc8 <StartMotorTask+0x68>
 8002170:	00000000 	.word	0x00000000
 8002174:	40626000 	.word	0x40626000
 8002178:	40330000 	.word	0x40330000
 800217c:	40140000 	.word	0x40140000
 8002180:	20000000 	.word	0x20000000
 8002184:	c0330000 	.word	0xc0330000
 8002188:	200002bc 	.word	0x200002bc
 800218c:	200002b4 	.word	0x200002b4
 8002190:	200002b6 	.word	0x200002b6
 8002194:	200002c4 	.word	0x200002c4
 8002198:	200002cc 	.word	0x200002cc
 800219c:	200002c0 	.word	0x200002c0
 80021a0:	200002c8 	.word	0x200002c8
 80021a4:	200001f8 	.word	0x200001f8
 80021a8:	200002b8 	.word	0x200002b8

080021ac <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b096      	sub	sp, #88	@ 0x58
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
	for (;;) {
		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 80021ea:	4b31      	ldr	r3, [pc, #196]	@ (80022b0 <StartOLEDTask+0x104>)
 80021ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021f0:	4b2f      	ldr	r3, [pc, #188]	@ (80022b0 <StartOLEDTask+0x104>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fc8f 	bl	8000b1c <__aeabi_d2iz>
 80021fe:	4603      	mov	r3, r0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f987 	bl	8000514 <__aeabi_i2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fe f833 	bl	8000278 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <StartOLEDTask+0x108>)
 8002220:	f7fe f9e2 	bl	80005e8 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fc76 	bl	8000b1c <__aeabi_d2iz>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bfb8      	it	lt
 8002236:	425b      	neglt	r3, r3
 8002238:	647b      	str	r3, [r7, #68]	@ 0x44
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <StartOLEDTask+0x104>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc6a 	bl	8000b1c <__aeabi_d2iz>
 8002248:	4602      	mov	r2, r0
 800224a:	f107 001c 	add.w	r0, r7, #28
 800224e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002250:	4919      	ldr	r1, [pc, #100]	@ (80022b8 <StartOLEDTask+0x10c>)
 8002252:	f009 ff51 	bl	800c0f8 <siprintf>
		OLED_ShowString(0, 10, gyroVal);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	461a      	mov	r2, r3
 800225c:	210a      	movs	r1, #10
 800225e:	2000      	movs	r0, #0
 8002260:	f000 ff74 	bl	800314c <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <StartOLEDTask+0x110>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461c      	mov	r4, r3
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <StartOLEDTask+0x110>)
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002270:	4b12      	ldr	r3, [pc, #72]	@ (80022bc <StartOLEDTask+0x110>)
 8002272:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002274:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002276:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <StartOLEDTask+0x110>)
 8002278:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800227a:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <StartOLEDTask+0x110>)
 800227e:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002280:	f107 0008 	add.w	r0, r7, #8
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	9101      	str	r1, [sp, #4]
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	462b      	mov	r3, r5
 800228c:	4622      	mov	r2, r4
 800228e:	490c      	ldr	r1, [pc, #48]	@ (80022c0 <StartOLEDTask+0x114>)
 8002290:	f009 ff32 	bl	800c0f8 <siprintf>
		OLED_ShowString(0, 20, command);
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	461a      	mov	r2, r3
 800229a:	2114      	movs	r1, #20
 800229c:	2000      	movs	r0, #0
 800229e:	f000 ff55 	bl	800314c <OLED_ShowString>

		OLED_Refresh_Gram();
 80022a2:	f000 fddf 	bl	8002e64 <OLED_Refresh_Gram>
		osDelay(100);
 80022a6:	2064      	movs	r0, #100	@ 0x64
 80022a8:	f007 fa54 	bl	8009754 <osDelay>
	for (;;) {
 80022ac:	bf00      	nop
 80022ae:	e79c      	b.n	80021ea <StartOLEDTask+0x3e>
 80022b0:	200002d8 	.word	0x200002d8
 80022b4:	408f4000 	.word	0x408f4000
 80022b8:	0800cb5c 	.word	0x0800cb5c
 80022bc:	200002a4 	.word	0x200002a4
 80022c0:	0800cb6c 	.word	0x0800cb6c
 80022c4:	00000000 	.word	0x00000000

080022c8 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80022d0:	f7ff fcee 	bl	8001cb0 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80022d4:	2300      	movs	r3, #0
 80022d6:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
	double offset = 0;
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
	osDelay(50);
 80022fc:	2032      	movs	r0, #50	@ 0x32
 80022fe:	f007 fa29 	bl	8009754 <osDelay>
	while (i < 1000) {
 8002302:	e048      	b.n	8002396 <StartGyroTask+0xce>
		osDelay(1);
 8002304:	2001      	movs	r0, #1
 8002306:	f007 fa25 	bl	8009754 <osDelay>
		readByte(0x37, val);
 800230a:	f107 0308 	add.w	r3, r7, #8
 800230e:	4619      	mov	r1, r3
 8002310:	2037      	movs	r0, #55	@ 0x37
 8002312:	f7ff fc7f 	bl	8001c14 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002316:	7a3b      	ldrb	r3, [r7, #8]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b21a      	sxth	r2, r3
 800231c:	7a7b      	ldrb	r3, [r7, #9]
 800231e:	b21b      	sxth	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 8002324:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f8f3 	bl	8000514 <__aeabi_i2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 8002332:	f001 f82f 	bl	8003394 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f8d9 	bl	80004f4 <__aeabi_ui2d>
 8002342:	a346      	add	r3, pc, #280	@ (adr r3, 800245c <StartGyroTask+0x194>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe fa78 	bl	800083c <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fe f948 	bl	80005e8 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 800235c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002360:	f7fd ff8c 	bl	800027c <__adddf3>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 800236c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8cf 	bl	8000514 <__aeabi_i2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800237e:	f7fd ff7d 	bl	800027c <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 800238a:	f001 f803 	bl	8003394 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
	while (i < 1000) {
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800239c:	dbb2      	blt.n	8002304 <StartGyroTask+0x3c>
	}
	offset = offset / i;
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7fe f8b8 	bl	8000514 <__aeabi_i2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023ac:	f7fe fa46 	bl	800083c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 80023b8:	f000 ffec 	bl	8003394 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	@ 0x24
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80023be:	2064      	movs	r0, #100	@ 0x64
 80023c0:	f007 f9c8 	bl	8009754 <osDelay>
		readByte(0x37, val);
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4619      	mov	r1, r3
 80023ca:	2037      	movs	r0, #55	@ 0x37
 80023cc:	f7ff fc22 	bl	8001c14 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80023d0:	7a3b      	ldrb	r3, [r7, #8]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	7a7b      	ldrb	r3, [r7, #9]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80023de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f896 	bl	8000514 <__aeabi_i2d>
 80023e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ec:	f7fd ff44 	bl	8000278 <__aeabi_dsub>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 80023f8:	f000 ffcc 	bl	8003394 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f876 	bl	80004f4 <__aeabi_ui2d>
 8002408:	a314      	add	r3, pc, #80	@ (adr r3, 800245c <StartGyroTask+0x194>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe fa15 	bl	800083c <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4620      	mov	r0, r4
 8002418:	4629      	mov	r1, r5
 800241a:	f7fe f8e5 	bl	80005e8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 8002426:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <StartGyroTask+0x190>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fd ff26 	bl	800027c <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4908      	ldr	r1, [pc, #32]	@ (8002458 <StartGyroTask+0x190>)
 8002436:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 800243a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002444:	f000 ffa6 	bl	8003394 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002450:	bf00      	nop
 8002452:	e7b4      	b.n	80023be <StartGyroTask+0xf6>
 8002454:	f3af 8000 	nop.w
 8002458:	200002d8 	.word	0x200002d8
 800245c:	00000000 	.word	0x00000000
 8002460:	40d00400 	.word	0x40d00400

08002464 <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 800246c:	2341      	movs	r3, #65	@ 0x41
 800246e:	73fb      	strb	r3, [r7, #15]

	aRxBuffer[0] = 'E';
 8002470:	4b81      	ldr	r3, [pc, #516]	@ (8002678 <StartCommunicateTask+0x214>)
 8002472:	2245      	movs	r2, #69	@ 0x45
 8002474:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 8002476:	4b80      	ldr	r3, [pc, #512]	@ (8002678 <StartCommunicateTask+0x214>)
 8002478:	224d      	movs	r2, #77	@ 0x4d
 800247a:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 800247c:	4b7e      	ldr	r3, [pc, #504]	@ (8002678 <StartCommunicateTask+0x214>)
 800247e:	2250      	movs	r2, #80	@ 0x50
 8002480:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 8002482:	4b7d      	ldr	r3, [pc, #500]	@ (8002678 <StartCommunicateTask+0x214>)
 8002484:	2254      	movs	r2, #84	@ 0x54
 8002486:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 8002488:	4b7b      	ldr	r3, [pc, #492]	@ (8002678 <StartCommunicateTask+0x214>)
 800248a:	2259      	movs	r2, #89	@ 0x59
 800248c:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		if (receivedInstruction == 1) //need to uncomment to manually send
 800248e:	4b7b      	ldr	r3, [pc, #492]	@ (800267c <StartCommunicateTask+0x218>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	f040 80d7 	bne.w	8002646 <StartCommunicateTask+0x1e2>
		{
			magnitude = 0;
 8002498:	4b79      	ldr	r3, [pc, #484]	@ (8002680 <StartCommunicateTask+0x21c>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
					if ((aRxBuffer[0] == 'G' && aRxBuffer[1] == 'Y' && aRxBuffer[2] == 'R'
 800249e:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <StartCommunicateTask+0x214>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b47      	cmp	r3, #71	@ 0x47
 80024a4:	d10f      	bne.n	80024c6 <StartCommunicateTask+0x62>
 80024a6:	4b74      	ldr	r3, [pc, #464]	@ (8002678 <StartCommunicateTask+0x214>)
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b59      	cmp	r3, #89	@ 0x59
 80024ac:	d10b      	bne.n	80024c6 <StartCommunicateTask+0x62>
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <StartCommunicateTask+0x214>)
 80024b0:	789b      	ldrb	r3, [r3, #2]
 80024b2:	2b52      	cmp	r3, #82	@ 0x52
 80024b4:	d107      	bne.n	80024c6 <StartCommunicateTask+0x62>
							&& aRxBuffer[3] == 'O' && aRxBuffer[4] == 'R')
 80024b6:	4b70      	ldr	r3, [pc, #448]	@ (8002678 <StartCommunicateTask+0x214>)
 80024b8:	78db      	ldrb	r3, [r3, #3]
 80024ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80024bc:	d103      	bne.n	80024c6 <StartCommunicateTask+0x62>
 80024be:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <StartCommunicateTask+0x214>)
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	2b52      	cmp	r3, #82	@ 0x52
 80024c4:	d015      	beq.n	80024f2 <StartCommunicateTask+0x8e>
							|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'R'
 80024c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002678 <StartCommunicateTask+0x214>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b53      	cmp	r3, #83	@ 0x53
 80024cc:	d008      	beq.n	80024e0 <StartCommunicateTask+0x7c>
 80024ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002678 <StartCommunicateTask+0x214>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b52      	cmp	r3, #82	@ 0x52
 80024d4:	d004      	beq.n	80024e0 <StartCommunicateTask+0x7c>
									|| aRxBuffer[0] == 'L')
 80024d6:	4b68      	ldr	r3, [pc, #416]	@ (8002678 <StartCommunicateTask+0x214>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b4c      	cmp	r3, #76	@ 0x4c
 80024dc:	f040 80b3 	bne.w	8002646 <StartCommunicateTask+0x1e2>
									&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80024e0:	4b65      	ldr	r3, [pc, #404]	@ (8002678 <StartCommunicateTask+0x214>)
 80024e2:	785b      	ldrb	r3, [r3, #1]
									&& (0 <= aRxBuffer[2] - '0' <= 9)
									&& (0 <= aRxBuffer[3] - '0' <= 9)
									&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 80024e4:	2b46      	cmp	r3, #70	@ 0x46
 80024e6:	d004      	beq.n	80024f2 <StartCommunicateTask+0x8e>
									&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 80024e8:	4b63      	ldr	r3, [pc, #396]	@ (8002678 <StartCommunicateTask+0x214>)
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	2b42      	cmp	r3, #66	@ 0x42
 80024ee:	f040 80aa 	bne.w	8002646 <StartCommunicateTask+0x1e2>

						magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 80024f2:	4b61      	ldr	r3, [pc, #388]	@ (8002678 <StartCommunicateTask+0x214>)
 80024f4:	789b      	ldrb	r3, [r3, #2]
 80024f6:	3b30      	subs	r3, #48	@ 0x30
 80024f8:	2264      	movs	r2, #100	@ 0x64
 80024fa:	fb02 f103 	mul.w	r1, r2, r3
								+ ((int) (aRxBuffer[3]) - 48) * 10
 80024fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002678 <StartCommunicateTask+0x214>)
 8002500:	78db      	ldrb	r3, [r3, #3]
 8002502:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	18ca      	adds	r2, r1, r3
								+ ((int) (aRxBuffer[4]) - 48);
 8002510:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <StartCommunicateTask+0x214>)
 8002512:	791b      	ldrb	r3, [r3, #4]
 8002514:	3b30      	subs	r3, #48	@ 0x30
 8002516:	4413      	add	r3, r2
						magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002518:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <StartCommunicateTask+0x21c>)
 800251a:	6013      	str	r3, [r2, #0]

						if (aRxBuffer[1] == 'B') {
 800251c:	4b56      	ldr	r3, [pc, #344]	@ (8002678 <StartCommunicateTask+0x214>)
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b42      	cmp	r3, #66	@ 0x42
 8002522:	d104      	bne.n	800252e <StartCommunicateTask+0xca>
							magnitude *= -1;
 8002524:	4b56      	ldr	r3, [pc, #344]	@ (8002680 <StartCommunicateTask+0x21c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	425b      	negs	r3, r3
 800252a:	4a55      	ldr	r2, [pc, #340]	@ (8002680 <StartCommunicateTask+0x21c>)
 800252c:	6013      	str	r3, [r2, #0]
						}

						osDelay(10);
 800252e:	200a      	movs	r0, #10
 8002530:	f007 f910 	bl	8009754 <osDelay>
						switch (aRxBuffer[0]) {
 8002534:	4b50      	ldr	r3, [pc, #320]	@ (8002678 <StartCommunicateTask+0x214>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	3b47      	subs	r3, #71	@ 0x47
 800253a:	2b0c      	cmp	r3, #12
 800253c:	f200 8083 	bhi.w	8002646 <StartCommunicateTask+0x1e2>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <StartCommunicateTask+0xe4>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002643 	.word	0x08002643
 800254c:	08002647 	.word	0x08002647
 8002550:	08002647 	.word	0x08002647
 8002554:	08002647 	.word	0x08002647
 8002558:	08002647 	.word	0x08002647
 800255c:	08002601 	.word	0x08002601
 8002560:	08002647 	.word	0x08002647
 8002564:	08002647 	.word	0x08002647
 8002568:	08002647 	.word	0x08002647
 800256c:	08002647 	.word	0x08002647
 8002570:	08002647 	.word	0x08002647
 8002574:	080025bf 	.word	0x080025bf
 8002578:	0800257d 	.word	0x0800257d
						case 'S':
							moveCarStraight(magnitude);
 800257c:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <StartCommunicateTask+0x21c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ffc7 	bl	8000514 <__aeabi_i2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	ec43 2b10 	vmov	d0, r2, r3
 800258e:	f7ff f903 	bl	8001798 <moveCarStraight>
							flagDone = 1;
 8002592:	4b3c      	ldr	r3, [pc, #240]	@ (8002684 <StartCommunicateTask+0x220>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <StartCommunicateTask+0x214>)
 800259a:	2244      	movs	r2, #68	@ 0x44
 800259c:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 800259e:	4b36      	ldr	r3, [pc, #216]	@ (8002678 <StartCommunicateTask+0x214>)
 80025a0:	224f      	movs	r2, #79	@ 0x4f
 80025a2:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 80025a4:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <StartCommunicateTask+0x214>)
 80025a6:	224e      	movs	r2, #78	@ 0x4e
 80025a8:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 80025aa:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <StartCommunicateTask+0x214>)
 80025ac:	2245      	movs	r2, #69	@ 0x45
 80025ae:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 80025b0:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <StartCommunicateTask+0x214>)
 80025b2:	2221      	movs	r2, #33	@ 0x21
 80025b4:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 80025b6:	200a      	movs	r0, #10
 80025b8:	f007 f8cc 	bl	8009754 <osDelay>
							break;
 80025bc:	e043      	b.n	8002646 <StartCommunicateTask+0x1e2>
						case 'R':
							moveCarRight(magnitude);
 80025be:	4b30      	ldr	r3, [pc, #192]	@ (8002680 <StartCommunicateTask+0x21c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffa6 	bl	8000514 <__aeabi_i2d>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	ec43 2b10 	vmov	d0, r2, r3
 80025d0:	f7ff f952 	bl	8001878 <moveCarRight>
							flagDone = 1;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <StartCommunicateTask+0x220>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 80025da:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <StartCommunicateTask+0x214>)
 80025dc:	2244      	movs	r2, #68	@ 0x44
 80025de:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <StartCommunicateTask+0x214>)
 80025e2:	224f      	movs	r2, #79	@ 0x4f
 80025e4:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <StartCommunicateTask+0x214>)
 80025e8:	224e      	movs	r2, #78	@ 0x4e
 80025ea:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 80025ec:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <StartCommunicateTask+0x214>)
 80025ee:	2245      	movs	r2, #69	@ 0x45
 80025f0:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <StartCommunicateTask+0x214>)
 80025f4:	2221      	movs	r2, #33	@ 0x21
 80025f6:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 80025f8:	200a      	movs	r0, #10
 80025fa:	f007 f8ab 	bl	8009754 <osDelay>
							break;
 80025fe:	e022      	b.n	8002646 <StartCommunicateTask+0x1e2>
						case 'L':
							moveCarLeft(magnitude);
 8002600:	4b1f      	ldr	r3, [pc, #124]	@ (8002680 <StartCommunicateTask+0x21c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ff85 	bl	8000514 <__aeabi_i2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	ec43 2b10 	vmov	d0, r2, r3
 8002612:	f7ff f965 	bl	80018e0 <moveCarLeft>
							flagDone = 1;
 8002616:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <StartCommunicateTask+0x220>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]
							aRxBuffer[0] = 'D';
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <StartCommunicateTask+0x214>)
 800261e:	2244      	movs	r2, #68	@ 0x44
 8002620:	701a      	strb	r2, [r3, #0]
							aRxBuffer[1] = 'O';
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <StartCommunicateTask+0x214>)
 8002624:	224f      	movs	r2, #79	@ 0x4f
 8002626:	705a      	strb	r2, [r3, #1]
							aRxBuffer[2] = 'N';
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <StartCommunicateTask+0x214>)
 800262a:	224e      	movs	r2, #78	@ 0x4e
 800262c:	709a      	strb	r2, [r3, #2]
							aRxBuffer[3] = 'E';
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <StartCommunicateTask+0x214>)
 8002630:	2245      	movs	r2, #69	@ 0x45
 8002632:	70da      	strb	r2, [r3, #3]
							aRxBuffer[4] = '!';
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <StartCommunicateTask+0x214>)
 8002636:	2221      	movs	r2, #33	@ 0x21
 8002638:	711a      	strb	r2, [r3, #4]
							osDelay(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f007 f88a 	bl	8009754 <osDelay>
							break;
 8002640:	e001      	b.n	8002646 <StartCommunicateTask+0x1e2>
						case 'G':
							NVIC_SystemReset();
 8002642:	f7fe fc2b 	bl	8000e9c <__NVIC_SystemReset>
							break;
						}
					}
		}

		if (flagDone == 1) {
 8002646:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <StartCommunicateTask+0x220>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d110      	bne.n	8002670 <StartCommunicateTask+0x20c>
			receivedInstruction = 0;
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <StartCommunicateTask+0x218>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
			osDelay(10);
 8002654:	200a      	movs	r0, #10
 8002656:	f007 f87d 	bl	8009754 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 800265a:	f107 010f 	add.w	r1, r7, #15
 800265e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002662:	2201      	movs	r2, #1
 8002664:	4808      	ldr	r0, [pc, #32]	@ (8002688 <StartCommunicateTask+0x224>)
 8002666:	f005 ff5f 	bl	8008528 <HAL_UART_Transmit>
			flagDone = 0;
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <StartCommunicateTask+0x220>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
		}
		osDelay(10); //initial value 10
 8002670:	200a      	movs	r0, #10
 8002672:	f007 f86f 	bl	8009754 <osDelay>
		if (receivedInstruction == 1) //need to uncomment to manually send
 8002676:	e70a      	b.n	800248e <StartCommunicateTask+0x2a>
 8002678:	200002a4 	.word	0x200002a4
 800267c:	200002f4 	.word	0x200002f4
 8002680:	200002b0 	.word	0x200002b0
 8002684:	200002ac 	.word	0x200002ac
 8002688:	20000240 	.word	0x20000240

0800268c <StartEncoderRTask>:
 * @brief Function implementing the encoderRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderRTask */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002694:	213c      	movs	r1, #60	@ 0x3c
 8002696:	481d      	ldr	r0, [pc, #116]	@ (800270c <StartEncoderRTask+0x80>)
 8002698:	f004 fdf7 	bl	800728a <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 800269c:	2301      	movs	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80026a0:	f000 fe78 	bl	8003394 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 80026a6:	f000 fe75 	bl	8003394 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b0a      	cmp	r3, #10
 80026b2:	d9f8      	bls.n	80026a6 <StartEncoderRTask+0x1a>
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <StartEncoderRTask+0x80>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	60bb      	str	r3, [r7, #8]
			if (cnt1 > 32000) {
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80026c2:	dd06      	ble.n	80026d2 <StartEncoderRTask+0x46>
				dirR = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e004      	b.n	80026dc <StartEncoderRTask+0x50>
			} else {
				dirR = -1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	613b      	str	r3, [r7, #16]
			}
			if (dirR == 1) {
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d106      	bne.n	80026f0 <StartEncoderRTask+0x64>
				rightEncoderVal -= diff;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <StartEncoderRTask+0x84>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <StartEncoderRTask+0x84>)
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e005      	b.n	80026fc <StartEncoderRTask+0x70>
			} else {
				rightEncoderVal += diff;
 80026f0:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <StartEncoderRTask+0x84>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <StartEncoderRTask+0x84>)
 80026fa:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <StartEncoderRTask+0x80>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 8002704:	f000 fe46 	bl	8003394 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 800270a:	e7cc      	b.n	80026a6 <StartEncoderRTask+0x1a>
 800270c:	20000168 	.word	0x20000168
 8002710:	200002c0 	.word	0x200002c0

08002714 <StartEncoderLTask>:
 * @brief Function implementing the encoderLTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderLTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800271c:	213c      	movs	r1, #60	@ 0x3c
 800271e:	481d      	ldr	r0, [pc, #116]	@ (8002794 <StartEncoderLTask+0x80>)
 8002720:	f004 fdb3 	bl	800728a <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002728:	f000 fe34 	bl	8003394 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 800272e:	f000 fe31 	bl	8003394 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b0a      	cmp	r3, #10
 800273a:	d9f8      	bls.n	800272e <StartEncoderLTask+0x1a>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800273c:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <StartEncoderLTask+0x80>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	60bb      	str	r3, [r7, #8]

			if (cnt2 > 32000) {
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800274a:	dd06      	ble.n	800275a <StartEncoderLTask+0x46>
				dirL = 1;
 800274c:	2301      	movs	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e004      	b.n	8002764 <StartEncoderLTask+0x50>
			} else {
				dirL = -1;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	613b      	str	r3, [r7, #16]
			}
			if (dirL == 1) {
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d106      	bne.n	8002778 <StartEncoderLTask+0x64>
				leftEncoderVal += diff;
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <StartEncoderLTask+0x84>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <StartEncoderLTask+0x84>)
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e005      	b.n	8002784 <StartEncoderLTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <StartEncoderLTask+0x84>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <StartEncoderLTask+0x84>)
 8002782:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <StartEncoderLTask+0x80>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 800278c:	f000 fe02 	bl	8003394 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - tick > 10L) {
 8002792:	e7cc      	b.n	800272e <StartEncoderLTask+0x1a>
 8002794:	20000120 	.word	0x20000120
 8002798:	200002c4 	.word	0x200002c4

0800279c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
}
 80027a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <Error_Handler+0x8>

080027a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b16      	ldr	r3, [pc, #88]	@ (800280c <HAL_MspInit+0x64>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a15      	ldr	r2, [pc, #84]	@ (800280c <HAL_MspInit+0x64>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b13      	ldr	r3, [pc, #76]	@ (800280c <HAL_MspInit+0x64>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_MspInit+0x64>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <HAL_MspInit+0x64>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <HAL_MspInit+0x64>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	210f      	movs	r1, #15
 80027ea:	f06f 0001 	mvn.w	r0, #1
 80027ee:	f000 fedc 	bl	80035aa <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2105      	movs	r1, #5
 80027f6:	2005      	movs	r0, #5
 80027f8:	f000 fed7 	bl	80035aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80027fc:	2005      	movs	r0, #5
 80027fe:	f000 fef0 	bl	80035e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a21      	ldr	r2, [pc, #132]	@ (80028b4 <HAL_I2C_MspInit+0xa4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d13c      	bne.n	80028ac <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	4b20      	ldr	r3, [pc, #128]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a1f      	ldr	r2, [pc, #124]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800284e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002854:	2312      	movs	r3, #18
 8002856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002860:	2304      	movs	r3, #4
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4814      	ldr	r0, [pc, #80]	@ (80028bc <HAL_I2C_MspInit+0xac>)
 800286c:	f000 ff74 	bl	8003758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 800287a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800287e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_I2C_MspInit+0xa8>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	201f      	movs	r0, #31
 8002892:	f000 fe8a 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002896:	201f      	movs	r0, #31
 8002898:	f000 fea3 	bl	80035e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2105      	movs	r1, #5
 80028a0:	2020      	movs	r0, #32
 80028a2:	f000 fe82 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028a6:	2020      	movs	r0, #32
 80028a8:	f000 fe9b 	bl	80035e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40005400 	.word	0x40005400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020400 	.word	0x40020400

080028c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <HAL_TIM_Base_MspInit+0xdc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11e      	bne.n	8002920 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b2e      	ldr	r3, [pc, #184]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2105      	movs	r1, #5
 8002902:	2018      	movs	r0, #24
 8002904:	f000 fe51 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002908:	2018      	movs	r0, #24
 800290a:	f000 fe6a 	bl	80035e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2105      	movs	r1, #5
 8002912:	2019      	movs	r0, #25
 8002914:	f000 fe49 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002918:	2019      	movs	r0, #25
 800291a:	f000 fe62 	bl	80035e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800291e:	e038      	b.n	8002992 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	@ (80029a4 <HAL_TIM_Base_MspInit+0xe4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d133      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6453      	str	r3, [r2, #68]	@ 0x44
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_TIM_Base_MspInit+0xe0>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002962:	23c0      	movs	r3, #192	@ 0xc0
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002972:	2303      	movs	r3, #3
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	480a      	ldr	r0, [pc, #40]	@ (80029a8 <HAL_TIM_Base_MspInit+0xe8>)
 800297e:	f000 feeb 	bl	8003758 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2105      	movs	r1, #5
 8002986:	202d      	movs	r0, #45	@ 0x2d
 8002988:	f000 fe0f 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800298c:	202d      	movs	r0, #45	@ 0x2d
 800298e:	f000 fe28 	bl	80035e2 <HAL_NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3728      	adds	r7, #40	@ 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40020800 	.word	0x40020800

080029ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	@ 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d14b      	bne.n	8002a66 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029de:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b38      	ldr	r3, [pc, #224]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a37      	ldr	r2, [pc, #220]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b35      	ldr	r3, [pc, #212]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8002a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4825      	ldr	r0, [pc, #148]	@ (8002ad4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a40:	f000 fe8a 	bl	8003758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8002a44:	2308      	movs	r3, #8
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a54:	2301      	movs	r3, #1
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8002a58:	f107 031c 	add.w	r3, r7, #28
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	481e      	ldr	r0, [pc, #120]	@ (8002ad8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002a60:	f000 fe7a 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a64:	e030      	b.n	8002ac8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002adc <HAL_TIM_Encoder_MspInit+0x130>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d12b      	bne.n	8002ac8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8002aa8:	23c0      	movs	r3, #192	@ 0xc0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4804      	ldr	r0, [pc, #16]	@ (8002ad4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002ac4:	f000 fe48 	bl	8003758 <HAL_GPIO_Init>
}
 8002ac8:	bf00      	nop
 8002aca:	3730      	adds	r7, #48	@ 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40000400 	.word	0x40000400

08002ae0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_TIM_IC_MspInit+0x94>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d134      	bne.n	8002b6c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b28:	f043 0308 	orr.w	r3, r3, #8
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_TIM_IC_MspInit+0x98>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	4809      	ldr	r0, [pc, #36]	@ (8002b7c <HAL_TIM_IC_MspInit+0x9c>)
 8002b58:	f000 fdfe 	bl	8003758 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2105      	movs	r1, #5
 8002b60:	201e      	movs	r0, #30
 8002b62:	f000 fd22 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b66:	201e      	movs	r0, #30
 8002b68:	f000 fd3b 	bl	80035e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	@ 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020c00 	.word	0x40020c00

08002b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <HAL_TIM_MspPostInit+0x68>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11e      	bne.n	8002be0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a10      	ldr	r2, [pc, #64]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bac:	f043 0310 	orr.w	r3, r3, #16
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <HAL_TIM_MspPostInit+0x6c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f000 fdbc 	bl	8003758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	@ 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <HAL_UART_MspInit+0x94>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d134      	bne.n	8002c80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c42:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <HAL_UART_MspInit+0x98>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c60:	2307      	movs	r3, #7
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <HAL_UART_MspInit+0x9c>)
 8002c6c:	f000 fd74 	bl	8003758 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2105      	movs	r1, #5
 8002c74:	2027      	movs	r0, #39	@ 0x27
 8002c76:	f000 fc98 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c7a:	2027      	movs	r0, #39	@ 0x27
 8002c7c:	f000 fcb1 	bl	80035e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002c80:	bf00      	nop
 8002c82:	3728      	adds	r7, #40	@ 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40004800 	.word	0x40004800
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020800 	.word	0x40020800

08002c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <NMI_Handler+0x4>

08002c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <MemManage_Handler+0x4>

08002cac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <BusFault_Handler+0x4>

08002cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <UsageFault_Handler+0x4>

08002cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cce:	f000 fb4d 	bl	800336c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002cd2:	f008 f995 	bl	800b000 <xTaskGetSchedulerState>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002cdc:	f008 ff8c 	bl	800bbf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf8:	4802      	ldr	r0, [pc, #8]	@ (8002d04 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002cfa:	f004 fb54 	bl	80073a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200000d8 	.word	0x200000d8

08002d08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d0c:	4802      	ldr	r0, [pc, #8]	@ (8002d18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d0e:	f004 fb4a 	bl	80073a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200000d8 	.word	0x200000d8

08002d1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d20:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <TIM4_IRQHandler+0x10>)
 8002d22:	f004 fb40 	bl	80073a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200001b0 	.word	0x200001b0

08002d30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d34:	4802      	ldr	r0, [pc, #8]	@ (8002d40 <I2C1_EV_IRQHandler+0x10>)
 8002d36:	f001 fb69 	bl	800440c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000084 	.word	0x20000084

08002d44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d48:	4802      	ldr	r0, [pc, #8]	@ (8002d54 <I2C1_ER_IRQHandler+0x10>)
 8002d4a:	f001 fcb2 	bl	80046b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000084 	.word	0x20000084

08002d58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <USART3_IRQHandler+0x10>)
 8002d5e:	f005 fc93 	bl	8008688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000240 	.word	0x20000240

08002d6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d70:	4802      	ldr	r0, [pc, #8]	@ (8002d7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d72:	f004 fb18 	bl	80073a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200001f8 	.word	0x200001f8

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	@ (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f009 fa20 	bl	800c1f4 <__errno>
 8002db4:	4603      	mov	r3, r0
 8002db6:	220c      	movs	r2, #12
 8002db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	@ (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20020000 	.word	0x20020000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	200002f8 	.word	0x200002f8
 8002de8:	20005230 	.word	0x20005230

08002dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <SystemInit+0x20>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <SystemInit+0x20>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e14:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e16:	490e      	ldr	r1, [pc, #56]	@ (8002e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e18:	4a0e      	ldr	r2, [pc, #56]	@ (8002e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e2c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e3a:	f7ff ffd7 	bl	8002dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3e:	f009 f9df 	bl	800c200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e42:	f7fe f841 	bl	8000ec8 <main>
  bx  lr    
 8002e46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e50:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002e54:	0800d750 	.word	0x0800d750
  ldr r2, =_sbss
 8002e58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002e5c:	20005230 	.word	0x20005230

08002e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e60:	e7fe      	b.n	8002e60 <ADC_IRQHandler>
	...

08002e64 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	71fb      	strb	r3, [r7, #7]
 8002e6e:	e026      	b.n	8002ebe <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	3b50      	subs	r3, #80	@ 0x50
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f82b 	bl	8002ed4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2000      	movs	r0, #0
 8002e82:	f000 f827 	bl	8002ed4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8002e86:	2100      	movs	r1, #0
 8002e88:	2010      	movs	r0, #16
 8002e8a:	f000 f823 	bl	8002ed4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8002e8e:	2300      	movs	r3, #0
 8002e90:	71bb      	strb	r3, [r7, #6]
 8002e92:	e00d      	b.n	8002eb0 <OLED_Refresh_Gram+0x4c>
 8002e94:	79ba      	ldrb	r2, [r7, #6]
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	490d      	ldr	r1, [pc, #52]	@ (8002ed0 <OLED_Refresh_Gram+0x6c>)
 8002e9a:	00d2      	lsls	r2, r2, #3
 8002e9c:	440a      	add	r2, r1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f815 	bl	8002ed4 <OLED_WR_Byte>
 8002eaa:	79bb      	ldrb	r3, [r7, #6]
 8002eac:	3301      	adds	r3, #1
 8002eae:	71bb      	strb	r3, [r7, #6]
 8002eb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	daed      	bge.n	8002e94 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	71fb      	strb	r3, [r7, #7]
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b07      	cmp	r3, #7
 8002ec2:	d9d5      	bls.n	8002e70 <OLED_Refresh_Gram+0xc>
	}   
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200002fc 	.word	0x200002fc

08002ed4 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002ee4:	79bb      	ldrb	r3, [r7, #6]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8002eea:	2201      	movs	r2, #1
 8002eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ef0:	481c      	ldr	r0, [pc, #112]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002ef2:	f000 fdcd 	bl	8003a90 <HAL_GPIO_WritePin>
 8002ef6:	e005      	b.n	8002f04 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002efe:	4819      	ldr	r0, [pc, #100]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f00:	f000 fdc6 	bl	8003a90 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e01e      	b.n	8002f48 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	4815      	ldr	r0, [pc, #84]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f10:	f000 fdbe 	bl	8003a90 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da05      	bge.n	8002f28 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2140      	movs	r1, #64	@ 0x40
 8002f20:	4810      	ldr	r0, [pc, #64]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f22:	f000 fdb5 	bl	8003a90 <HAL_GPIO_WritePin>
 8002f26:	e004      	b.n	8002f32 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	480d      	ldr	r0, [pc, #52]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f2e:	f000 fdaf 	bl	8003a90 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8002f32:	2201      	movs	r2, #1
 8002f34:	2120      	movs	r1, #32
 8002f36:	480b      	ldr	r0, [pc, #44]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f38:	f000 fdaa 	bl	8003a90 <HAL_GPIO_WritePin>
		dat<<=1;   
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	3301      	adds	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b07      	cmp	r3, #7
 8002f4c:	d9dd      	bls.n	8002f0a <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f54:	4803      	ldr	r0, [pc, #12]	@ (8002f64 <OLED_WR_Byte+0x90>)
 8002f56:	f000 fd9b 	bl	8003a90 <HAL_GPIO_WritePin>
} 
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	e014      	b.n	8002f9e <OLED_Clear+0x36>
 8002f74:	2300      	movs	r3, #0
 8002f76:	71bb      	strb	r3, [r7, #6]
 8002f78:	e00a      	b.n	8002f90 <OLED_Clear+0x28>
 8002f7a:	79ba      	ldrb	r2, [r7, #6]
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	490c      	ldr	r1, [pc, #48]	@ (8002fb0 <OLED_Clear+0x48>)
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	440a      	add	r2, r1
 8002f84:	4413      	add	r3, r2
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	71bb      	strb	r3, [r7, #6]
 8002f90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	daf0      	bge.n	8002f7a <OLED_Clear+0x12>
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	71fb      	strb	r3, [r7, #7]
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2b07      	cmp	r3, #7
 8002fa2:	d9e7      	bls.n	8002f74 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002fa4:	f7ff ff5e 	bl	8002e64 <OLED_Refresh_Gram>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200002fc 	.word	0x200002fc

08002fb4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	71bb      	strb	r3, [r7, #6]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db41      	blt.n	8003056 <OLED_DrawPoint+0xa2>
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fd6:	d83e      	bhi.n	8003056 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002fd8:	79bb      	ldrb	r3, [r7, #6]
 8002fda:	08db      	lsrs	r3, r3, #3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002fec:	7b7b      	ldrb	r3, [r7, #13]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8002ffa:	797b      	ldrb	r3, [r7, #5]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d012      	beq.n	8003026 <OLED_DrawPoint+0x72>
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	7bbb      	ldrb	r3, [r7, #14]
 8003004:	4917      	ldr	r1, [pc, #92]	@ (8003064 <OLED_DrawPoint+0xb0>)
 8003006:	00d2      	lsls	r2, r2, #3
 8003008:	440a      	add	r2, r1
 800300a:	4413      	add	r3, r2
 800300c:	7818      	ldrb	r0, [r3, #0]
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	7bf9      	ldrb	r1, [r7, #15]
 8003014:	4301      	orrs	r1, r0
 8003016:	b2c8      	uxtb	r0, r1
 8003018:	4912      	ldr	r1, [pc, #72]	@ (8003064 <OLED_DrawPoint+0xb0>)
 800301a:	00d2      	lsls	r2, r2, #3
 800301c:	440a      	add	r2, r1
 800301e:	4413      	add	r3, r2
 8003020:	4602      	mov	r2, r0
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e018      	b.n	8003058 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003026:	79fa      	ldrb	r2, [r7, #7]
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	490e      	ldr	r1, [pc, #56]	@ (8003064 <OLED_DrawPoint+0xb0>)
 800302c:	00d2      	lsls	r2, r2, #3
 800302e:	440a      	add	r2, r1
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b25a      	sxtb	r2, r3
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	43db      	mvns	r3, r3
 800303c:	b25b      	sxtb	r3, r3
 800303e:	4013      	ands	r3, r2
 8003040:	b259      	sxtb	r1, r3
 8003042:	79fa      	ldrb	r2, [r7, #7]
 8003044:	7bbb      	ldrb	r3, [r7, #14]
 8003046:	b2c8      	uxtb	r0, r1
 8003048:	4906      	ldr	r1, [pc, #24]	@ (8003064 <OLED_DrawPoint+0xb0>)
 800304a:	00d2      	lsls	r2, r2, #3
 800304c:	440a      	add	r2, r1
 800304e:	4413      	add	r3, r2
 8003050:	4602      	mov	r2, r0
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e000      	b.n	8003058 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003056:	bf00      	nop
}
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200002fc 	.word	0x200002fc

08003068 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4623      	mov	r3, r4
 8003078:	71fb      	strb	r3, [r7, #7]
 800307a:	4603      	mov	r3, r0
 800307c:	71bb      	strb	r3, [r7, #6]
 800307e:	460b      	mov	r3, r1
 8003080:	717b      	strb	r3, [r7, #5]
 8003082:	4613      	mov	r3, r2
 8003084:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003086:	79bb      	ldrb	r3, [r7, #6]
 8003088:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	3b20      	subs	r3, #32
 800308e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003090:	2300      	movs	r3, #0
 8003092:	73bb      	strb	r3, [r7, #14]
 8003094:	e04d      	b.n	8003132 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003096:	793b      	ldrb	r3, [r7, #4]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d10b      	bne.n	80030b4 <OLED_ShowChar+0x4c>
 800309c:	797a      	ldrb	r2, [r7, #5]
 800309e:	7bb9      	ldrb	r1, [r7, #14]
 80030a0:	4828      	ldr	r0, [pc, #160]	@ (8003144 <OLED_ShowChar+0xdc>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4403      	add	r3, r0
 80030ac:	440b      	add	r3, r1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	e007      	b.n	80030c4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80030b4:	797a      	ldrb	r2, [r7, #5]
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	4923      	ldr	r1, [pc, #140]	@ (8003148 <OLED_ShowChar+0xe0>)
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	440a      	add	r2, r1
 80030be:	4413      	add	r3, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	737b      	strb	r3, [r7, #13]
 80030c8:	e02d      	b.n	8003126 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da07      	bge.n	80030e2 <OLED_ShowChar+0x7a>
 80030d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030d6:	79b9      	ldrb	r1, [r7, #6]
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff6a 	bl	8002fb4 <OLED_DrawPoint>
 80030e0:	e00c      	b.n	80030fc <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80030e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	79b9      	ldrb	r1, [r7, #6]
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff5c 	bl	8002fb4 <OLED_DrawPoint>
			temp<<=1;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
			y++;
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	3301      	adds	r3, #1
 8003106:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003108:	79ba      	ldrb	r2, [r7, #6]
 800310a:	7b3b      	ldrb	r3, [r7, #12]
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	793b      	ldrb	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d105      	bne.n	8003120 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003114:	7b3b      	ldrb	r3, [r7, #12]
 8003116:	71bb      	strb	r3, [r7, #6]
				x++;
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	3301      	adds	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
				break;
 800311e:	e005      	b.n	800312c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003120:	7b7b      	ldrb	r3, [r7, #13]
 8003122:	3301      	adds	r3, #1
 8003124:	737b      	strb	r3, [r7, #13]
 8003126:	7b7b      	ldrb	r3, [r7, #13]
 8003128:	2b07      	cmp	r3, #7
 800312a:	d9ce      	bls.n	80030ca <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	3301      	adds	r3, #1
 8003130:	73bb      	strb	r3, [r7, #14]
 8003132:	7bba      	ldrb	r2, [r7, #14]
 8003134:	793b      	ldrb	r3, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d3ad      	bcc.n	8003096 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bd90      	pop	{r4, r7, pc}
 8003144:	0800cca8 	.word	0x0800cca8
 8003148:	0800d11c 	.word	0x0800d11c

0800314c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af02      	add	r7, sp, #8
 8003152:	4603      	mov	r3, r0
 8003154:	603a      	str	r2, [r7, #0]
 8003156:	71fb      	strb	r3, [r7, #7]
 8003158:	460b      	mov	r3, r1
 800315a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800315c:	e01f      	b.n	800319e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b7a      	cmp	r3, #122	@ 0x7a
 8003162:	d904      	bls.n	800316e <OLED_ShowString+0x22>
 8003164:	2300      	movs	r3, #0
 8003166:	71fb      	strb	r3, [r7, #7]
 8003168:	79bb      	ldrb	r3, [r7, #6]
 800316a:	3310      	adds	r3, #16
 800316c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800316e:	79bb      	ldrb	r3, [r7, #6]
 8003170:	2b3a      	cmp	r3, #58	@ 0x3a
 8003172:	d905      	bls.n	8003180 <OLED_ShowString+0x34>
 8003174:	2300      	movs	r3, #0
 8003176:	71fb      	strb	r3, [r7, #7]
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	71bb      	strb	r3, [r7, #6]
 800317c:	f7ff fef4 	bl	8002f68 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	79b9      	ldrb	r1, [r7, #6]
 8003186:	79f8      	ldrb	r0, [r7, #7]
 8003188:	2301      	movs	r3, #1
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	230c      	movs	r3, #12
 800318e:	f7ff ff6b 	bl	8003068 <OLED_ShowChar>
        x+=8;
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	3308      	adds	r3, #8
 8003196:	71fb      	strb	r3, [r7, #7]
        p++;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1db      	bne.n	800315e <OLED_ShowString+0x12>
    }  
}	 
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <OLED_Init>:

void OLED_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80031b4:	f003 f984 	bl	80064c0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80031b8:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <OLED_Init+0x110>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a40      	ldr	r2, [pc, #256]	@ (80032c0 <OLED_Init+0x110>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	4b3e      	ldr	r3, [pc, #248]	@ (80032c0 <OLED_Init+0x110>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a3d      	ldr	r2, [pc, #244]	@ (80032c0 <OLED_Init+0x110>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80031d0:	f003 f98a 	bl	80064e8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80031d4:	2200      	movs	r2, #0
 80031d6:	2180      	movs	r1, #128	@ 0x80
 80031d8:	483a      	ldr	r0, [pc, #232]	@ (80032c4 <OLED_Init+0x114>)
 80031da:	f000 fc59 	bl	8003a90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031de:	2064      	movs	r0, #100	@ 0x64
 80031e0:	f000 f8e4 	bl	80033ac <HAL_Delay>
	OLED_RST_Set();
 80031e4:	2201      	movs	r2, #1
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	4836      	ldr	r0, [pc, #216]	@ (80032c4 <OLED_Init+0x114>)
 80031ea:	f000 fc51 	bl	8003a90 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80031ee:	2100      	movs	r1, #0
 80031f0:	20ae      	movs	r0, #174	@ 0xae
 80031f2:	f7ff fe6f 	bl	8002ed4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80031f6:	2100      	movs	r1, #0
 80031f8:	20d5      	movs	r0, #213	@ 0xd5
 80031fa:	f7ff fe6b 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80031fe:	2100      	movs	r1, #0
 8003200:	2050      	movs	r0, #80	@ 0x50
 8003202:	f7ff fe67 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003206:	2100      	movs	r1, #0
 8003208:	20a8      	movs	r0, #168	@ 0xa8
 800320a:	f7ff fe63 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800320e:	2100      	movs	r1, #0
 8003210:	203f      	movs	r0, #63	@ 0x3f
 8003212:	f7ff fe5f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003216:	2100      	movs	r1, #0
 8003218:	20d3      	movs	r0, #211	@ 0xd3
 800321a:	f7ff fe5b 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800321e:	2100      	movs	r1, #0
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff fe57 	bl	8002ed4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003226:	2100      	movs	r1, #0
 8003228:	2040      	movs	r0, #64	@ 0x40
 800322a:	f7ff fe53 	bl	8002ed4 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800322e:	2100      	movs	r1, #0
 8003230:	208d      	movs	r0, #141	@ 0x8d
 8003232:	f7ff fe4f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003236:	2100      	movs	r1, #0
 8003238:	2014      	movs	r0, #20
 800323a:	f7ff fe4b 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800323e:	2100      	movs	r1, #0
 8003240:	2020      	movs	r0, #32
 8003242:	f7ff fe47 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003246:	2100      	movs	r1, #0
 8003248:	2002      	movs	r0, #2
 800324a:	f7ff fe43 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800324e:	2100      	movs	r1, #0
 8003250:	20a1      	movs	r0, #161	@ 0xa1
 8003252:	f7ff fe3f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003256:	2100      	movs	r1, #0
 8003258:	20c0      	movs	r0, #192	@ 0xc0
 800325a:	f7ff fe3b 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800325e:	2100      	movs	r1, #0
 8003260:	20da      	movs	r0, #218	@ 0xda
 8003262:	f7ff fe37 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003266:	2100      	movs	r1, #0
 8003268:	2012      	movs	r0, #18
 800326a:	f7ff fe33 	bl	8002ed4 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800326e:	2100      	movs	r1, #0
 8003270:	2081      	movs	r0, #129	@ 0x81
 8003272:	f7ff fe2f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003276:	2100      	movs	r1, #0
 8003278:	20ef      	movs	r0, #239	@ 0xef
 800327a:	f7ff fe2b 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800327e:	2100      	movs	r1, #0
 8003280:	20d9      	movs	r0, #217	@ 0xd9
 8003282:	f7ff fe27 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003286:	2100      	movs	r1, #0
 8003288:	20f1      	movs	r0, #241	@ 0xf1
 800328a:	f7ff fe23 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800328e:	2100      	movs	r1, #0
 8003290:	20db      	movs	r0, #219	@ 0xdb
 8003292:	f7ff fe1f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003296:	2100      	movs	r1, #0
 8003298:	2030      	movs	r0, #48	@ 0x30
 800329a:	f7ff fe1b 	bl	8002ed4 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800329e:	2100      	movs	r1, #0
 80032a0:	20a4      	movs	r0, #164	@ 0xa4
 80032a2:	f7ff fe17 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80032a6:	2100      	movs	r1, #0
 80032a8:	20a6      	movs	r0, #166	@ 0xa6
 80032aa:	f7ff fe13 	bl	8002ed4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80032ae:	2100      	movs	r1, #0
 80032b0:	20af      	movs	r0, #175	@ 0xaf
 80032b2:	f7ff fe0f 	bl	8002ed4 <OLED_WR_Byte>
	OLED_Clear(); 
 80032b6:	f7ff fe57 	bl	8002f68 <OLED_Clear>
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40021000 	.word	0x40021000

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_Init+0x40>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_Init+0x40>)
 80032de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_Init+0x40>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a07      	ldr	r2, [pc, #28]	@ (8003308 <HAL_Init+0x40>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f0:	2003      	movs	r0, #3
 80032f2:	f000 f94f 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f6:	200f      	movs	r0, #15
 80032f8:	f000 f808 	bl	800330c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032fc:	f7ff fa54 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00

0800330c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_InitTick+0x54>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <HAL_InitTick+0x58>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f967 	bl	80035fe <HAL_SYSTICK_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00e      	b.n	8003358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d80a      	bhi.n	8003356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003340:	2200      	movs	r2, #0
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f000 f92f 	bl	80035aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800334c:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <HAL_InitTick+0x5c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000004 	.word	0x20000004
 8003364:	2000000c 	.word	0x2000000c
 8003368:	20000008 	.word	0x20000008

0800336c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_IncTick+0x20>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_IncTick+0x24>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <HAL_IncTick+0x24>)
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000000c 	.word	0x2000000c
 8003390:	200006fc 	.word	0x200006fc

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	@ (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	200006fc 	.word	0x200006fc

080033ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff ffee 	bl	8003394 <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d005      	beq.n	80033d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_Delay+0x44>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033d2:	bf00      	nop
 80033d4:	f7ff ffde 	bl	8003394 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d8f7      	bhi.n	80033d4 <HAL_Delay+0x28>
  {
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <__NVIC_SetPriorityGrouping>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	@ (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	@ (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	@ (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035bc:	f7ff ff3e 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff ff8e 	bl	80034e8 <NVIC_EncodePriority>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff5d 	bl	8003494 <__NVIC_SetPriority>
}
 80035da:	bf00      	nop
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff31 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffa2 	bl	8003550 <SysTick_Config>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7ff feb6 	bl	8003394 <HAL_GetTick>
 8003628:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d008      	beq.n	8003648 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e052      	b.n	80036ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0216 	bic.w	r2, r2, #22
 8003656:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003666:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <HAL_DMA_Abort+0x62>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0208 	bic.w	r2, r2, #8
 8003686:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003698:	e013      	b.n	80036c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800369a:	f7ff fe7b 	bl	8003394 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d90c      	bls.n	80036c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e015      	b.n	80036ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e4      	bne.n	800369a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	223f      	movs	r2, #63	@ 0x3f
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2280      	movs	r2, #128	@ 0x80
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e00c      	b.n	800372e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2205      	movs	r2, #5
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003748:	b2db      	uxtb	r3, r3
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	@ 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e16b      	b.n	8003a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	f040 815a 	bne.w	8003a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d005      	beq.n	80037aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d130      	bne.n	800380c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0201 	and.w	r2, r3, #1
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b03      	cmp	r3, #3
 8003816:	d017      	beq.n	8003848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d123      	bne.n	800389c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	220f      	movs	r2, #15
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	08da      	lsrs	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3208      	adds	r2, #8
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80b4 	beq.w	8003a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	4b60      	ldr	r3, [pc, #384]	@ (8003a64 <HAL_GPIO_Init+0x30c>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a64 <HAL_GPIO_Init+0x30c>)
 80038e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003a64 <HAL_GPIO_Init+0x30c>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003a68 <HAL_GPIO_Init+0x310>)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	220f      	movs	r2, #15
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a52      	ldr	r2, [pc, #328]	@ (8003a6c <HAL_GPIO_Init+0x314>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02b      	beq.n	800397e <HAL_GPIO_Init+0x226>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a51      	ldr	r2, [pc, #324]	@ (8003a70 <HAL_GPIO_Init+0x318>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d025      	beq.n	800397a <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a50      	ldr	r2, [pc, #320]	@ (8003a74 <HAL_GPIO_Init+0x31c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01f      	beq.n	8003976 <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4f      	ldr	r2, [pc, #316]	@ (8003a78 <HAL_GPIO_Init+0x320>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d019      	beq.n	8003972 <HAL_GPIO_Init+0x21a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4e      	ldr	r2, [pc, #312]	@ (8003a7c <HAL_GPIO_Init+0x324>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x216>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4d      	ldr	r2, [pc, #308]	@ (8003a80 <HAL_GPIO_Init+0x328>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_GPIO_Init+0x212>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4c      	ldr	r2, [pc, #304]	@ (8003a84 <HAL_GPIO_Init+0x32c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x20e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a4b      	ldr	r2, [pc, #300]	@ (8003a88 <HAL_GPIO_Init+0x330>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_GPIO_Init+0x20a>
 800395e:	2307      	movs	r3, #7
 8003960:	e00e      	b.n	8003980 <HAL_GPIO_Init+0x228>
 8003962:	2308      	movs	r3, #8
 8003964:	e00c      	b.n	8003980 <HAL_GPIO_Init+0x228>
 8003966:	2306      	movs	r3, #6
 8003968:	e00a      	b.n	8003980 <HAL_GPIO_Init+0x228>
 800396a:	2305      	movs	r3, #5
 800396c:	e008      	b.n	8003980 <HAL_GPIO_Init+0x228>
 800396e:	2304      	movs	r3, #4
 8003970:	e006      	b.n	8003980 <HAL_GPIO_Init+0x228>
 8003972:	2303      	movs	r3, #3
 8003974:	e004      	b.n	8003980 <HAL_GPIO_Init+0x228>
 8003976:	2302      	movs	r3, #2
 8003978:	e002      	b.n	8003980 <HAL_GPIO_Init+0x228>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_GPIO_Init+0x228>
 800397e:	2300      	movs	r3, #0
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	f002 0203 	and.w	r2, r2, #3
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	4093      	lsls	r3, r2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003990:	4935      	ldr	r1, [pc, #212]	@ (8003a68 <HAL_GPIO_Init+0x310>)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	089b      	lsrs	r3, r3, #2
 8003996:	3302      	adds	r3, #2
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039c2:	4a32      	ldr	r2, [pc, #200]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039c8:	4b30      	ldr	r3, [pc, #192]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039ec:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a16:	4a1d      	ldr	r2, [pc, #116]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a40:	4a12      	ldr	r2, [pc, #72]	@ (8003a8c <HAL_GPIO_Init+0x334>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	f67f ae90 	bls.w	8003774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3724      	adds	r7, #36	@ 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40021400 	.word	0x40021400
 8003a84:	40021800 	.word	0x40021800
 8003a88:	40021c00 	.word	0x40021c00
 8003a8c:	40013c00 	.word	0x40013c00

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aac:	e003      	b.n	8003ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aae:	887b      	ldrh	r3, [r7, #2]
 8003ab0:	041a      	lsls	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b085      	sub	sp, #20
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43d9      	mvns	r1, r3
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e12b      	b.n	8003d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe fe76 	bl	8002810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f003 f908 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8003b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a81      	ldr	r2, [pc, #516]	@ (8003d6c <HAL_I2C_Init+0x274>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d807      	bhi.n	8003b7c <HAL_I2C_Init+0x84>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a80      	ldr	r2, [pc, #512]	@ (8003d70 <HAL_I2C_Init+0x278>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	bf94      	ite	ls
 8003b74:	2301      	movls	r3, #1
 8003b76:	2300      	movhi	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e006      	b.n	8003b8a <HAL_I2C_Init+0x92>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d74 <HAL_I2C_Init+0x27c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e0e7      	b.n	8003d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a78      	ldr	r2, [pc, #480]	@ (8003d78 <HAL_I2C_Init+0x280>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0c9b      	lsrs	r3, r3, #18
 8003b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d6c <HAL_I2C_Init+0x274>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d802      	bhi.n	8003bcc <HAL_I2C_Init+0xd4>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e009      	b.n	8003be0 <HAL_I2C_Init+0xe8>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	4a69      	ldr	r2, [pc, #420]	@ (8003d7c <HAL_I2C_Init+0x284>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	3301      	adds	r3, #1
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	495c      	ldr	r1, [pc, #368]	@ (8003d6c <HAL_I2C_Init+0x274>)
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	d819      	bhi.n	8003c34 <HAL_I2C_Init+0x13c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e59      	subs	r1, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c14:	400b      	ands	r3, r1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_I2C_Init+0x138>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1e59      	subs	r1, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	e051      	b.n	8003cd4 <HAL_I2C_Init+0x1dc>
 8003c30:	2304      	movs	r3, #4
 8003c32:	e04f      	b.n	8003cd4 <HAL_I2C_Init+0x1dc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d111      	bne.n	8003c60 <HAL_I2C_Init+0x168>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	440b      	add	r3, r1
 8003c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e012      	b.n	8003c86 <HAL_I2C_Init+0x18e>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1e58      	subs	r0, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	0099      	lsls	r1, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Init+0x196>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e022      	b.n	8003cd4 <HAL_I2C_Init+0x1dc>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <HAL_I2C_Init+0x1bc>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1e58      	subs	r0, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	440b      	add	r3, r1
 8003ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb2:	e00f      	b.n	8003cd4 <HAL_I2C_Init+0x1dc>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e58      	subs	r0, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	0099      	lsls	r1, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	6809      	ldr	r1, [r1, #0]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6911      	ldr	r1, [r2, #16]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	000186a0 	.word	0x000186a0
 8003d70:	001e847f 	.word	0x001e847f
 8003d74:	003d08ff 	.word	0x003d08ff
 8003d78:	431bde83 	.word	0x431bde83
 8003d7c:	10624dd3 	.word	0x10624dd3

08003d80 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d103      	bne.n	8003d9e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  }
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff fae8 	bl	8003394 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	f040 80e0 	bne.w	8003f94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2319      	movs	r3, #25
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4970      	ldr	r1, [pc, #448]	@ (8003fa0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f002 f8ea 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0d3      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x50>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e0cc      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d007      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	@ 0x21
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a50      	ldr	r2, [pc, #320]	@ (8003fa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6a3a      	ldr	r2, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f001 feac 	bl	8005bc8 <I2C_MasterRequestWrite>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08d      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e90:	e066      	b.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6a39      	ldr	r1, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f002 f9a8 	bl	80061ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d11b      	bne.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d017      	beq.n	8003f34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a39      	ldr	r1, [r7, #32]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f002 f99f 	bl	800627c <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d107      	bne.n	8003f5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e01a      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d194      	bne.n	8003e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	817b      	strh	r3, [r7, #10]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff f9ea 	bl	8003394 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f040 8217 	bne.w	80043fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2319      	movs	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	497c      	ldr	r1, [pc, #496]	@ (80041cc <HAL_I2C_Master_Receive+0x224>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 ffec 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e20a      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2C_Master_Receive+0x50>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e203      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d007      	beq.n	800401e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	@ 0x22
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2210      	movs	r2, #16
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a5c      	ldr	r2, [pc, #368]	@ (80041d0 <HAL_I2C_Master_Receive+0x228>)
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004060:	8979      	ldrh	r1, [r7, #10]
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f001 fe30 	bl	8005ccc <I2C_MasterRequestRead>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1c4      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e198      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11b      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e178      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d11b      	bne.n	8004126 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	e158      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800414c:	e144      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	2b03      	cmp	r3, #3
 8004154:	f200 80f1 	bhi.w	800433a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	2b01      	cmp	r3, #1
 800415e:	d123      	bne.n	80041a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f002 f903 	bl	8006370 <I2C_WaitOnRXNEFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e145      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a6:	e117      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d14e      	bne.n	800424e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	4906      	ldr	r1, [pc, #24]	@ (80041d4 <HAL_I2C_Master_Receive+0x22c>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f001 fefc 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e11a      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
 80041ca:	bf00      	nop
 80041cc:	00100002 	.word	0x00100002
 80041d0:	ffff0000 	.word	0xffff0000
 80041d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800424c:	e0c4      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	496c      	ldr	r1, [pc, #432]	@ (8004408 <HAL_I2C_Master_Receive+0x460>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f001 fead 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0cb      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	4955      	ldr	r1, [pc, #340]	@ (8004408 <HAL_I2C_Master_Receive+0x460>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f001 fe7f 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e09d      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004338:	e04e      	b.n	80043d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f002 f816 	bl	8006370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e058      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d124      	bne.n	80043d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f aeb6 	bne.w	800414e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3728      	adds	r7, #40	@ 0x28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	00010004 	.word	0x00010004

0800440c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800442c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004434:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b10      	cmp	r3, #16
 800443a:	d003      	beq.n	8004444 <HAL_I2C_EV_IRQHandler+0x38>
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b40      	cmp	r3, #64	@ 0x40
 8004440:	f040 80b1 	bne.w	80045a6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <HAL_I2C_EV_IRQHandler+0x6e>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004464:	d003      	beq.n	800446e <HAL_I2C_EV_IRQHandler+0x62>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800446c:	d101      	bne.n	8004472 <HAL_I2C_EV_IRQHandler+0x66>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_I2C_EV_IRQHandler+0x68>
 8004472:	2300      	movs	r3, #0
 8004474:	2b01      	cmp	r3, #1
 8004476:	f000 8114 	beq.w	80046a2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <HAL_I2C_EV_IRQHandler+0x90>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f001 fffa 	bl	8006488 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fd7a 	bl	8004f8e <I2C_Master_SB>
 800449a:	e083      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0xac>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fdf2 	bl	800509a <I2C_Master_ADD10>
 80044b6:	e075      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0xc8>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fe0e 	bl	80050ee <I2C_Master_ADDR>
 80044d2:	e067      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d036      	beq.n	800454c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ec:	f000 80db 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0x10a>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_I2C_EV_IRQHandler+0x10a>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9d6 	bl	80048c0 <I2C_MasterTransmit_TXE>
 8004514:	e046      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80c2 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80bc 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	2b21      	cmp	r3, #33	@ 0x21
 8004532:	d103      	bne.n	800453c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa5f 	bl	80049f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453a:	e0b4      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b40      	cmp	r3, #64	@ 0x40
 8004540:	f040 80b1 	bne.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 facd 	bl	8004ae4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800454a:	e0ac      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455a:	f000 80a4 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <HAL_I2C_EV_IRQHandler+0x178>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_I2C_EV_IRQHandler+0x178>
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fb49 	bl	8004c14 <I2C_MasterReceive_RXNE>
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 808b 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8085 	beq.w	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fc01 	bl	8004da4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a2:	e080      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
 80045a4:	e07f      	b.n	80046a6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e007      	b.n	80045c8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d011      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x1ea>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 ffcc 	bl	800558c <I2C_Slave_ADDR>
 80045f4:	e05a      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0x206>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 f806 	bl	800561c <I2C_Slave_STOPF>
 8004610:	e04c      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004612:	7bbb      	ldrb	r3, [r7, #14]
 8004614:	2b21      	cmp	r3, #33	@ 0x21
 8004616:	d002      	beq.n	800461e <HAL_I2C_EV_IRQHandler+0x212>
 8004618:	7bbb      	ldrb	r3, [r7, #14]
 800461a:	2b29      	cmp	r3, #41	@ 0x29
 800461c:	d120      	bne.n	8004660 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <HAL_I2C_EV_IRQHandler+0x238>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <HAL_I2C_EV_IRQHandler+0x238>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fee7 	bl	8005410 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004642:	e032      	b.n	80046aa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d02d      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x29e>
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004654:	2b00      	cmp	r3, #0
 8004656:	d028      	beq.n	80046aa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 ff16 	bl	800548a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800465e:	e024      	b.n	80046aa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x27a>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x27a>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 ff24 	bl	80054cc <I2C_SlaveReceive_RXNE>
 8004684:	e012      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 ff54 	bl	8005548 <I2C_SlaveReceive_BTF>
 80046a0:	e004      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b08a      	sub	sp, #40	@ 0x28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <HAL_I2C_ER_IRQHandler+0x4a>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x70>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004720:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03e      	beq.n	80047aa <HAL_I2C_ER_IRQHandler+0xf8>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d039      	beq.n	80047aa <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004736:	7efb      	ldrb	r3, [r7, #27]
 8004738:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004750:	7ebb      	ldrb	r3, [r7, #26]
 8004752:	2b20      	cmp	r3, #32
 8004754:	d112      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xca>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10f      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xca>
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b21      	cmp	r3, #33	@ 0x21
 8004760:	d008      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b29      	cmp	r3, #41	@ 0x29
 8004766:	d005      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0xc2>
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b28      	cmp	r3, #40	@ 0x28
 800476c:	d106      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b21      	cmp	r3, #33	@ 0x21
 8004772:	d103      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 f881 	bl	800587c <I2C_Slave_AF>
 800477a:	e016      	b.n	80047aa <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004784:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800478e:	7efb      	ldrb	r3, [r7, #27]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <HAL_I2C_ER_IRQHandler+0xe8>
 8004794:	7efb      	ldrb	r3, [r7, #27]
 8004796:	2b40      	cmp	r3, #64	@ 0x40
 8004798:	d107      	bne.n	80047aa <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_I2C_ER_IRQHandler+0x11e>
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	f043 0308 	orr.w	r3, r3, #8
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80047ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 f8be 	bl	8005964 <I2C_ITError>
  }
}
 80047e8:	bf00      	nop
 80047ea:	3728      	adds	r7, #40	@ 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
 800484c:	4613      	mov	r3, r2
 800484e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d150      	bne.n	8004988 <I2C_MasterTransmit_TXE+0xc8>
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b21      	cmp	r3, #33	@ 0x21
 80048ea:	d14d      	bne.n	8004988 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d01d      	beq.n	800492e <I2C_MasterTransmit_TXE+0x6e>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d01a      	beq.n	800492e <I2C_MasterTransmit_TXE+0x6e>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048fe:	d016      	beq.n	800492e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800490e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2211      	movs	r2, #17
 8004914:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff62 	bl	80047f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800492c:	e060      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b40      	cmp	r3, #64	@ 0x40
 8004966:	d107      	bne.n	8004978 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff7d 	bl	8004870 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004976:	e03b      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff35 	bl	80047f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004986:	e033      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b21      	cmp	r3, #33	@ 0x21
 800498c:	d005      	beq.n	800499a <I2C_MasterTransmit_TXE+0xda>
 800498e:	7bbb      	ldrb	r3, [r7, #14]
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d12d      	bne.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b22      	cmp	r3, #34	@ 0x22
 8004998:	d12a      	bne.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049b4:	e01c      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b40      	cmp	r3, #64	@ 0x40
 80049c0:	d103      	bne.n	80049ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f88e 	bl	8004ae4 <I2C_MemoryTransmit_TXE_BTF>
}
 80049c8:	e012      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049ee:	e7ff      	b.n	80049f0 <I2C_MasterTransmit_TXE+0x130>
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b21      	cmp	r3, #33	@ 0x21
 8004a10:	d164      	bne.n	8004adc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a40:	e04c      	b.n	8004adc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d01d      	beq.n	8004a84 <I2C_MasterTransmit_BTF+0x8c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d01a      	beq.n	8004a84 <I2C_MasterTransmit_BTF+0x8c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a54:	d016      	beq.n	8004a84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2211      	movs	r2, #17
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff feb7 	bl	80047f0 <HAL_I2C_MasterTxCpltCallback>
}
 8004a82:	e02b      	b.n	8004adc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b40      	cmp	r3, #64	@ 0x40
 8004abc:	d107      	bne.n	8004ace <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fed2 	bl	8004870 <HAL_I2C_MemTxCpltCallback>
}
 8004acc:	e006      	b.n	8004adc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe8a 	bl	80047f0 <HAL_I2C_MasterTxCpltCallback>
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11d      	bne.n	8004b38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10b      	bne.n	8004b1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b1a:	e077      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	121b      	asrs	r3, r3, #8
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b36:	e069      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10b      	bne.n	8004b58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b56:	e059      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d152      	bne.n	8004c06 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b22      	cmp	r3, #34	@ 0x22
 8004b64:	d10d      	bne.n	8004b82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b80:	e044      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d015      	beq.n	8004bb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b21      	cmp	r3, #33	@ 0x21
 8004b90:	d112      	bne.n	8004bb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004bb6:	e029      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d124      	bne.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b21      	cmp	r3, #33	@ 0x21
 8004bc6:	d121      	bne.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bd6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fe36 	bl	8004870 <HAL_I2C_MemTxCpltCallback>
}
 8004c04:	e002      	b.n	8004c0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff f8ba 	bl	8003d80 <I2C_Flush_DR>
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b22      	cmp	r3, #34	@ 0x22
 8004c26:	f040 80b9 	bne.w	8004d9c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d921      	bls.n	8004c82 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	f040 8096 	bne.w	8004d9c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004c80:	e08c      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d07f      	beq.n	8004d8a <I2C_MasterReceive_RXNE+0x176>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d002      	beq.n	8004c96 <I2C_MasterReceive_RXNE+0x82>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d179      	bne.n	8004d8a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f001 fb38 	bl	800630c <I2C_WaitOnSTOPRequestThroughIT>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d14c      	bne.n	8004d3c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cc0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b40      	cmp	r3, #64	@ 0x40
 8004cfa:	d10a      	bne.n	8004d12 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff fdba 	bl	8004884 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d10:	e044      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d002      	beq.n	8004d26 <I2C_MasterReceive_RXNE+0x112>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d103      	bne.n	8004d2e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d2c:	e002      	b.n	8004d34 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2212      	movs	r2, #18
 8004d32:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fd65 	bl	8004804 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d3a:	e02f      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fd88 	bl	8004898 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d88:	e008      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d98:	605a      	str	r2, [r3, #4]
}
 8004d9a:	e7ff      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x188>
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d11b      	bne.n	8004df4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004df2:	e0c8      	b.n	8004f86 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d129      	bne.n	8004e52 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d00a      	beq.n	8004e2a <I2C_MasterReceive_BTF+0x86>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d007      	beq.n	8004e2a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e50:	e099      	b.n	8004f86 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	f040 8081 	bne.w	8004f60 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d002      	beq.n	8004e6a <I2C_MasterReceive_BTF+0xc6>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d108      	bne.n	8004e7c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e019      	b.n	8004eb0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d002      	beq.n	8004e88 <I2C_MasterReceive_BTF+0xe4>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d108      	bne.n	8004e9a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e00a      	b.n	8004eb0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d007      	beq.n	8004eb0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d10a      	bne.n	8004f36 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fca8 	bl	8004884 <HAL_I2C_MemRxCpltCallback>
}
 8004f34:	e027      	b.n	8004f86 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d002      	beq.n	8004f4a <I2C_MasterReceive_BTF+0x1a6>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d103      	bne.n	8004f52 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f50:	e002      	b.n	8004f58 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2212      	movs	r2, #18
 8004f56:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fc53 	bl	8004804 <HAL_I2C_MasterRxCpltCallback>
}
 8004f5e:	e012      	b.n	8004f86 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b40      	cmp	r3, #64	@ 0x40
 8004fa0:	d117      	bne.n	8004fd2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fbc:	e067      	b.n	800508e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	611a      	str	r2, [r3, #16]
}
 8004fd0:	e05d      	b.n	800508e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fda:	d133      	bne.n	8005044 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b21      	cmp	r3, #33	@ 0x21
 8004fe6:	d109      	bne.n	8004ffc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ff8:	611a      	str	r2, [r3, #16]
 8004ffa:	e008      	b.n	800500e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <I2C_Master_SB+0x92>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d108      	bne.n	8005032 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d032      	beq.n	800508e <I2C_Master_SB+0x100>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d02d      	beq.n	800508e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005040:	605a      	str	r2, [r3, #4]
}
 8005042:	e024      	b.n	800508e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10e      	bne.n	800506a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005050:	b29b      	uxth	r3, r3
 8005052:	11db      	asrs	r3, r3, #7
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f063 030f 	orn	r3, r3, #15
 8005060:	b2da      	uxtb	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
}
 8005068:	e011      	b.n	800508e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	b29b      	uxth	r3, r3
 8005078:	11db      	asrs	r3, r3, #7
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0306 	and.w	r3, r3, #6
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f063 030e 	orn	r3, r3, #14
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <I2C_Master_ADD10+0x26>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <I2C_Master_ADD10+0x48>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050e0:	605a      	str	r2, [r3, #4]
  }
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b091      	sub	sp, #68	@ 0x44
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b22      	cmp	r3, #34	@ 0x22
 8005116:	f040 8169 	bne.w	80053ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <I2C_Master_ADDR+0x54>
 8005122:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d10b      	bne.n	8005142 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512a:	2300      	movs	r3, #0
 800512c:	633b      	str	r3, [r7, #48]	@ 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	633b      	str	r3, [r7, #48]	@ 0x30
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	633b      	str	r3, [r7, #48]	@ 0x30
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	e160      	b.n	8005404 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11d      	bne.n	8005186 <I2C_Master_ADDR+0x98>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005152:	d118      	bne.n	8005186 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005154:	2300      	movs	r3, #0
 8005156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005178:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	651a      	str	r2, [r3, #80]	@ 0x50
 8005184:	e13e      	b.n	8005404 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d113      	bne.n	80051b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005190:	2300      	movs	r3, #0
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e115      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f040 808a 	bne.w	80052d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051ca:	d137      	bne.n	800523c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ea:	d113      	bne.n	8005214 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	e0e7      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	623b      	str	r3, [r7, #32]
 8005228:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e0d3      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	2b08      	cmp	r3, #8
 8005240:	d02e      	beq.n	80052a0 <I2C_Master_ADDR+0x1b2>
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005244:	2b20      	cmp	r3, #32
 8005246:	d02b      	beq.n	80052a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	2b12      	cmp	r3, #18
 800524c:	d102      	bne.n	8005254 <I2C_Master_ADDR+0x166>
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	2b01      	cmp	r3, #1
 8005252:	d125      	bne.n	80052a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	2b04      	cmp	r3, #4
 8005258:	d00e      	beq.n	8005278 <I2C_Master_ADDR+0x18a>
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	2b02      	cmp	r3, #2
 800525e:	d00b      	beq.n	8005278 <I2C_Master_ADDR+0x18a>
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	2b10      	cmp	r3, #16
 8005264:	d008      	beq.n	8005278 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e007      	b.n	8005288 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005286:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	e0a1      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e085      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d14d      	bne.n	800537e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d016      	beq.n	8005316 <I2C_Master_ADDR+0x228>
 80052e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d013      	beq.n	8005316 <I2C_Master_ADDR+0x228>
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d010      	beq.n	8005316 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005302:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e007      	b.n	8005326 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005324:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005334:	d117      	bne.n	8005366 <I2C_Master_ADDR+0x278>
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800533c:	d00b      	beq.n	8005356 <I2C_Master_ADDR+0x268>
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2b01      	cmp	r3, #1
 8005342:	d008      	beq.n	8005356 <I2C_Master_ADDR+0x268>
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2b08      	cmp	r3, #8
 8005348:	d005      	beq.n	8005356 <I2C_Master_ADDR+0x268>
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	2b10      	cmp	r3, #16
 800534e:	d002      	beq.n	8005356 <I2C_Master_ADDR+0x268>
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	2b20      	cmp	r3, #32
 8005354:	d107      	bne.n	8005366 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005364:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	e032      	b.n	80053e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800538c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539c:	d117      	bne.n	80053ce <I2C_Master_ADDR+0x2e0>
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053a4:	d00b      	beq.n	80053be <I2C_Master_ADDR+0x2d0>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d008      	beq.n	80053be <I2C_Master_ADDR+0x2d0>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d005      	beq.n	80053be <I2C_Master_ADDR+0x2d0>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d002      	beq.n	80053be <I2C_Master_ADDR+0x2d0>
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d107      	bne.n	80053ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053ea:	e00b      	b.n	8005404 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
}
 8005402:	e7ff      	b.n	8005404 <I2C_Master_ADDR+0x316>
 8005404:	bf00      	nop
 8005406:	3744      	adds	r7, #68	@ 0x44
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02b      	beq.n	8005482 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d114      	bne.n	8005482 <I2C_SlaveTransmit_TXE+0x72>
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b29      	cmp	r3, #41	@ 0x29
 800545c:	d111      	bne.n	8005482 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2221      	movs	r2, #33	@ 0x21
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2228      	movs	r2, #40	@ 0x28
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff f9cb 	bl	8004818 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02c      	beq.n	8005540 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <I2C_SlaveReceive_RXNE+0x74>
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b2a      	cmp	r3, #42	@ 0x2a
 800551a:	d111      	bne.n	8005540 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2222      	movs	r2, #34	@ 0x22
 8005530:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2228      	movs	r2, #40	@ 0x28
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff f976 	bl	800482c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d012      	beq.n	8005580 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055a6:	2b28      	cmp	r3, #40	@ 0x28
 80055a8:	d125      	bne.n	80055f6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	81bb      	strh	r3, [r7, #12]
 80055d8:	e002      	b.n	80055e0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055e8:	89ba      	ldrh	r2, [r7, #12]
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f926 	bl	8004840 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055f4:	e00e      	b.n	8005614 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800562a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800563a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800563c:	2300      	movs	r3, #0
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005668:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005678:	d172      	bne.n	8005760 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b22      	cmp	r3, #34	@ 0x22
 800567e:	d002      	beq.n	8005686 <I2C_Slave_STOPF+0x6a>
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b2a      	cmp	r3, #42	@ 0x2a
 8005684:	d135      	bne.n	80056f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b29a      	uxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe f83b 	bl	800373a <HAL_DMA_GetState>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d049      	beq.n	800575e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	4a69      	ldr	r2, [pc, #420]	@ (8005874 <I2C_Slave_STOPF+0x258>)
 80056d0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe f80d 	bl	80036f6 <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d03d      	beq.n	800575e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056f0:	e035      	b.n	800575e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005724:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f805 	bl	800373a <HAL_DMA_GetState>
 8005730:	4603      	mov	r3, r0
 8005732:	2b01      	cmp	r3, #1
 8005734:	d014      	beq.n	8005760 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573a:	4a4e      	ldr	r2, [pc, #312]	@ (8005874 <I2C_Slave_STOPF+0x258>)
 800573c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd ffd7 	bl	80036f6 <HAL_DMA_Abort_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
 800575c:	e000      	b.n	8005760 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800575e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d03e      	beq.n	80057e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d112      	bne.n	800579e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d112      	bne.n	80057d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	f043 0204 	orr.w	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8b7 	bl	8005964 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057f6:	e039      	b.n	800586c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057fc:	d109      	bne.n	8005812 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2228      	movs	r2, #40	@ 0x28
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff f80d 	bl	800482c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b28      	cmp	r3, #40	@ 0x28
 800581c:	d111      	bne.n	8005842 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <I2C_Slave_STOPF+0x25c>)
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff f80e 	bl	800485c <HAL_I2C_ListenCpltCallback>
}
 8005840:	e014      	b.n	800586c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	2b22      	cmp	r3, #34	@ 0x22
 8005848:	d002      	beq.n	8005850 <I2C_Slave_STOPF+0x234>
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b22      	cmp	r3, #34	@ 0x22
 800584e:	d10d      	bne.n	800586c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fe ffe0 	bl	800482c <HAL_I2C_SlaveRxCpltCallback>
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	08005e69 	.word	0x08005e69
 8005878:	ffff0000 	.word	0xffff0000

0800587c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d002      	beq.n	800589e <I2C_Slave_AF+0x22>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b20      	cmp	r3, #32
 800589c:	d129      	bne.n	80058f2 <I2C_Slave_AF+0x76>
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b28      	cmp	r3, #40	@ 0x28
 80058a2:	d126      	bne.n	80058f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005960 <I2C_Slave_AF+0xe4>)
 80058a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe ffb6 	bl	800485c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058f0:	e031      	b.n	8005956 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b21      	cmp	r3, #33	@ 0x21
 80058f6:	d129      	bne.n	800594c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <I2C_Slave_AF+0xe4>)
 80058fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2221      	movs	r2, #33	@ 0x21
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005922:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800592c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fe fa1e 	bl	8003d80 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe ff67 	bl	8004818 <HAL_I2C_SlaveTxCpltCallback>
}
 800594a:	e004      	b.n	8005956 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005954:	615a      	str	r2, [r3, #20]
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	ffff0000 	.word	0xffff0000

08005964 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005972:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800597a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b10      	cmp	r3, #16
 8005980:	d002      	beq.n	8005988 <I2C_ITError+0x24>
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d10a      	bne.n	800599e <I2C_ITError+0x3a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b22      	cmp	r3, #34	@ 0x22
 800598c:	d107      	bne.n	800599e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800599c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059a4:	2b28      	cmp	r3, #40	@ 0x28
 80059a6:	d107      	bne.n	80059b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2228      	movs	r2, #40	@ 0x28
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059b6:	e015      	b.n	80059e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c6:	d00a      	beq.n	80059de <I2C_ITError+0x7a>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b60      	cmp	r3, #96	@ 0x60
 80059cc:	d007      	beq.n	80059de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f2:	d162      	bne.n	8005aba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d020      	beq.n	8005a54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <I2C_ITError+0x25c>)
 8005a18:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fe69 	bl	80036f6 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8089 	beq.w	8005b3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4798      	blx	r3
 8005a52:	e074      	b.n	8005b3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	4a59      	ldr	r2, [pc, #356]	@ (8005bc0 <I2C_ITError+0x25c>)
 8005a5a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fd fe48 	bl	80036f6 <HAL_DMA_Abort_IT>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d068      	beq.n	8005b3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d10b      	bne.n	8005a92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	e041      	b.n	8005b3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b60      	cmp	r3, #96	@ 0x60
 8005ac4:	d125      	bne.n	8005b12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d10b      	bne.n	8005afa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe fece 	bl	80048ac <HAL_I2C_AbortCpltCallback>
 8005b10:	e015      	b.n	8005b3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1c:	2b40      	cmp	r3, #64	@ 0x40
 8005b1e:	d10b      	bne.n	8005b38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe fead 	bl	8004898 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10e      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d113      	bne.n	8005bb8 <I2C_ITError+0x254>
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b28      	cmp	r3, #40	@ 0x28
 8005b94:	d110      	bne.n	8005bb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a0a      	ldr	r2, [pc, #40]	@ (8005bc4 <I2C_ITError+0x260>)
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fe52 	bl	800485c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08005e69 	.word	0x08005e69
 8005bc4:	ffff0000 	.word	0xffff0000

08005bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d006      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d003      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bf0:	d108      	bne.n	8005c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e00b      	b.n	8005c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	2b12      	cmp	r3, #18
 8005c0a:	d107      	bne.n	8005c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f9c5 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00d      	beq.n	8005c50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c42:	d103      	bne.n	8005c4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e035      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c58:	d108      	bne.n	8005c6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c68:	611a      	str	r2, [r3, #16]
 8005c6a:	e01b      	b.n	8005ca4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c6c:	897b      	ldrh	r3, [r7, #10]
 8005c6e:	11db      	asrs	r3, r3, #7
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 0306 	and.w	r3, r3, #6
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f063 030f 	orn	r3, r3, #15
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	490e      	ldr	r1, [pc, #56]	@ (8005cc4 <I2C_MasterRequestWrite+0xfc>)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fa0e 	bl	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e010      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4907      	ldr	r1, [pc, #28]	@ (8005cc8 <I2C_MasterRequestWrite+0x100>)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f9fe 	bl	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	00010008 	.word	0x00010008
 8005cc8:	00010002 	.word	0x00010002

08005ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d006      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d003      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d04:	d108      	bne.n	8005d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e00b      	b.n	8005d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d1c:	2b11      	cmp	r3, #17
 8005d1e:	d107      	bne.n	8005d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f93b 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d56:	d103      	bne.n	8005d60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e079      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d6c:	d108      	bne.n	8005d80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d6e:	897b      	ldrh	r3, [r7, #10]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	e05f      	b.n	8005e40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	11db      	asrs	r3, r3, #7
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f063 030f 	orn	r3, r3, #15
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4930      	ldr	r1, [pc, #192]	@ (8005e60 <I2C_MasterRequestRead+0x194>)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f984 	bl	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e054      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4929      	ldr	r1, [pc, #164]	@ (8005e64 <I2C_MasterRequestRead+0x198>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f974 	bl	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e044      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005df2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f8d9 	bl	8005fb8 <I2C_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00d      	beq.n	8005e28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e1a:	d103      	bne.n	8005e24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e22:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e017      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	11db      	asrs	r3, r3, #7
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0306 	and.w	r3, r3, #6
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f063 030e 	orn	r3, r3, #14
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4907      	ldr	r1, [pc, #28]	@ (8005e64 <I2C_MasterRequestRead+0x198>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f930 	bl	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	00010008 	.word	0x00010008
 8005e64:	00010002 	.word	0x00010002

08005e68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e82:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <I2C_DMAAbort+0x148>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	08db      	lsrs	r3, r3, #3
 8005e88:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb4 <I2C_DMAAbort+0x14c>)
 8005e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8e:	0a1a      	lsrs	r2, r3, #8
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00da      	lsls	r2, r3, #3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005eae:	e00a      	b.n	8005ec6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec4:	d0ea      	beq.n	8005e9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f08:	2200      	movs	r2, #0
 8005f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b60      	cmp	r3, #96	@ 0x60
 8005f36:	d10e      	bne.n	8005f56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f4e:	6978      	ldr	r0, [r7, #20]
 8005f50:	f7fe fcac 	bl	80048ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f54:	e027      	b.n	8005fa6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f5c:	2b28      	cmp	r3, #40	@ 0x28
 8005f5e:	d117      	bne.n	8005f90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2228      	movs	r2, #40	@ 0x28
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f8e:	e007      	b.n	8005fa0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fa0:	6978      	ldr	r0, [r7, #20]
 8005fa2:	f7fe fc79 	bl	8004898 <HAL_I2C_ErrorCallback>
}
 8005fa6:	bf00      	nop
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000004 	.word	0x20000004
 8005fb4:	14f8b589 	.word	0x14f8b589

08005fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc8:	e048      	b.n	800605c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d044      	beq.n	800605c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd2:	f7fd f9df 	bl	8003394 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d139      	bne.n	800605c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10d      	bne.n	800600e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	43da      	mvns	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	e00c      	b.n	8006028 <I2C_WaitOnFlagUntilTimeout+0x70>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	43da      	mvns	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	429a      	cmp	r2, r3
 800602c:	d116      	bne.n	800605c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e023      	b.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10d      	bne.n	8006082 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	43da      	mvns	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4013      	ands	r3, r2
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	bf0c      	ite	eq
 8006078:	2301      	moveq	r3, #1
 800607a:	2300      	movne	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	e00c      	b.n	800609c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d093      	beq.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ba:	e071      	b.n	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ca:	d123      	bne.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	f043 0204 	orr.w	r2, r3, #4
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e067      	b.n	80061e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d041      	beq.n	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611c:	f7fd f93a 	bl	8003394 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d136      	bne.n	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d10c      	bne.n	8006156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	43da      	mvns	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4013      	ands	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf14      	ite	ne
 800614e:	2301      	movne	r3, #1
 8006150:	2300      	moveq	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	e00b      	b.n	800616e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	43da      	mvns	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4013      	ands	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf14      	ite	ne
 8006168:	2301      	movne	r3, #1
 800616a:	2300      	moveq	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	f043 0220 	orr.w	r2, r3, #32
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e021      	b.n	80061e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d10c      	bne.n	80061c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	43da      	mvns	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4013      	ands	r3, r2
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e00b      	b.n	80061dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	43da      	mvns	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f47f af6d 	bne.w	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f8:	e034      	b.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f915 	bl	800642a <I2C_IsAcknowledgeFailed>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e034      	b.n	8006274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d028      	beq.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006212:	f7fd f8bf 	bl	8003394 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d302      	bcc.n	8006228 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d11d      	bne.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b80      	cmp	r3, #128	@ 0x80
 8006234:	d016      	beq.n	8006264 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e007      	b.n	8006274 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626e:	2b80      	cmp	r3, #128	@ 0x80
 8006270:	d1c3      	bne.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006288:	e034      	b.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f8cd 	bl	800642a <I2C_IsAcknowledgeFailed>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e034      	b.n	8006304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d028      	beq.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a2:	f7fd f877 	bl	8003394 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11d      	bne.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d016      	beq.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e007      	b.n	8006304 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d1c3      	bne.n	800628a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006318:	4b13      	ldr	r3, [pc, #76]	@ (8006368 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	08db      	lsrs	r3, r3, #3
 800631e:	4a13      	ldr	r2, [pc, #76]	@ (800636c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	0a1a      	lsrs	r2, r3, #8
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b01      	subs	r3, #1
 8006332:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e008      	b.n	800635c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006358:	d0e9      	beq.n	800632e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000004 	.word	0x20000004
 800636c:	14f8b589 	.word	0x14f8b589

08006370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800637c:	e049      	b.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b10      	cmp	r3, #16
 800638a:	d119      	bne.n	80063c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0210 	mvn.w	r2, #16
 8006394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e030      	b.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c0:	f7fc ffe8 	bl	8003394 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d302      	bcc.n	80063d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d11d      	bne.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d016      	beq.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e007      	b.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d1ae      	bne.n	800637e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800643c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006440:	d11b      	bne.n	800647a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800644a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	f043 0204 	orr.w	r2, r3, #4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006498:	d103      	bne.n	80064a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80064a0:	e007      	b.n	80064b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80064aa:	d102      	bne.n	80064b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2208      	movs	r2, #8
 80064b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80064d2:	687b      	ldr	r3, [r7, #4]
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	420e0020 	.word	0x420e0020
 80064e4:	40007000 	.word	0x40007000

080064e8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80064ee:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <HAL_PWR_DisableBkUpAccess+0x20>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_PWR_DisableBkUpAccess+0x24>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80064fa:	687b      	ldr	r3, [r7, #4]
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	420e0020 	.word	0x420e0020
 800650c:	40007000 	.word	0x40007000

08006510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e267      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d075      	beq.n	800661a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800652e:	4b88      	ldr	r3, [pc, #544]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b04      	cmp	r3, #4
 8006538:	d00c      	beq.n	8006554 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653a:	4b85      	ldr	r3, [pc, #532]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006542:	2b08      	cmp	r3, #8
 8006544:	d112      	bne.n	800656c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006546:	4b82      	ldr	r3, [pc, #520]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800654e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006552:	d10b      	bne.n	800656c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006554:	4b7e      	ldr	r3, [pc, #504]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05b      	beq.n	8006618 <HAL_RCC_OscConfig+0x108>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d157      	bne.n	8006618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e242      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006574:	d106      	bne.n	8006584 <HAL_RCC_OscConfig+0x74>
 8006576:	4b76      	ldr	r3, [pc, #472]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a75      	ldr	r2, [pc, #468]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e01d      	b.n	80065c0 <HAL_RCC_OscConfig+0xb0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x98>
 800658e:	4b70      	ldr	r3, [pc, #448]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a6f      	ldr	r2, [pc, #444]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b6d      	ldr	r3, [pc, #436]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6c      	ldr	r2, [pc, #432]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e00b      	b.n	80065c0 <HAL_RCC_OscConfig+0xb0>
 80065a8:	4b69      	ldr	r3, [pc, #420]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a68      	ldr	r2, [pc, #416]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b66      	ldr	r3, [pc, #408]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a65      	ldr	r2, [pc, #404]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c8:	f7fc fee4 	bl	8003394 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d0:	f7fc fee0 	bl	8003394 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	@ 0x64
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e207      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0xc0>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fc fed0 	bl	8003394 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f8:	f7fc fecc 	bl	8003394 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	@ 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e1f3      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660a:	4b51      	ldr	r3, [pc, #324]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0xe8>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d063      	beq.n	80066ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b47      	ldr	r3, [pc, #284]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800663a:	2b08      	cmp	r3, #8
 800663c:	d11c      	bne.n	8006678 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663e:	4b44      	ldr	r3, [pc, #272]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d116      	bne.n	8006678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664a:	4b41      	ldr	r3, [pc, #260]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_RCC_OscConfig+0x152>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d001      	beq.n	8006662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e1c7      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b3b      	ldr	r3, [pc, #236]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4937      	ldr	r1, [pc, #220]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006676:	e03a      	b.n	80066ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d020      	beq.n	80066c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006680:	4b34      	ldr	r3, [pc, #208]	@ (8006754 <HAL_RCC_OscConfig+0x244>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fc fe85 	bl	8003394 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668e:	f7fc fe81 	bl	8003394 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e1a8      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ac:	4b28      	ldr	r3, [pc, #160]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4925      	ldr	r1, [pc, #148]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	600b      	str	r3, [r1, #0]
 80066c0:	e015      	b.n	80066ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c2:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <HAL_RCC_OscConfig+0x244>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fc fe64 	bl	8003394 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066d0:	f7fc fe60 	bl	8003394 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e187      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d036      	beq.n	8006768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d016      	beq.n	8006730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <HAL_RCC_OscConfig+0x248>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fc fe44 	bl	8003394 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006710:	f7fc fe40 	bl	8003394 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e167      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006722:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <HAL_RCC_OscConfig+0x240>)
 8006724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x200>
 800672e:	e01b      	b.n	8006768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <HAL_RCC_OscConfig+0x248>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006736:	f7fc fe2d 	bl	8003394 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673c:	e00e      	b.n	800675c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673e:	f7fc fe29 	bl	8003394 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d907      	bls.n	800675c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e150      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
 8006750:	40023800 	.word	0x40023800
 8006754:	42470000 	.word	0x42470000
 8006758:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800675c:	4b88      	ldr	r3, [pc, #544]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800675e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ea      	bne.n	800673e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8097 	beq.w	80068a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800677a:	4b81      	ldr	r3, [pc, #516]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10f      	bne.n	80067a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	4b7d      	ldr	r3, [pc, #500]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	4a7c      	ldr	r2, [pc, #496]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	@ 0x40
 8006796:	4b7a      	ldr	r3, [pc, #488]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b77      	ldr	r3, [pc, #476]	@ (8006984 <HAL_RCC_OscConfig+0x474>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b2:	4b74      	ldr	r3, [pc, #464]	@ (8006984 <HAL_RCC_OscConfig+0x474>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a73      	ldr	r2, [pc, #460]	@ (8006984 <HAL_RCC_OscConfig+0x474>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7fc fde9 	bl	8003394 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fc fde5 	bl	8003394 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e10c      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006984 <HAL_RCC_OscConfig+0x474>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x2ea>
 80067ec:	4b64      	ldr	r3, [pc, #400]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	4a63      	ldr	r2, [pc, #396]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f8:	e01c      	b.n	8006834 <HAL_RCC_OscConfig+0x324>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x30c>
 8006802:	4b5f      	ldr	r3, [pc, #380]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	4a5e      	ldr	r2, [pc, #376]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	6713      	str	r3, [r2, #112]	@ 0x70
 800680e:	4b5c      	ldr	r3, [pc, #368]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006812:	4a5b      	ldr	r2, [pc, #364]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6713      	str	r3, [r2, #112]	@ 0x70
 800681a:	e00b      	b.n	8006834 <HAL_RCC_OscConfig+0x324>
 800681c:	4b58      	ldr	r3, [pc, #352]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006820:	4a57      	ldr	r2, [pc, #348]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	@ 0x70
 8006828:	4b55      	ldr	r3, [pc, #340]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800682a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682c:	4a54      	ldr	r2, [pc, #336]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800682e:	f023 0304 	bic.w	r3, r3, #4
 8006832:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fc fdaa 	bl	8003394 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fc fda6 	bl	8003394 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0cb      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685a:	4b49      	ldr	r3, [pc, #292]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ee      	beq.n	8006844 <HAL_RCC_OscConfig+0x334>
 8006866:	e014      	b.n	8006892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006868:	f7fc fd94 	bl	8003394 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800686e:	e00a      	b.n	8006886 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006870:	f7fc fd90 	bl	8003394 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e0b5      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006886:	4b3e      	ldr	r3, [pc, #248]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ee      	bne.n	8006870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006898:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	4a38      	ldr	r2, [pc, #224]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800689e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80a1 	beq.w	80069f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068ae:	4b34      	ldr	r3, [pc, #208]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d05c      	beq.n	8006974 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d141      	bne.n	8006946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b31      	ldr	r3, [pc, #196]	@ (8006988 <HAL_RCC_OscConfig+0x478>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fc fd64 	bl	8003394 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fc fd60 	bl	8003394 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e087      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e2:	4b27      	ldr	r3, [pc, #156]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	3b01      	subs	r3, #1
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	491b      	ldr	r1, [pc, #108]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <HAL_RCC_OscConfig+0x478>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691e:	f7fc fd39 	bl	8003394 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006926:	f7fc fd35 	bl	8003394 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e05c      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x416>
 8006944:	e054      	b.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006946:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <HAL_RCC_OscConfig+0x478>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fc fd22 	bl	8003394 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006954:	f7fc fd1e 	bl	8003394 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e045      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_RCC_OscConfig+0x470>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x444>
 8006972:	e03d      	b.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e038      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
 8006980:	40023800 	.word	0x40023800
 8006984:	40007000 	.word	0x40007000
 8006988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698c:	4b1b      	ldr	r3, [pc, #108]	@ (80069fc <HAL_RCC_OscConfig+0x4ec>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d028      	beq.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d121      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d11a      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d111      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	3b01      	subs	r3, #1
 80069d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d107      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d001      	beq.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800

08006a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0cc      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a14:	4b68      	ldr	r3, [pc, #416]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90c      	bls.n	8006a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b65      	ldr	r3, [pc, #404]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2a:	4b63      	ldr	r3, [pc, #396]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d001      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0b8      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a54:	4b59      	ldr	r3, [pc, #356]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	4a58      	ldr	r2, [pc, #352]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a6c:	4b53      	ldr	r3, [pc, #332]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a52      	ldr	r2, [pc, #328]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a78:	4b50      	ldr	r3, [pc, #320]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	494d      	ldr	r1, [pc, #308]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d044      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	4b47      	ldr	r3, [pc, #284]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d119      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e07f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d003      	beq.n	8006abe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d107      	bne.n	8006ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abe:	4b3f      	ldr	r3, [pc, #252]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e06f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ace:	4b3b      	ldr	r3, [pc, #236]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e067      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ade:	4b37      	ldr	r3, [pc, #220]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f023 0203 	bic.w	r2, r3, #3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4934      	ldr	r1, [pc, #208]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006af0:	f7fc fc50 	bl	8003394 <HAL_GetTick>
 8006af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af6:	e00a      	b.n	8006b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af8:	f7fc fc4c 	bl	8003394 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e04f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 020c 	and.w	r2, r3, #12
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d1eb      	bne.n	8006af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b20:	4b25      	ldr	r3, [pc, #148]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20c      	bcs.n	8006b48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4b22      	ldr	r3, [pc, #136]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b36:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e032      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b54:	4b19      	ldr	r3, [pc, #100]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4916      	ldr	r1, [pc, #88]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b72:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	490e      	ldr	r1, [pc, #56]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b86:	f000 f821 	bl	8006bcc <HAL_RCC_GetSysClockFreq>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	490a      	ldr	r1, [pc, #40]	@ (8006bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b98:	5ccb      	ldrb	r3, [r1, r3]
 8006b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9e:	4a09      	ldr	r2, [pc, #36]	@ (8006bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fc fbb0 	bl	800330c <HAL_InitTick>

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40023c00 	.word	0x40023c00
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	0800cc90 	.word	0x0800cc90
 8006bc4:	20000004 	.word	0x20000004
 8006bc8:	20000008 	.word	0x20000008

08006bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd0:	b090      	sub	sp, #64	@ 0x40
 8006bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be4:	4b59      	ldr	r3, [pc, #356]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 030c 	and.w	r3, r3, #12
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d00d      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x40>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	f200 80a1 	bhi.w	8006d38 <HAL_RCC_GetSysClockFreq+0x16c>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x34>
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bfe:	e09b      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c00:	4b53      	ldr	r3, [pc, #332]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c04:	e09b      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c06:	4b53      	ldr	r3, [pc, #332]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c0a:	e098      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c16:	4b4d      	ldr	r3, [pc, #308]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c22:	4b4a      	ldr	r3, [pc, #296]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	2200      	movs	r2, #0
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c34:	2100      	movs	r1, #0
 8006c36:	4b47      	ldr	r3, [pc, #284]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c38:	fb03 f201 	mul.w	r2, r3, r1
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	fb00 f303 	mul.w	r3, r0, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	4a43      	ldr	r2, [pc, #268]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c46:	fba0 1202 	umull	r1, r2, r0, r2
 8006c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c52:	4413      	add	r3, r2
 8006c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c58:	2200      	movs	r2, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	61fa      	str	r2, [r7, #28]
 8006c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c66:	f7f9 ffa1 	bl	8000bac <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4613      	mov	r3, r2
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c72:	e053      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c74:	4b35      	ldr	r3, [pc, #212]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	617a      	str	r2, [r7, #20]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c86:	f04f 0b00 	mov.w	fp, #0
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	f04f 0000 	mov.w	r0, #0
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	0159      	lsls	r1, r3, #5
 8006c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c9c:	0150      	lsls	r0, r2, #5
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ca6:	eb63 090b 	sbc.w	r9, r3, fp
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cbe:	ebb2 0408 	subs.w	r4, r2, r8
 8006cc2:	eb63 0509 	sbc.w	r5, r3, r9
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	00eb      	lsls	r3, r5, #3
 8006cd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd4:	00e2      	lsls	r2, r4, #3
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	461d      	mov	r5, r3
 8006cda:	eb14 030a 	adds.w	r3, r4, sl
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	eb45 030b 	adc.w	r3, r5, fp
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	028b      	lsls	r3, r1, #10
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	028a      	lsls	r2, r1, #10
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	2200      	movs	r2, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	60fa      	str	r2, [r7, #12]
 8006d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d10:	f7f9 ff4c 	bl	8000bac <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	3301      	adds	r3, #1
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d36:	e002      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d38:	4b05      	ldr	r3, [pc, #20]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3740      	adds	r7, #64	@ 0x40
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	017d7840 	.word	0x017d7840

08006d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000004 	.word	0x20000004

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0a9b      	lsrs	r3, r3, #10
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4903      	ldr	r1, [pc, #12]	@ (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40023800 	.word	0x40023800
 8006d94:	0800cca0 	.word	0x0800cca0

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffdc 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	0800cca0 	.word	0x0800cca0

08006dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e041      	b.n	8006e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fb fd6a 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f000 fe1a 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e041      	b.n	8006ef4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f839 	bl	8006efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f000 fdcb 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <HAL_TIM_PWM_Start+0x24>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	e022      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d109      	bne.n	8006f4e <HAL_TIM_PWM_Start+0x3e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	bf14      	ite	ne
 8006f46:	2301      	movne	r3, #1
 8006f48:	2300      	moveq	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	e015      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d109      	bne.n	8006f68 <HAL_TIM_PWM_Start+0x58>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e008      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07c      	b.n	800707c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_PWM_Start+0x82>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f90:	e013      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0x92>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fa0:	e00b      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fb0:	e003      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 f958 	bl	8008278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007084 <HAL_TIM_PWM_Start+0x174>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIM_PWM_Start+0xcc>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <HAL_TIM_PWM_Start+0x178>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIM_PWM_Start+0xd0>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_TIM_PWM_Start+0xd2>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a22      	ldr	r2, [pc, #136]	@ (8007084 <HAL_TIM_PWM_Start+0x174>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007008:	d01d      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <HAL_TIM_PWM_Start+0x17c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <HAL_TIM_PWM_Start+0x180>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <HAL_TIM_PWM_Start+0x184>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a16      	ldr	r2, [pc, #88]	@ (8007088 <HAL_TIM_PWM_Start+0x178>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a18      	ldr	r2, [pc, #96]	@ (8007098 <HAL_TIM_PWM_Start+0x188>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a16      	ldr	r2, [pc, #88]	@ (800709c <HAL_TIM_PWM_Start+0x18c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d111      	bne.n	800706a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b06      	cmp	r3, #6
 8007056:	d010      	beq.n	800707a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	e007      	b.n	800707a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40010000 	.word	0x40010000
 8007088:	40010400 	.word	0x40010400
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40014000 	.word	0x40014000
 800709c:	40001800 	.word	0x40001800

080070a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e041      	b.n	8007136 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb fd0a 	bl	8002ae0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	4610      	mov	r0, r2
 80070e0:	f000 fcaa 	bl	8007a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e097      	b.n	8007282 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fb fc20 	bl	80029ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f000 fc50 	bl	8007a38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	4313      	orrs	r3, r2
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80071de:	f023 030c 	bic.w	r3, r3, #12
 80071e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	4313      	orrs	r3, r2
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	011a      	lsls	r2, r3, #4
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	031b      	lsls	r3, r3, #12
 800720e:	4313      	orrs	r3, r2
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800721c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007224:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4313      	orrs	r3, r2
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800729a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072aa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072b2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d110      	bne.n	80072dc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d102      	bne.n	80072c6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072c0:	7b7b      	ldrb	r3, [r7, #13]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d001      	beq.n	80072ca <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e069      	b.n	800739e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072da:	e031      	b.n	8007340 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d110      	bne.n	8007304 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d102      	bne.n	80072ee <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072e8:	7b3b      	ldrb	r3, [r7, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e055      	b.n	800739e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007302:	e01d      	b.n	8007340 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d108      	bne.n	800731c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d105      	bne.n	800731c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007310:	7b7b      	ldrb	r3, [r7, #13]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d102      	bne.n	800731c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007316:	7b3b      	ldrb	r3, [r7, #12]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e03e      	b.n	800739e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_TIM_Encoder_Start+0xc4>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d008      	beq.n	800735e <HAL_TIM_Encoder_Start+0xd4>
 800734c:	e00f      	b.n	800736e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2201      	movs	r2, #1
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f000 ff8e 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 800735c:	e016      	b.n	800738c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2201      	movs	r2, #1
 8007364:	2104      	movs	r1, #4
 8007366:	4618      	mov	r0, r3
 8007368:	f000 ff86 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 800736c:	e00e      	b.n	800738c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2201      	movs	r2, #1
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ff7e 	bl	8008278 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2201      	movs	r2, #1
 8007382:	2104      	movs	r1, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f000 ff77 	bl	8008278 <TIM_CCxChannelCmd>
      break;
 800738a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d020      	beq.n	800740a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01b      	beq.n	800740a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0202 	mvn.w	r2, #2
 80073da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb02 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 80073f6:	e005      	b.n	8007404 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 faf4 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fb05 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d020      	beq.n	8007456 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01b      	beq.n	8007456 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f06f 0204 	mvn.w	r2, #4
 8007426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fadc 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 8007442:	e005      	b.n	8007450 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 face 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fadf 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d020      	beq.n	80074a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f06f 0208 	mvn.w	r2, #8
 8007472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fab6 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 800748e:	e005      	b.n	800749c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 faa8 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fab9 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d020      	beq.n	80074ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01b      	beq.n	80074ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0210 	mvn.w	r2, #16
 80074be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2208      	movs	r2, #8
 80074c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fa90 	bl	80079fa <HAL_TIM_IC_CaptureCallback>
 80074da:	e005      	b.n	80074e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fa82 	bl	80079e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa93 	bl	8007a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f06f 0201 	mvn.w	r2, #1
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa60 	bl	80079d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 ff9f 	bl	8008474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00c      	beq.n	800755a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fa64 	bl	8007a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00c      	beq.n	800757e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0220 	mvn.w	r2, #32
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 ff71 	bl	8008460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e088      	b.n	80076b6 <HAL_TIM_IC_ConfigChannel+0x130>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d11b      	bne.n	80075ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80075c2:	f000 fc95 	bl	8007ef0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 020c 	bic.w	r2, r2, #12
 80075d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6999      	ldr	r1, [r3, #24]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	430a      	orrs	r2, r1
 80075e6:	619a      	str	r2, [r3, #24]
 80075e8:	e060      	b.n	80076ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d11c      	bne.n	800762a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007600:	f000 fd19 	bl	8008036 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007612:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	021a      	lsls	r2, r3, #8
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	619a      	str	r2, [r3, #24]
 8007628:	e040      	b.n	80076ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007640:	f000 fd66 	bl	8008110 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020c 	bic.w	r2, r2, #12
 8007652:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69d9      	ldr	r1, [r3, #28]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	61da      	str	r2, [r3, #28]
 8007666:	e021      	b.n	80076ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b0c      	cmp	r3, #12
 800766c:	d11c      	bne.n	80076a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800767e:	f000 fd83 	bl	8008188 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007690:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69d9      	ldr	r1, [r3, #28]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	61da      	str	r2, [r3, #28]
 80076a6:	e001      	b.n	80076ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076da:	2302      	movs	r3, #2
 80076dc:	e0ae      	b.n	800783c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	f200 809f 	bhi.w	800782c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076ee:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007729 	.word	0x08007729
 80076f8:	0800782d 	.word	0x0800782d
 80076fc:	0800782d 	.word	0x0800782d
 8007700:	0800782d 	.word	0x0800782d
 8007704:	08007769 	.word	0x08007769
 8007708:	0800782d 	.word	0x0800782d
 800770c:	0800782d 	.word	0x0800782d
 8007710:	0800782d 	.word	0x0800782d
 8007714:	080077ab 	.word	0x080077ab
 8007718:	0800782d 	.word	0x0800782d
 800771c:	0800782d 	.word	0x0800782d
 8007720:	0800782d 	.word	0x0800782d
 8007724:	080077eb 	.word	0x080077eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fa2e 	bl	8007b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0204 	bic.w	r2, r2, #4
 8007752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6999      	ldr	r1, [r3, #24]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	619a      	str	r2, [r3, #24]
      break;
 8007766:	e064      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa7e 	bl	8007c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	619a      	str	r2, [r3, #24]
      break;
 80077a8:	e043      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fad3 	bl	8007d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0204 	bic.w	r2, r2, #4
 80077d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69d9      	ldr	r1, [r3, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	61da      	str	r2, [r3, #28]
      break;
 80077e8:	e023      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fb27 	bl	8007e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	021a      	lsls	r2, r3, #8
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	61da      	str	r2, [r3, #28]
      break;
 800782a:	e002      	b.n	8007832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIM_ConfigClockSource+0x1c>
 800785c:	2302      	movs	r3, #2
 800785e:	e0b4      	b.n	80079ca <HAL_TIM_ConfigClockSource+0x186>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800787e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007886:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007898:	d03e      	beq.n	8007918 <HAL_TIM_ConfigClockSource+0xd4>
 800789a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800789e:	f200 8087 	bhi.w	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078a6:	f000 8086 	beq.w	80079b6 <HAL_TIM_ConfigClockSource+0x172>
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ae:	d87f      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b0:	2b70      	cmp	r3, #112	@ 0x70
 80078b2:	d01a      	beq.n	80078ea <HAL_TIM_ConfigClockSource+0xa6>
 80078b4:	2b70      	cmp	r3, #112	@ 0x70
 80078b6:	d87b      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b60      	cmp	r3, #96	@ 0x60
 80078ba:	d050      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x11a>
 80078bc:	2b60      	cmp	r3, #96	@ 0x60
 80078be:	d877      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b50      	cmp	r3, #80	@ 0x50
 80078c2:	d03c      	beq.n	800793e <HAL_TIM_ConfigClockSource+0xfa>
 80078c4:	2b50      	cmp	r3, #80	@ 0x50
 80078c6:	d873      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d058      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x13a>
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	d86f      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078d0:	2b30      	cmp	r3, #48	@ 0x30
 80078d2:	d064      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078d4:	2b30      	cmp	r3, #48	@ 0x30
 80078d6:	d86b      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d060      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d867      	bhi.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d05c      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078e4:	2b10      	cmp	r3, #16
 80078e6:	d05a      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x15a>
 80078e8:	e062      	b.n	80079b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078fa:	f000 fc9d 	bl	8008238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800790c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	609a      	str	r2, [r3, #8]
      break;
 8007916:	e04f      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007928:	f000 fc86 	bl	8008238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800793a:	609a      	str	r2, [r3, #8]
      break;
 800793c:	e03c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	461a      	mov	r2, r3
 800794c:	f000 fb44 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2150      	movs	r1, #80	@ 0x50
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fc53 	bl	8008202 <TIM_ITRx_SetConfig>
      break;
 800795c:	e02c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800796a:	461a      	mov	r2, r3
 800796c:	f000 fba0 	bl	80080b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2160      	movs	r1, #96	@ 0x60
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fc43 	bl	8008202 <TIM_ITRx_SetConfig>
      break;
 800797c:	e01c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800798a:	461a      	mov	r2, r3
 800798c:	f000 fb24 	bl	8007fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2140      	movs	r1, #64	@ 0x40
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fc33 	bl	8008202 <TIM_ITRx_SetConfig>
      break;
 800799c:	e00c      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 fc2a 	bl	8008202 <TIM_ITRx_SetConfig>
      break;
 80079ae:	e003      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
      break;
 80079b4:	e000      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a46      	ldr	r2, [pc, #280]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a56:	d00f      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a43      	ldr	r2, [pc, #268]	@ (8007b68 <TIM_Base_SetConfig+0x130>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00b      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a42      	ldr	r2, [pc, #264]	@ (8007b6c <TIM_Base_SetConfig+0x134>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d007      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a41      	ldr	r2, [pc, #260]	@ (8007b70 <TIM_Base_SetConfig+0x138>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d003      	beq.n	8007a78 <TIM_Base_SetConfig+0x40>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a40      	ldr	r2, [pc, #256]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d108      	bne.n	8007a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a35      	ldr	r2, [pc, #212]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a98:	d027      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a32      	ldr	r2, [pc, #200]	@ (8007b68 <TIM_Base_SetConfig+0x130>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d023      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a31      	ldr	r2, [pc, #196]	@ (8007b6c <TIM_Base_SetConfig+0x134>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a30      	ldr	r2, [pc, #192]	@ (8007b70 <TIM_Base_SetConfig+0x138>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d017      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2e      	ldr	r2, [pc, #184]	@ (8007b78 <TIM_Base_SetConfig+0x140>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b7c <TIM_Base_SetConfig+0x144>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00f      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a2c      	ldr	r2, [pc, #176]	@ (8007b80 <TIM_Base_SetConfig+0x148>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00b      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b84 <TIM_Base_SetConfig+0x14c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d007      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a2a      	ldr	r2, [pc, #168]	@ (8007b88 <TIM_Base_SetConfig+0x150>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d003      	beq.n	8007aea <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a29      	ldr	r2, [pc, #164]	@ (8007b8c <TIM_Base_SetConfig+0x154>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d108      	bne.n	8007afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a10      	ldr	r2, [pc, #64]	@ (8007b64 <TIM_Base_SetConfig+0x12c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d003      	beq.n	8007b30 <TIM_Base_SetConfig+0xf8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a12      	ldr	r2, [pc, #72]	@ (8007b74 <TIM_Base_SetConfig+0x13c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d103      	bne.n	8007b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d105      	bne.n	8007b56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f023 0201 	bic.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	611a      	str	r2, [r3, #16]
  }
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	40010400 	.word	0x40010400
 8007b78:	40014000 	.word	0x40014000
 8007b7c:	40014400 	.word	0x40014400
 8007b80:	40014800 	.word	0x40014800
 8007b84:	40001800 	.word	0x40001800
 8007b88:	40001c00 	.word	0x40001c00
 8007b8c:	40002000 	.word	0x40002000

08007b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	f023 0201 	bic.w	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 0302 	bic.w	r3, r3, #2
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a20      	ldr	r2, [pc, #128]	@ (8007c68 <TIM_OC1_SetConfig+0xd8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC1_SetConfig+0x64>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1f      	ldr	r2, [pc, #124]	@ (8007c6c <TIM_OC1_SetConfig+0xdc>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10c      	bne.n	8007c0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0308 	bic.w	r3, r3, #8
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f023 0304 	bic.w	r3, r3, #4
 8007c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a15      	ldr	r2, [pc, #84]	@ (8007c68 <TIM_OC1_SetConfig+0xd8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d003      	beq.n	8007c1e <TIM_OC1_SetConfig+0x8e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a14      	ldr	r2, [pc, #80]	@ (8007c6c <TIM_OC1_SetConfig+0xdc>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d111      	bne.n	8007c42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40010400 	.word	0x40010400

08007c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	f023 0210 	bic.w	r2, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0320 	bic.w	r3, r3, #32
 8007cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a22      	ldr	r2, [pc, #136]	@ (8007d54 <TIM_OC2_SetConfig+0xe4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_OC2_SetConfig+0x68>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a21      	ldr	r2, [pc, #132]	@ (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d10d      	bne.n	8007cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <TIM_OC2_SetConfig+0xe4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC2_SetConfig+0x94>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a16      	ldr	r2, [pc, #88]	@ (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d113      	bne.n	8007d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	621a      	str	r2, [r3, #32]
}
 8007d46:	bf00      	nop
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40010400 	.word	0x40010400

08007d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a21      	ldr	r2, [pc, #132]	@ (8007e3c <TIM_OC3_SetConfig+0xe0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_OC3_SetConfig+0x66>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a20      	ldr	r2, [pc, #128]	@ (8007e40 <TIM_OC3_SetConfig+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d10d      	bne.n	8007dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a16      	ldr	r2, [pc, #88]	@ (8007e3c <TIM_OC3_SetConfig+0xe0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_OC3_SetConfig+0x92>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a15      	ldr	r2, [pc, #84]	@ (8007e40 <TIM_OC3_SetConfig+0xe4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d113      	bne.n	8007e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	621a      	str	r2, [r3, #32]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40010400 	.word	0x40010400

08007e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	021b      	lsls	r3, r3, #8
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	031b      	lsls	r3, r3, #12
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ee8 <TIM_OC4_SetConfig+0xa4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d003      	beq.n	8007eac <TIM_OC4_SetConfig+0x68>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a11      	ldr	r2, [pc, #68]	@ (8007eec <TIM_OC4_SetConfig+0xa8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d109      	bne.n	8007ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	019b      	lsls	r3, r3, #6
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	621a      	str	r2, [r3, #32]
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40010400 	.word	0x40010400

08007ef0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f023 0201 	bic.w	r2, r3, #1
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a28      	ldr	r2, [pc, #160]	@ (8007fbc <TIM_TI1_SetConfig+0xcc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01b      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f24:	d017      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4a25      	ldr	r2, [pc, #148]	@ (8007fc0 <TIM_TI1_SetConfig+0xd0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a24      	ldr	r2, [pc, #144]	@ (8007fc4 <TIM_TI1_SetConfig+0xd4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00f      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a23      	ldr	r2, [pc, #140]	@ (8007fc8 <TIM_TI1_SetConfig+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4a22      	ldr	r2, [pc, #136]	@ (8007fcc <TIM_TI1_SetConfig+0xdc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a21      	ldr	r2, [pc, #132]	@ (8007fd0 <TIM_TI1_SetConfig+0xe0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_TI1_SetConfig+0x66>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <TIM_TI1_SetConfig+0xe4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d101      	bne.n	8007f5a <TIM_TI1_SetConfig+0x6a>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <TIM_TI1_SetConfig+0x6c>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	e003      	b.n	8007f7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f043 0301 	orr.w	r3, r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f023 030a 	bic.w	r3, r3, #10
 8007f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f003 030a 	and.w	r3, r3, #10
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40000c00 	.word	0x40000c00
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40001800 	.word	0x40001800

08007fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	f023 0201 	bic.w	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 030a 	bic.w	r3, r3, #10
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b087      	sub	sp, #28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f023 0210 	bic.w	r2, r3, #16
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	b29b      	uxth	r3, r3
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008088:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	621a      	str	r2, [r3, #32]
}
 80080a4:	bf00      	nop
 80080a6:	371c      	adds	r7, #28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f023 0210 	bic.w	r2, r3, #16
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	031b      	lsls	r3, r3, #12
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	621a      	str	r2, [r3, #32]
}
 8008104:	bf00      	nop
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f023 0303 	bic.w	r3, r3, #3
 800813c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800814c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	b2db      	uxtb	r3, r3
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008160:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	621a      	str	r2, [r3, #32]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	031b      	lsls	r3, r3, #12
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80081da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	031b      	lsls	r3, r3, #12
 80081e0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	621a      	str	r2, [r3, #32]
}
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	f043 0307 	orr.w	r3, r3, #7
 8008224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	609a      	str	r2, [r3, #8]
}
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	021a      	lsls	r2, r3, #8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	431a      	orrs	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4313      	orrs	r3, r2
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2201      	movs	r2, #1
 800828c:	fa02 f303 	lsl.w	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	43db      	mvns	r3, r3
 800829a:	401a      	ands	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a1a      	ldr	r2, [r3, #32]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	431a      	orrs	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082d8:	2302      	movs	r3, #2
 80082da:	e05a      	b.n	8008392 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008328:	d01d      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a1d      	ldr	r2, [pc, #116]	@ (80083a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d018      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a1b      	ldr	r2, [pc, #108]	@ (80083a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1a      	ldr	r2, [pc, #104]	@ (80083ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a18      	ldr	r2, [pc, #96]	@ (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a17      	ldr	r2, [pc, #92]	@ (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a15      	ldr	r2, [pc, #84]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d10c      	bne.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800836c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	4313      	orrs	r3, r2
 8008376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40010400 	.word	0x40010400
 80083b4:	40014000 	.word	0x40014000
 80083b8:	40001800 	.word	0x40001800

080083bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e03d      	b.n	8008454 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e042      	b.n	8008520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fa fba0 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2224      	movs	r2, #36	@ 0x24
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68da      	ldr	r2, [r3, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fdbd 	bl	800904c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	@ 0x28
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	4613      	mov	r3, r2
 8008536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b20      	cmp	r3, #32
 8008546:	d175      	bne.n	8008634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <HAL_UART_Transmit+0x2c>
 800854e:	88fb      	ldrh	r3, [r7, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e06e      	b.n	8008636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2221      	movs	r2, #33	@ 0x21
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008566:	f7fa ff15 	bl	8003394 <HAL_GetTick>
 800856a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	88fa      	ldrh	r2, [r7, #6]
 8008570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008580:	d108      	bne.n	8008594 <HAL_UART_Transmit+0x6c>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d104      	bne.n	8008594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	e003      	b.n	800859c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800859c:	e02e      	b.n	80085fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	2180      	movs	r1, #128	@ 0x80
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fb1f 	bl	8008bec <UART_WaitOnFlagUntilTimeout>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e03a      	b.n	8008636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	3302      	adds	r3, #2
 80085da:	61bb      	str	r3, [r7, #24]
 80085dc:	e007      	b.n	80085ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008600:	b29b      	uxth	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1cb      	bne.n	800859e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	2140      	movs	r1, #64	@ 0x40
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 faeb 	bl	8008bec <UART_WaitOnFlagUntilTimeout>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e006      	b.n	8008636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	e000      	b.n	8008636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008634:	2302      	movs	r3, #2
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	4613      	mov	r3, r2
 800864a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b20      	cmp	r3, #32
 8008656:	d112      	bne.n	800867e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_UART_Receive_IT+0x26>
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e00b      	b.n	8008680 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	461a      	mov	r2, r3
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fb12 	bl	8008c9e <UART_Start_Receive_IT>
 800867a:	4603      	mov	r3, r0
 800867c:	e000      	b.n	8008680 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800867e:	2302      	movs	r3, #2
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b0ba      	sub	sp, #232	@ 0xe8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10f      	bne.n	80086ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_UART_IRQHandler+0x66>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fbf2 	bl	8008ed0 <UART_Receive_IT>
      return;
 80086ec:	e25b      	b.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80de 	beq.w	80088b4 <HAL_UART_IRQHandler+0x22c>
 80086f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80d1 	beq.w	80088b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <HAL_UART_IRQHandler+0xae>
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008726:	2b00      	cmp	r3, #0
 8008728:	d005      	beq.n	8008736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872e:	f043 0201 	orr.w	r2, r3, #1
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_UART_IRQHandler+0xd2>
 8008742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f043 0202 	orr.w	r2, r3, #2
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <HAL_UART_IRQHandler+0xf6>
 8008766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008776:	f043 0204 	orr.w	r2, r3, #4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <HAL_UART_IRQHandler+0x126>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	f043 0208 	orr.w	r2, r3, #8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 81f2 	beq.w	8008b9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_UART_IRQHandler+0x14e>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fb7d 	bl	8008ed0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e0:	2b40      	cmp	r3, #64	@ 0x40
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <HAL_UART_IRQHandler+0x17a>
 80087fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d04f      	beq.n	80088a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa85 	bl	8008d12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b40      	cmp	r3, #64	@ 0x40
 8008814:	d141      	bne.n	800889a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3314      	adds	r3, #20
 800881c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800882c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3314      	adds	r3, #20
 800883e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800884e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800885a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1d9      	bne.n	8008816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a68 <HAL_UART_IRQHandler+0x3e0>)
 8008870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa ff3d 	bl	80036f6 <HAL_DMA_Abort_IT>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d016      	beq.n	80088b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008890:	e00e      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f994 	bl	8008bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008898:	e00a      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f990 	bl	8008bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	e006      	b.n	80088b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f98c 	bl	8008bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80088ae:	e175      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b0:	bf00      	nop
    return;
 80088b2:	e173      	b.n	8008b9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 814f 	bne.w	8008b5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8148 	beq.w	8008b5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 8141 	beq.w	8008b5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088da:	2300      	movs	r3, #0
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fa:	2b40      	cmp	r3, #64	@ 0x40
 80088fc:	f040 80b6 	bne.w	8008a6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800890c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 8145 	beq.w	8008ba0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800891a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800891e:	429a      	cmp	r2, r3
 8008920:	f080 813e 	bcs.w	8008ba0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800892a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008936:	f000 8088 	beq.w	8008a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	330c      	adds	r3, #12
 8008940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800896a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800897e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1d9      	bne.n	800893a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3314      	adds	r3, #20
 800898c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3314      	adds	r3, #20
 80089a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e1      	bne.n	8008986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3314      	adds	r3, #20
 80089c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3314      	adds	r3, #20
 80089e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e3      	bne.n	80089c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	330c      	adds	r3, #12
 8008a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1a:	f023 0310 	bic.w	r3, r3, #16
 8008a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e3      	bne.n	8008a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fa fde6 	bl	8003616 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8b7 	bl	8008bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a66:	e09b      	b.n	8008ba0 <HAL_UART_IRQHandler+0x518>
 8008a68:	08008dd9 	.word	0x08008dd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 808e 	beq.w	8008ba4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8089 	beq.w	8008ba4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008abe:	e841 2300 	strex	r3, r2, [r1]
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1e3      	bne.n	8008a92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3314      	adds	r3, #20
 8008ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	e853 3f00 	ldrex	r3, [r3]
 8008ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e3      	bne.n	8008aca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	330c      	adds	r3, #12
 8008b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0310 	bic.w	r3, r3, #16
 8008b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b34:	61fa      	str	r2, [r7, #28]
 8008b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b38:	69b9      	ldr	r1, [r7, #24]
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	617b      	str	r3, [r7, #20]
   return(result);
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e3      	bne.n	8008b10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f83d 	bl	8008bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b5a:	e023      	b.n	8008ba4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <HAL_UART_IRQHandler+0x4f4>
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f943 	bl	8008e00 <UART_Transmit_IT>
    return;
 8008b7a:	e014      	b.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
 8008b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d008      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f983 	bl	8008ea0 <UART_EndTransmit_IT>
    return;
 8008b9a:	e004      	b.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ba4:	bf00      	nop
  }
}
 8008ba6:	37e8      	adds	r7, #232	@ 0xe8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfc:	e03b      	b.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d037      	beq.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c06:	f7fa fbc5 	bl	8003394 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	6a3a      	ldr	r2, [r7, #32]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d302      	bcc.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e03a      	b.n	8008c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d023      	beq.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b80      	cmp	r3, #128	@ 0x80
 8008c32:	d020      	beq.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b40      	cmp	r3, #64	@ 0x40
 8008c38:	d01d      	beq.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d116      	bne.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f857 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2208      	movs	r2, #8
 8008c68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e00f      	b.n	8008c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	bf0c      	ite	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	2300      	movne	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d0b4      	beq.n	8008bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	88fa      	ldrh	r2, [r7, #6]
 8008cbc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2222      	movs	r2, #34	@ 0x22
 8008cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ce2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695a      	ldr	r2, [r3, #20]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0220 	orr.w	r2, r2, #32
 8008d02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b095      	sub	sp, #84	@ 0x54
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e5      	bne.n	8008d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3314      	adds	r3, #20
 8008d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d119      	bne.n	8008dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f023 0310 	bic.w	r3, r3, #16
 8008da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008daa:	61ba      	str	r2, [r7, #24]
 8008dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6979      	ldr	r1, [r7, #20]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	613b      	str	r3, [r7, #16]
   return(result);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008dcc:	bf00      	nop
 8008dce:	3754      	adds	r7, #84	@ 0x54
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7ff fee4 	bl	8008bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b21      	cmp	r3, #33	@ 0x21
 8008e12:	d13e      	bne.n	8008e92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e1c:	d114      	bne.n	8008e48 <UART_Transmit_IT+0x48>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d110      	bne.n	8008e48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	621a      	str	r2, [r3, #32]
 8008e46:	e008      	b.n	8008e5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	1c59      	adds	r1, r3, #1
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6211      	str	r1, [r2, #32]
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	3b01      	subs	r3, #1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	4619      	mov	r1, r3
 8008e68:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10f      	bne.n	8008e8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e000      	b.n	8008e94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
  }
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff fe73 	bl	8008bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08c      	sub	sp, #48	@ 0x30
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b22      	cmp	r3, #34	@ 0x22
 8008ee2:	f040 80ae 	bne.w	8009042 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eee:	d117      	bne.n	8008f20 <UART_Receive_IT+0x50>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d113      	bne.n	8008f20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	1c9a      	adds	r2, r3, #2
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f1e:	e026      	b.n	8008f6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f32:	d007      	beq.n	8008f44 <UART_Receive_IT+0x74>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <UART_Receive_IT+0x82>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e008      	b.n	8008f64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d15d      	bne.n	800903e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0220 	bic.w	r2, r2, #32
 8008f90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695a      	ldr	r2, [r3, #20]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0201 	bic.w	r2, r2, #1
 8008fb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d135      	bne.n	8009034 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f023 0310 	bic.w	r3, r3, #16
 8008fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	330c      	adds	r3, #12
 8008fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fee:	623a      	str	r2, [r7, #32]
 8008ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	69f9      	ldr	r1, [r7, #28]
 8008ff4:	6a3a      	ldr	r2, [r7, #32]
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e5      	bne.n	8008fce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0310 	and.w	r3, r3, #16
 800900c:	2b10      	cmp	r3, #16
 800900e:	d10a      	bne.n	8009026 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff fdd1 	bl	8008bd4 <HAL_UARTEx_RxEventCallback>
 8009032:	e002      	b.n	800903a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7f8 fb99 	bl	800176c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e002      	b.n	8009044 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	e000      	b.n	8009044 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009042:	2302      	movs	r3, #2
  }
}
 8009044:	4618      	mov	r0, r3
 8009046:	3730      	adds	r7, #48	@ 0x30
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800904c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009050:	b0c0      	sub	sp, #256	@ 0x100
 8009052:	af00      	add	r7, sp, #0
 8009054:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	68d9      	ldr	r1, [r3, #12]
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	ea40 0301 	orr.w	r3, r0, r1
 8009074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	431a      	orrs	r2, r3
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	431a      	orrs	r2, r3
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090a4:	f021 010c 	bic.w	r1, r1, #12
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090b2:	430b      	orrs	r3, r1
 80090b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c6:	6999      	ldr	r1, [r3, #24]
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	ea40 0301 	orr.w	r3, r0, r1
 80090d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	4b8f      	ldr	r3, [pc, #572]	@ (8009318 <UART_SetConfig+0x2cc>)
 80090dc:	429a      	cmp	r2, r3
 80090de:	d005      	beq.n	80090ec <UART_SetConfig+0xa0>
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b8d      	ldr	r3, [pc, #564]	@ (800931c <UART_SetConfig+0x2d0>)
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d104      	bne.n	80090f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090ec:	f7fd fe54 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 80090f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090f4:	e003      	b.n	80090fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090f6:	f7fd fe3b 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 80090fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009108:	f040 810c 	bne.w	8009324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800910c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009110:	2200      	movs	r2, #0
 8009112:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009116:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800911a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800911e:	4622      	mov	r2, r4
 8009120:	462b      	mov	r3, r5
 8009122:	1891      	adds	r1, r2, r2
 8009124:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009126:	415b      	adcs	r3, r3
 8009128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800912a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800912e:	4621      	mov	r1, r4
 8009130:	eb12 0801 	adds.w	r8, r2, r1
 8009134:	4629      	mov	r1, r5
 8009136:	eb43 0901 	adc.w	r9, r3, r1
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800914a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800914e:	4690      	mov	r8, r2
 8009150:	4699      	mov	r9, r3
 8009152:	4623      	mov	r3, r4
 8009154:	eb18 0303 	adds.w	r3, r8, r3
 8009158:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800915c:	462b      	mov	r3, r5
 800915e:	eb49 0303 	adc.w	r3, r9, r3
 8009162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009172:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800917a:	460b      	mov	r3, r1
 800917c:	18db      	adds	r3, r3, r3
 800917e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009180:	4613      	mov	r3, r2
 8009182:	eb42 0303 	adc.w	r3, r2, r3
 8009186:	657b      	str	r3, [r7, #84]	@ 0x54
 8009188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800918c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009190:	f7f7 fd0c 	bl	8000bac <__aeabi_uldivmod>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4b61      	ldr	r3, [pc, #388]	@ (8009320 <UART_SetConfig+0x2d4>)
 800919a:	fba3 2302 	umull	r2, r3, r3, r2
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	011c      	lsls	r4, r3, #4
 80091a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091b4:	4642      	mov	r2, r8
 80091b6:	464b      	mov	r3, r9
 80091b8:	1891      	adds	r1, r2, r2
 80091ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091bc:	415b      	adcs	r3, r3
 80091be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091c4:	4641      	mov	r1, r8
 80091c6:	eb12 0a01 	adds.w	sl, r2, r1
 80091ca:	4649      	mov	r1, r9
 80091cc:	eb43 0b01 	adc.w	fp, r3, r1
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091e4:	4692      	mov	sl, r2
 80091e6:	469b      	mov	fp, r3
 80091e8:	4643      	mov	r3, r8
 80091ea:	eb1a 0303 	adds.w	r3, sl, r3
 80091ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091f2:	464b      	mov	r3, r9
 80091f4:	eb4b 0303 	adc.w	r3, fp, r3
 80091f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009208:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800920c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009210:	460b      	mov	r3, r1
 8009212:	18db      	adds	r3, r3, r3
 8009214:	643b      	str	r3, [r7, #64]	@ 0x40
 8009216:	4613      	mov	r3, r2
 8009218:	eb42 0303 	adc.w	r3, r2, r3
 800921c:	647b      	str	r3, [r7, #68]	@ 0x44
 800921e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009226:	f7f7 fcc1 	bl	8000bac <__aeabi_uldivmod>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4611      	mov	r1, r2
 8009230:	4b3b      	ldr	r3, [pc, #236]	@ (8009320 <UART_SetConfig+0x2d4>)
 8009232:	fba3 2301 	umull	r2, r3, r3, r1
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	2264      	movs	r2, #100	@ 0x64
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	1acb      	subs	r3, r1, r3
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009246:	4b36      	ldr	r3, [pc, #216]	@ (8009320 <UART_SetConfig+0x2d4>)
 8009248:	fba3 2302 	umull	r2, r3, r3, r2
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009254:	441c      	add	r4, r3
 8009256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800925a:	2200      	movs	r2, #0
 800925c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009260:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	1891      	adds	r1, r2, r2
 800926e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009270:	415b      	adcs	r3, r3
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009278:	4641      	mov	r1, r8
 800927a:	1851      	adds	r1, r2, r1
 800927c:	6339      	str	r1, [r7, #48]	@ 0x30
 800927e:	4649      	mov	r1, r9
 8009280:	414b      	adcs	r3, r1
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	f04f 0300 	mov.w	r3, #0
 800928c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009290:	4659      	mov	r1, fp
 8009292:	00cb      	lsls	r3, r1, #3
 8009294:	4651      	mov	r1, sl
 8009296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800929a:	4651      	mov	r1, sl
 800929c:	00ca      	lsls	r2, r1, #3
 800929e:	4610      	mov	r0, r2
 80092a0:	4619      	mov	r1, r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	4642      	mov	r2, r8
 80092a6:	189b      	adds	r3, r3, r2
 80092a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092ac:	464b      	mov	r3, r9
 80092ae:	460a      	mov	r2, r1
 80092b0:	eb42 0303 	adc.w	r3, r2, r3
 80092b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092cc:	460b      	mov	r3, r1
 80092ce:	18db      	adds	r3, r3, r3
 80092d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092d2:	4613      	mov	r3, r2
 80092d4:	eb42 0303 	adc.w	r3, r2, r3
 80092d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092e2:	f7f7 fc63 	bl	8000bac <__aeabi_uldivmod>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <UART_SetConfig+0x2d4>)
 80092ec:	fba3 1302 	umull	r1, r3, r3, r2
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	2164      	movs	r1, #100	@ 0x64
 80092f4:	fb01 f303 	mul.w	r3, r1, r3
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	3332      	adds	r3, #50	@ 0x32
 80092fe:	4a08      	ldr	r2, [pc, #32]	@ (8009320 <UART_SetConfig+0x2d4>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	095b      	lsrs	r3, r3, #5
 8009306:	f003 0207 	and.w	r2, r3, #7
 800930a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4422      	add	r2, r4
 8009312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009314:	e106      	b.n	8009524 <UART_SetConfig+0x4d8>
 8009316:	bf00      	nop
 8009318:	40011000 	.word	0x40011000
 800931c:	40011400 	.word	0x40011400
 8009320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009328:	2200      	movs	r2, #0
 800932a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800932e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009336:	4642      	mov	r2, r8
 8009338:	464b      	mov	r3, r9
 800933a:	1891      	adds	r1, r2, r2
 800933c:	6239      	str	r1, [r7, #32]
 800933e:	415b      	adcs	r3, r3
 8009340:	627b      	str	r3, [r7, #36]	@ 0x24
 8009342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009346:	4641      	mov	r1, r8
 8009348:	1854      	adds	r4, r2, r1
 800934a:	4649      	mov	r1, r9
 800934c:	eb43 0501 	adc.w	r5, r3, r1
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	00eb      	lsls	r3, r5, #3
 800935a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800935e:	00e2      	lsls	r2, r4, #3
 8009360:	4614      	mov	r4, r2
 8009362:	461d      	mov	r5, r3
 8009364:	4643      	mov	r3, r8
 8009366:	18e3      	adds	r3, r4, r3
 8009368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800936c:	464b      	mov	r3, r9
 800936e:	eb45 0303 	adc.w	r3, r5, r3
 8009372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009392:	4629      	mov	r1, r5
 8009394:	008b      	lsls	r3, r1, #2
 8009396:	4621      	mov	r1, r4
 8009398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800939c:	4621      	mov	r1, r4
 800939e:	008a      	lsls	r2, r1, #2
 80093a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093a4:	f7f7 fc02 	bl	8000bac <__aeabi_uldivmod>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4b60      	ldr	r3, [pc, #384]	@ (8009530 <UART_SetConfig+0x4e4>)
 80093ae:	fba3 2302 	umull	r2, r3, r3, r2
 80093b2:	095b      	lsrs	r3, r3, #5
 80093b4:	011c      	lsls	r4, r3, #4
 80093b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093c8:	4642      	mov	r2, r8
 80093ca:	464b      	mov	r3, r9
 80093cc:	1891      	adds	r1, r2, r2
 80093ce:	61b9      	str	r1, [r7, #24]
 80093d0:	415b      	adcs	r3, r3
 80093d2:	61fb      	str	r3, [r7, #28]
 80093d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093d8:	4641      	mov	r1, r8
 80093da:	1851      	adds	r1, r2, r1
 80093dc:	6139      	str	r1, [r7, #16]
 80093de:	4649      	mov	r1, r9
 80093e0:	414b      	adcs	r3, r1
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093f0:	4659      	mov	r1, fp
 80093f2:	00cb      	lsls	r3, r1, #3
 80093f4:	4651      	mov	r1, sl
 80093f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093fa:	4651      	mov	r1, sl
 80093fc:	00ca      	lsls	r2, r1, #3
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	4603      	mov	r3, r0
 8009404:	4642      	mov	r2, r8
 8009406:	189b      	adds	r3, r3, r2
 8009408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800940c:	464b      	mov	r3, r9
 800940e:	460a      	mov	r2, r1
 8009410:	eb42 0303 	adc.w	r3, r2, r3
 8009414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009422:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	f04f 0300 	mov.w	r3, #0
 800942c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009430:	4649      	mov	r1, r9
 8009432:	008b      	lsls	r3, r1, #2
 8009434:	4641      	mov	r1, r8
 8009436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800943a:	4641      	mov	r1, r8
 800943c:	008a      	lsls	r2, r1, #2
 800943e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009442:	f7f7 fbb3 	bl	8000bac <__aeabi_uldivmod>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4611      	mov	r1, r2
 800944c:	4b38      	ldr	r3, [pc, #224]	@ (8009530 <UART_SetConfig+0x4e4>)
 800944e:	fba3 2301 	umull	r2, r3, r3, r1
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	2264      	movs	r2, #100	@ 0x64
 8009456:	fb02 f303 	mul.w	r3, r2, r3
 800945a:	1acb      	subs	r3, r1, r3
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	3332      	adds	r3, #50	@ 0x32
 8009460:	4a33      	ldr	r2, [pc, #204]	@ (8009530 <UART_SetConfig+0x4e4>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800946c:	441c      	add	r4, r3
 800946e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009472:	2200      	movs	r2, #0
 8009474:	673b      	str	r3, [r7, #112]	@ 0x70
 8009476:	677a      	str	r2, [r7, #116]	@ 0x74
 8009478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	1891      	adds	r1, r2, r2
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	415b      	adcs	r3, r3
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800948c:	4641      	mov	r1, r8
 800948e:	1851      	adds	r1, r2, r1
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	4649      	mov	r1, r9
 8009494:	414b      	adcs	r3, r1
 8009496:	607b      	str	r3, [r7, #4]
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094a4:	4659      	mov	r1, fp
 80094a6:	00cb      	lsls	r3, r1, #3
 80094a8:	4651      	mov	r1, sl
 80094aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ae:	4651      	mov	r1, sl
 80094b0:	00ca      	lsls	r2, r1, #3
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	4642      	mov	r2, r8
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094be:	464b      	mov	r3, r9
 80094c0:	460a      	mov	r2, r1
 80094c2:	eb42 0303 	adc.w	r3, r2, r3
 80094c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80094d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	f04f 0300 	mov.w	r3, #0
 80094dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094e0:	4649      	mov	r1, r9
 80094e2:	008b      	lsls	r3, r1, #2
 80094e4:	4641      	mov	r1, r8
 80094e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ea:	4641      	mov	r1, r8
 80094ec:	008a      	lsls	r2, r1, #2
 80094ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094f2:	f7f7 fb5b 	bl	8000bac <__aeabi_uldivmod>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <UART_SetConfig+0x4e4>)
 80094fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009500:	095b      	lsrs	r3, r3, #5
 8009502:	2164      	movs	r1, #100	@ 0x64
 8009504:	fb01 f303 	mul.w	r3, r1, r3
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	3332      	adds	r3, #50	@ 0x32
 800950e:	4a08      	ldr	r2, [pc, #32]	@ (8009530 <UART_SetConfig+0x4e4>)
 8009510:	fba2 2303 	umull	r2, r3, r2, r3
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	f003 020f 	and.w	r2, r3, #15
 800951a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4422      	add	r2, r4
 8009522:	609a      	str	r2, [r3, #8]
}
 8009524:	bf00      	nop
 8009526:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800952a:	46bd      	mov	sp, r7
 800952c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009530:	51eb851f 	.word	0x51eb851f

08009534 <__NVIC_SetPriority>:
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	db0a      	blt.n	800955e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	b2da      	uxtb	r2, r3
 800954c:	490c      	ldr	r1, [pc, #48]	@ (8009580 <__NVIC_SetPriority+0x4c>)
 800954e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009552:	0112      	lsls	r2, r2, #4
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	440b      	add	r3, r1
 8009558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800955c:	e00a      	b.n	8009574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	4908      	ldr	r1, [pc, #32]	@ (8009584 <__NVIC_SetPriority+0x50>)
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	3b04      	subs	r3, #4
 800956c:	0112      	lsls	r2, r2, #4
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	440b      	add	r3, r1
 8009572:	761a      	strb	r2, [r3, #24]
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	e000e100 	.word	0xe000e100
 8009584:	e000ed00 	.word	0xe000ed00

08009588 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800958c:	2100      	movs	r1, #0
 800958e:	f06f 0004 	mvn.w	r0, #4
 8009592:	f7ff ffcf 	bl	8009534 <__NVIC_SetPriority>
#endif
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095a2:	f3ef 8305 	mrs	r3, IPSR
 80095a6:	603b      	str	r3, [r7, #0]
  return(result);
 80095a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095ae:	f06f 0305 	mvn.w	r3, #5
 80095b2:	607b      	str	r3, [r7, #4]
 80095b4:	e00c      	b.n	80095d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095b6:	4b0a      	ldr	r3, [pc, #40]	@ (80095e0 <osKernelInitialize+0x44>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d105      	bne.n	80095ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80095be:	4b08      	ldr	r3, [pc, #32]	@ (80095e0 <osKernelInitialize+0x44>)
 80095c0:	2201      	movs	r2, #1
 80095c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	607b      	str	r3, [r7, #4]
 80095c8:	e002      	b.n	80095d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095ca:	f04f 33ff 	mov.w	r3, #4294967295
 80095ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095d0:	687b      	ldr	r3, [r7, #4]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20000700 	.word	0x20000700

080095e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ea:	f3ef 8305 	mrs	r3, IPSR
 80095ee:	603b      	str	r3, [r7, #0]
  return(result);
 80095f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80095f6:	f06f 0305 	mvn.w	r3, #5
 80095fa:	607b      	str	r3, [r7, #4]
 80095fc:	e010      	b.n	8009620 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095fe:	4b0b      	ldr	r3, [pc, #44]	@ (800962c <osKernelStart+0x48>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d109      	bne.n	800961a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009606:	f7ff ffbf 	bl	8009588 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <osKernelStart+0x48>)
 800960c:	2202      	movs	r2, #2
 800960e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009610:	f001 f892 	bl	800a738 <vTaskStartScheduler>
      stat = osOK;
 8009614:	2300      	movs	r3, #0
 8009616:	607b      	str	r3, [r7, #4]
 8009618:	e002      	b.n	8009620 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800961a:	f04f 33ff 	mov.w	r3, #4294967295
 800961e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009620:	687b      	ldr	r3, [r7, #4]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000700 	.word	0x20000700

08009630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b08e      	sub	sp, #56	@ 0x38
 8009634:	af04      	add	r7, sp, #16
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800963c:	2300      	movs	r3, #0
 800963e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009640:	f3ef 8305 	mrs	r3, IPSR
 8009644:	617b      	str	r3, [r7, #20]
  return(result);
 8009646:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009648:	2b00      	cmp	r3, #0
 800964a:	d17e      	bne.n	800974a <osThreadNew+0x11a>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d07b      	beq.n	800974a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009652:	2380      	movs	r3, #128	@ 0x80
 8009654:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009656:	2318      	movs	r3, #24
 8009658:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d045      	beq.n	80096f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <osThreadNew+0x48>
        name = attr->name;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <osThreadNew+0x6e>
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	2b38      	cmp	r3, #56	@ 0x38
 8009690:	d805      	bhi.n	800969e <osThreadNew+0x6e>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <osThreadNew+0x72>
        return (NULL);
 800969e:	2300      	movs	r3, #0
 80096a0:	e054      	b.n	800974c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	089b      	lsrs	r3, r3, #2
 80096b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <osThreadNew+0xa8>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	2ba7      	cmp	r3, #167	@ 0xa7
 80096c0:	d90a      	bls.n	80096d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d006      	beq.n	80096d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <osThreadNew+0xa8>
        mem = 1;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e010      	b.n	80096fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <osThreadNew+0xca>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d108      	bne.n	80096fa <osThreadNew+0xca>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <osThreadNew+0xca>
          mem = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	61bb      	str	r3, [r7, #24]
 80096f4:	e001      	b.n	80096fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d110      	bne.n	8009722 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 fe1a 	bl	800a350 <xTaskCreateStatic>
 800971c:	4603      	mov	r3, r0
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	e013      	b.n	800974a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d110      	bne.n	800974a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	b29a      	uxth	r2, r3
 800972c:	f107 0310 	add.w	r3, r7, #16
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fe68 	bl	800a410 <xTaskCreate>
 8009740:	4603      	mov	r3, r0
 8009742:	2b01      	cmp	r3, #1
 8009744:	d001      	beq.n	800974a <osThreadNew+0x11a>
            hTask = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800974a:	693b      	ldr	r3, [r7, #16]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3728      	adds	r7, #40	@ 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800975c:	f3ef 8305 	mrs	r3, IPSR
 8009760:	60bb      	str	r3, [r7, #8]
  return(result);
 8009762:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <osDelay+0x1c>
    stat = osErrorISR;
 8009768:	f06f 0305 	mvn.w	r3, #5
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e007      	b.n	8009780 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009770:	2300      	movs	r3, #0
 8009772:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <osDelay+0x2c>
      vTaskDelay(ticks);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 ffa6 	bl	800a6cc <vTaskDelay>
    }
  }

  return (stat);
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4a07      	ldr	r2, [pc, #28]	@ (80097b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800979c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a06      	ldr	r2, [pc, #24]	@ (80097bc <vApplicationGetIdleTaskMemory+0x30>)
 80097a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2280      	movs	r2, #128	@ 0x80
 80097a8:	601a      	str	r2, [r3, #0]
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000704 	.word	0x20000704
 80097bc:	200007ac 	.word	0x200007ac

080097c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a07      	ldr	r2, [pc, #28]	@ (80097ec <vApplicationGetTimerTaskMemory+0x2c>)
 80097d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4a06      	ldr	r2, [pc, #24]	@ (80097f0 <vApplicationGetTimerTaskMemory+0x30>)
 80097d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	200009ac 	.word	0x200009ac
 80097f0:	20000a54 	.word	0x20000a54

080097f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f103 0208 	add.w	r2, r3, #8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f103 0208 	add.w	r2, r3, #8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f103 0208 	add.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]
}
 800988a:	bf00      	nop
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d103      	bne.n	80098b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e00c      	b.n	80098d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3308      	adds	r3, #8
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	e002      	b.n	80098c4 <vListInsert+0x2e>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d2f6      	bcs.n	80098be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	601a      	str	r2, [r3, #0]
}
 80098fc:	bf00      	nop
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6892      	ldr	r2, [r2, #8]
 800991e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6852      	ldr	r2, [r2, #4]
 8009928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d103      	bne.n	800993c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	1e5a      	subs	r2, r3, #1
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009982:	bf00      	nop
 8009984:	bf00      	nop
 8009986:	e7fd      	b.n	8009984 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009988:	f002 f8a6 	bl	800bad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009994:	68f9      	ldr	r1, [r7, #12]
 8009996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009998:	fb01 f303 	mul.w	r3, r1, r3
 800999c:	441a      	add	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b8:	3b01      	subs	r3, #1
 80099ba:	68f9      	ldr	r1, [r7, #12]
 80099bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	441a      	add	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	22ff      	movs	r2, #255	@ 0xff
 80099cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	22ff      	movs	r2, #255	@ 0xff
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d114      	bne.n	8009a08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01a      	beq.n	8009a1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3310      	adds	r3, #16
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 f942 	bl	800ac74 <xTaskRemoveFromEventList>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d012      	beq.n	8009a1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <xQueueGenericReset+0xd0>)
 80099f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	e009      	b.n	8009a1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3310      	adds	r3, #16
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff fef1 	bl	80097f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3324      	adds	r3, #36	@ 0x24
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff feec 	bl	80097f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a1c:	f002 f88e 	bl	800bb3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a20:	2301      	movs	r3, #1
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08e      	sub	sp, #56	@ 0x38
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10b      	bne.n	8009a5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a56:	bf00      	nop
 8009a58:	bf00      	nop
 8009a5a:	e7fd      	b.n	8009a58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10b      	bne.n	8009a7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	e7fd      	b.n	8009a76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <xQueueGenericCreateStatic+0x56>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <xQueueGenericCreateStatic+0x5a>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e000      	b.n	8009a8c <xQueueGenericCreateStatic+0x5c>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10b      	bne.n	8009aa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	623b      	str	r3, [r7, #32]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <xQueueGenericCreateStatic+0x84>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <xQueueGenericCreateStatic+0x88>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <xQueueGenericCreateStatic+0x8a>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10b      	bne.n	8009ad6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	61fb      	str	r3, [r7, #28]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ad6:	2350      	movs	r3, #80	@ 0x50
 8009ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b50      	cmp	r3, #80	@ 0x50
 8009ade:	d00b      	beq.n	8009af8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	61bb      	str	r3, [r7, #24]
}
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009af8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00d      	beq.n	8009b20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	4613      	mov	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 f805 	bl	8009b2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3730      	adds	r7, #48	@ 0x30
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e002      	b.n	8009b4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b58:	2101      	movs	r1, #1
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f7ff fefe 	bl	800995c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	78fa      	ldrb	r2, [r7, #3]
 8009b64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	@ 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xQueueGenericSend+0x34>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <xQueueGenericSend+0x42>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <xQueueGenericSend+0x46>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <xQueueGenericSend+0x48>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <xQueueGenericSend+0x64>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d103      	bne.n	8009be2 <xQueueGenericSend+0x72>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d101      	bne.n	8009be6 <xQueueGenericSend+0x76>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <xQueueGenericSend+0x78>
 8009be6:	2300      	movs	r3, #0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10b      	bne.n	8009c04 <xQueueGenericSend+0x94>
	__asm volatile
 8009bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf0:	f383 8811 	msr	BASEPRI, r3
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	623b      	str	r3, [r7, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	e7fd      	b.n	8009c00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c04:	f001 f9fc 	bl	800b000 <xTaskGetSchedulerState>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <xQueueGenericSend+0xa4>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <xQueueGenericSend+0xa8>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <xQueueGenericSend+0xaa>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10b      	bne.n	8009c36 <xQueueGenericSend+0xc6>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	61fb      	str	r3, [r7, #28]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c36:	f001 ff4f 	bl	800bad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d302      	bcc.n	8009c4c <xQueueGenericSend+0xdc>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d129      	bne.n	8009ca0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c52:	f000 fa0f 	bl	800a074 <prvCopyDataToQueue>
 8009c56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d010      	beq.n	8009c82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	3324      	adds	r3, #36	@ 0x24
 8009c64:	4618      	mov	r0, r3
 8009c66:	f001 f805 	bl	800ac74 <xTaskRemoveFromEventList>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d013      	beq.n	8009c98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c70:	4b3f      	ldr	r3, [pc, #252]	@ (8009d70 <xQueueGenericSend+0x200>)
 8009c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	e00a      	b.n	8009c98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c88:	4b39      	ldr	r3, [pc, #228]	@ (8009d70 <xQueueGenericSend+0x200>)
 8009c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c98:	f001 ff50 	bl	800bb3c <vPortExitCritical>
				return pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e063      	b.n	8009d68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ca6:	f001 ff49 	bl	800bb3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	e05c      	b.n	8009d68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 f83f 	bl	800ad3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cc2:	f001 ff3b 	bl	800bb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cc6:	f000 fda7 	bl	800a818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cca:	f001 ff05 	bl	800bad8 <vPortEnterCritical>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cda:	d103      	bne.n	8009ce4 <xQueueGenericSend+0x174>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cea:	b25b      	sxtb	r3, r3
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d103      	bne.n	8009cfa <xQueueGenericSend+0x18a>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cfa:	f001 ff1f 	bl	800bb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cfe:	1d3a      	adds	r2, r7, #4
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 f82e 	bl	800ad68 <xTaskCheckForTimeOut>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d124      	bne.n	8009d5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d14:	f000 faa6 	bl	800a264 <prvIsQueueFull>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d018      	beq.n	8009d50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	3310      	adds	r3, #16
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 ff52 	bl	800abd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d2e:	f000 fa31 	bl	800a194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d32:	f000 fd7f 	bl	800a834 <xTaskResumeAll>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f47f af7c 	bne.w	8009c36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d70 <xQueueGenericSend+0x200>)
 8009d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	e772      	b.n	8009c36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d52:	f000 fa1f 	bl	800a194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d56:	f000 fd6d 	bl	800a834 <xTaskResumeAll>
 8009d5a:	e76c      	b.n	8009c36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d5e:	f000 fa19 	bl	800a194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d62:	f000 fd67 	bl	800a834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3738      	adds	r7, #56	@ 0x38
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b090      	sub	sp, #64	@ 0x40
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10b      	bne.n	8009da4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	e7fd      	b.n	8009da0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <xQueueGenericSendFromISR+0x3e>
 8009daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <xQueueGenericSendFromISR+0x42>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <xQueueGenericSendFromISR+0x44>
 8009db6:	2300      	movs	r3, #0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	e7fd      	b.n	8009dd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d103      	bne.n	8009de2 <xQueueGenericSendFromISR+0x6e>
 8009dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <xQueueGenericSendFromISR+0x72>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <xQueueGenericSendFromISR+0x74>
 8009de6:	2300      	movs	r3, #0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10b      	bne.n	8009e04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df0:	f383 8811 	msr	BASEPRI, r3
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	f3bf 8f4f 	dsb	sy
 8009dfc:	623b      	str	r3, [r7, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	bf00      	nop
 8009e02:	e7fd      	b.n	8009e00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e04:	f001 ff48 	bl	800bc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e08:	f3ef 8211 	mrs	r2, BASEPRI
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	61fa      	str	r2, [r7, #28]
 8009e1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d302      	bcc.n	8009e36 <xQueueGenericSendFromISR+0xc2>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d12f      	bne.n	8009e96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	68b9      	ldr	r1, [r7, #8]
 8009e4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e4c:	f000 f912 	bl	800a074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e58:	d112      	bne.n	8009e80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d016      	beq.n	8009e90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e64:	3324      	adds	r3, #36	@ 0x24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 ff04 	bl	800ac74 <xTaskRemoveFromEventList>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00e      	beq.n	8009e90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	e007      	b.n	8009e90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e84:	3301      	adds	r3, #1
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	b25a      	sxtb	r2, r3
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e90:	2301      	movs	r3, #1
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e94:	e001      	b.n	8009e9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3740      	adds	r7, #64	@ 0x40
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08c      	sub	sp, #48	@ 0x30
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <xQueueReceive+0x32>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	623b      	str	r3, [r7, #32]
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d103      	bne.n	8009ef0 <xQueueReceive+0x40>
 8009ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <xQueueReceive+0x44>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <xQueueReceive+0x46>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10b      	bne.n	8009f12 <xQueueReceive+0x62>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	61fb      	str	r3, [r7, #28]
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	e7fd      	b.n	8009f0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f12:	f001 f875 	bl	800b000 <xTaskGetSchedulerState>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <xQueueReceive+0x72>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <xQueueReceive+0x76>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <xQueueReceive+0x78>
 8009f26:	2300      	movs	r3, #0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10b      	bne.n	8009f44 <xQueueReceive+0x94>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	61bb      	str	r3, [r7, #24]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f44:	f001 fdc8 	bl	800bad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01f      	beq.n	8009f94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f58:	f000 f8f6 	bl	800a148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5e:	1e5a      	subs	r2, r3, #1
 8009f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00f      	beq.n	8009f8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6e:	3310      	adds	r3, #16
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fe7f 	bl	800ac74 <xTaskRemoveFromEventList>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d007      	beq.n	8009f8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f7c:	4b3c      	ldr	r3, [pc, #240]	@ (800a070 <xQueueReceive+0x1c0>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f8c:	f001 fdd6 	bl	800bb3c <vPortExitCritical>
				return pdPASS;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e069      	b.n	800a068 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d103      	bne.n	8009fa2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f9a:	f001 fdcf 	bl	800bb3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e062      	b.n	800a068 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fa8:	f107 0310 	add.w	r3, r7, #16
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fec5 	bl	800ad3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fb6:	f001 fdc1 	bl	800bb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fba:	f000 fc2d 	bl	800a818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fbe:	f001 fd8b 	bl	800bad8 <vPortEnterCritical>
 8009fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d103      	bne.n	8009fd8 <xQueueReceive+0x128>
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fde:	b25b      	sxtb	r3, r3
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d103      	bne.n	8009fee <xQueueReceive+0x13e>
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fee:	f001 fda5 	bl	800bb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ff2:	1d3a      	adds	r2, r7, #4
 8009ff4:	f107 0310 	add.w	r3, r7, #16
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 feb4 	bl	800ad68 <xTaskCheckForTimeOut>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d123      	bne.n	800a04e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a006:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a008:	f000 f916 	bl	800a238 <prvIsQueueEmpty>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d017      	beq.n	800a042 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	3324      	adds	r3, #36	@ 0x24
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fdd8 	bl	800abd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a022:	f000 f8b7 	bl	800a194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a026:	f000 fc05 	bl	800a834 <xTaskResumeAll>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d189      	bne.n	8009f44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a030:	4b0f      	ldr	r3, [pc, #60]	@ (800a070 <xQueueReceive+0x1c0>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	e780      	b.n	8009f44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a044:	f000 f8a6 	bl	800a194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a048:	f000 fbf4 	bl	800a834 <xTaskResumeAll>
 800a04c:	e77a      	b.n	8009f44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a04e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a050:	f000 f8a0 	bl	800a194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a054:	f000 fbee 	bl	800a834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a05a:	f000 f8ed 	bl	800a238 <prvIsQueueEmpty>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	f43f af6f 	beq.w	8009f44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a066:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3730      	adds	r7, #48	@ 0x30
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10d      	bne.n	800a0ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d14d      	bne.n	800a136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 ffcc 	bl	800b03c <xTaskPriorityDisinherit>
 800a0a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	609a      	str	r2, [r3, #8]
 800a0ac:	e043      	b.n	800a136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d119      	bne.n	800a0e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6858      	ldr	r0, [r3, #4]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0bc:	461a      	mov	r2, r3
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	f002 f8c4 	bl	800c24c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0cc:	441a      	add	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d32b      	bcc.n	800a136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	605a      	str	r2, [r3, #4]
 800a0e6:	e026      	b.n	800a136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68d8      	ldr	r0, [r3, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68b9      	ldr	r1, [r7, #8]
 800a0f4:	f002 f8aa 	bl	800c24c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a100:	425b      	negs	r3, r3
 800a102:	441a      	add	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68da      	ldr	r2, [r3, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d207      	bcs.n	800a124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11c:	425b      	negs	r3, r3
 800a11e:	441a      	add	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d105      	bne.n	800a136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	3b01      	subs	r3, #1
 800a134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a13e:	697b      	ldr	r3, [r7, #20]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a162:	441a      	add	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68da      	ldr	r2, [r3, #12]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	429a      	cmp	r2, r3
 800a172:	d303      	bcc.n	800a17c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68d9      	ldr	r1, [r3, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a184:	461a      	mov	r2, r3
 800a186:	6838      	ldr	r0, [r7, #0]
 800a188:	f002 f860 	bl	800c24c <memcpy>
	}
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a19c:	f001 fc9c 	bl	800bad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1a8:	e011      	b.n	800a1ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d012      	beq.n	800a1d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3324      	adds	r3, #36	@ 0x24
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fd5c 	bl	800ac74 <xTaskRemoveFromEventList>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a1c2:	f000 fe35 	bl	800ae30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dce9      	bgt.n	800a1aa <prvUnlockQueue+0x16>
 800a1d6:	e000      	b.n	800a1da <prvUnlockQueue+0x46>
					break;
 800a1d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	22ff      	movs	r2, #255	@ 0xff
 800a1de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a1e2:	f001 fcab 	bl	800bb3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1e6:	f001 fc77 	bl	800bad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1f2:	e011      	b.n	800a218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3310      	adds	r3, #16
 800a200:	4618      	mov	r0, r3
 800a202:	f000 fd37 	bl	800ac74 <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a20c:	f000 fe10 	bl	800ae30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	3b01      	subs	r3, #1
 800a214:	b2db      	uxtb	r3, r3
 800a216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dce9      	bgt.n	800a1f4 <prvUnlockQueue+0x60>
 800a220:	e000      	b.n	800a224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	22ff      	movs	r2, #255	@ 0xff
 800a228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a22c:	f001 fc86 	bl	800bb3c <vPortExitCritical>
}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a240:	f001 fc4a 	bl	800bad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d102      	bne.n	800a252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a24c:	2301      	movs	r3, #1
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e001      	b.n	800a256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a256:	f001 fc71 	bl	800bb3c <vPortExitCritical>

	return xReturn;
 800a25a:	68fb      	ldr	r3, [r7, #12]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a26c:	f001 fc34 	bl	800bad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d102      	bne.n	800a282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a27c:	2301      	movs	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e001      	b.n	800a286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a286:	f001 fc59 	bl	800bb3c <vPortExitCritical>

	return xReturn;
 800a28a:	68fb      	ldr	r3, [r7, #12]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e014      	b.n	800a2ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2a4:	4a0f      	ldr	r2, [pc, #60]	@ (800a2e4 <vQueueAddToRegistry+0x50>)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10b      	bne.n	800a2c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2b0:	490c      	ldr	r1, [pc, #48]	@ (800a2e4 <vQueueAddToRegistry+0x50>)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a2e4 <vQueueAddToRegistry+0x50>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	4413      	add	r3, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a2c6:	e006      	b.n	800a2d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2b07      	cmp	r3, #7
 800a2d2:	d9e7      	bls.n	800a2a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	20000e54 	.word	0x20000e54

0800a2e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2f8:	f001 fbee 	bl	800bad8 <vPortEnterCritical>
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a302:	b25b      	sxtb	r3, r3
 800a304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a308:	d103      	bne.n	800a312 <vQueueWaitForMessageRestricted+0x2a>
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a318:	b25b      	sxtb	r3, r3
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d103      	bne.n	800a328 <vQueueWaitForMessageRestricted+0x40>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a328:	f001 fc08 	bl	800bb3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d106      	bne.n	800a342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	3324      	adds	r3, #36	@ 0x24
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fc6d 	bl	800ac1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f7ff ff26 	bl	800a194 <prvUnlockQueue>
	}
 800a348:	bf00      	nop
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08e      	sub	sp, #56	@ 0x38
 800a354:	af04      	add	r7, sp, #16
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10b      	bne.n	800a37c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	623b      	str	r3, [r7, #32]
}
 800a376:	bf00      	nop
 800a378:	bf00      	nop
 800a37a:	e7fd      	b.n	800a378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10b      	bne.n	800a39a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	61fb      	str	r3, [r7, #28]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a39a:	23a8      	movs	r3, #168	@ 0xa8
 800a39c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	2ba8      	cmp	r3, #168	@ 0xa8
 800a3a2:	d00b      	beq.n	800a3bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	61bb      	str	r3, [r7, #24]
}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	e7fd      	b.n	800a3b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01e      	beq.n	800a402 <xTaskCreateStatic+0xb2>
 800a3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01b      	beq.n	800a402 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9303      	str	r3, [sp, #12]
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	9302      	str	r3, [sp, #8]
 800a3e4:	f107 0314 	add.w	r3, r7, #20
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	68b9      	ldr	r1, [r7, #8]
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 f851 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3fc:	f000 f8f6 	bl	800a5ec <prvAddNewTaskToReadyList>
 800a400:	e001      	b.n	800a406 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a406:	697b      	ldr	r3, [r7, #20]
	}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	@ 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a410:	b580      	push	{r7, lr}
 800a412:	b08c      	sub	sp, #48	@ 0x30
 800a414:	af04      	add	r7, sp, #16
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fc79 	bl	800bd1c <pvPortMalloc>
 800a42a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a432:	20a8      	movs	r0, #168	@ 0xa8
 800a434:	f001 fc72 	bl	800bd1c <pvPortMalloc>
 800a438:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	631a      	str	r2, [r3, #48]	@ 0x30
 800a446:	e005      	b.n	800a454 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f001 fd35 	bl	800beb8 <vPortFree>
 800a44e:	e001      	b.n	800a454 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a450:	2300      	movs	r3, #0
 800a452:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d017      	beq.n	800a48a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a462:	88fa      	ldrh	r2, [r7, #6]
 800a464:	2300      	movs	r3, #0
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	9302      	str	r3, [sp, #8]
 800a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f80f 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a47e:	69f8      	ldr	r0, [r7, #28]
 800a480:	f000 f8b4 	bl	800a5ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a484:	2301      	movs	r3, #1
 800a486:	61bb      	str	r3, [r7, #24]
 800a488:	e002      	b.n	800a490 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a490:	69bb      	ldr	r3, [r7, #24]
	}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	21a5      	movs	r1, #165	@ 0xa5
 800a4b6:	f001 fe3f 	bl	800c138 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617b      	str	r3, [r7, #20]
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	e7fd      	b.n	800a4f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01f      	beq.n	800a53c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	e012      	b.n	800a528 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	4413      	add	r3, r2
 800a508:	7819      	ldrb	r1, [r3, #0]
 800a50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	4413      	add	r3, r2
 800a510:	3334      	adds	r3, #52	@ 0x34
 800a512:	460a      	mov	r2, r1
 800a514:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d006      	beq.n	800a530 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	3301      	adds	r3, #1
 800a526:	61fb      	str	r3, [r7, #28]
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	2b0f      	cmp	r3, #15
 800a52c:	d9e9      	bls.n	800a502 <prvInitialiseNewTask+0x66>
 800a52e:	e000      	b.n	800a532 <prvInitialiseNewTask+0x96>
			{
				break;
 800a530:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a53a:	e003      	b.n	800a544 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a546:	2b37      	cmp	r3, #55	@ 0x37
 800a548:	d901      	bls.n	800a54e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a54a:	2337      	movs	r3, #55	@ 0x37
 800a54c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a552:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a558:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	2200      	movs	r2, #0
 800a55e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	3304      	adds	r3, #4
 800a564:	4618      	mov	r0, r3
 800a566:	f7ff f965 	bl	8009834 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	3318      	adds	r3, #24
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff f960 	bl	8009834 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a578:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a588:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	2200      	movs	r2, #0
 800a596:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	3354      	adds	r3, #84	@ 0x54
 800a59e:	224c      	movs	r2, #76	@ 0x4c
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 fdc8 	bl	800c138 <memset>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	4a0d      	ldr	r2, [pc, #52]	@ (800a5e0 <prvInitialiseNewTask+0x144>)
 800a5ac:	659a      	str	r2, [r3, #88]	@ 0x58
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a5e4 <prvInitialiseNewTask+0x148>)
 800a5b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5e8 <prvInitialiseNewTask+0x14c>)
 800a5b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	68f9      	ldr	r1, [r7, #12]
 800a5be:	69b8      	ldr	r0, [r7, #24]
 800a5c0:	f001 f95a 	bl	800b878 <pxPortInitialiseStack>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d6:	bf00      	nop
 800a5d8:	3720      	adds	r7, #32
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200050e8 	.word	0x200050e8
 800a5e4:	20005150 	.word	0x20005150
 800a5e8:	200051b8 	.word	0x200051b8

0800a5ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5f4:	f001 fa70 	bl	800bad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5f8:	4b2d      	ldr	r3, [pc, #180]	@ (800a6b0 <prvAddNewTaskToReadyList+0xc4>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a6b0 <prvAddNewTaskToReadyList+0xc4>)
 800a600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a602:	4b2c      	ldr	r3, [pc, #176]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d109      	bne.n	800a61e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a60a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc8>)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a610:	4b27      	ldr	r3, [pc, #156]	@ (800a6b0 <prvAddNewTaskToReadyList+0xc4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d110      	bne.n	800a63a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a618:	f000 fc2e 	bl	800ae78 <prvInitialiseTaskLists>
 800a61c:	e00d      	b.n	800a63a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a61e:	4b26      	ldr	r3, [pc, #152]	@ (800a6b8 <prvAddNewTaskToReadyList+0xcc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d109      	bne.n	800a63a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a626:	4b23      	ldr	r3, [pc, #140]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a630:	429a      	cmp	r2, r3
 800a632:	d802      	bhi.n	800a63a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a634:	4a1f      	ldr	r2, [pc, #124]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc8>)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a63a:	4b20      	ldr	r3, [pc, #128]	@ (800a6bc <prvAddNewTaskToReadyList+0xd0>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3301      	adds	r3, #1
 800a640:	4a1e      	ldr	r2, [pc, #120]	@ (800a6bc <prvAddNewTaskToReadyList+0xd0>)
 800a642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a644:	4b1d      	ldr	r3, [pc, #116]	@ (800a6bc <prvAddNewTaskToReadyList+0xd0>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a650:	4b1b      	ldr	r3, [pc, #108]	@ (800a6c0 <prvAddNewTaskToReadyList+0xd4>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d903      	bls.n	800a660 <prvAddNewTaskToReadyList+0x74>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a65c:	4a18      	ldr	r2, [pc, #96]	@ (800a6c0 <prvAddNewTaskToReadyList+0xd4>)
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4a15      	ldr	r2, [pc, #84]	@ (800a6c4 <prvAddNewTaskToReadyList+0xd8>)
 800a66e:	441a      	add	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3304      	adds	r3, #4
 800a674:	4619      	mov	r1, r3
 800a676:	4610      	mov	r0, r2
 800a678:	f7ff f8e9 	bl	800984e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a67c:	f001 fa5e 	bl	800bb3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a680:	4b0d      	ldr	r3, [pc, #52]	@ (800a6b8 <prvAddNewTaskToReadyList+0xcc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00e      	beq.n	800a6a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a688:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b4 <prvAddNewTaskToReadyList+0xc8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	429a      	cmp	r2, r3
 800a694:	d207      	bcs.n	800a6a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a696:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c8 <prvAddNewTaskToReadyList+0xdc>)
 800a698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20001368 	.word	0x20001368
 800a6b4:	20000e94 	.word	0x20000e94
 800a6b8:	20001374 	.word	0x20001374
 800a6bc:	20001384 	.word	0x20001384
 800a6c0:	20001370 	.word	0x20001370
 800a6c4:	20000e98 	.word	0x20000e98
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d018      	beq.n	800a710 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6de:	4b14      	ldr	r3, [pc, #80]	@ (800a730 <vTaskDelay+0x64>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00b      	beq.n	800a6fe <vTaskDelay+0x32>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60bb      	str	r3, [r7, #8]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6fe:	f000 f88b 	bl	800a818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a702:	2100      	movs	r1, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fd09 	bl	800b11c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a70a:	f000 f893 	bl	800a834 <xTaskResumeAll>
 800a70e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d107      	bne.n	800a726 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a716:	4b07      	ldr	r3, [pc, #28]	@ (800a734 <vTaskDelay+0x68>)
 800a718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001390 	.word	0x20001390
 800a734:	e000ed04 	.word	0xe000ed04

0800a738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08a      	sub	sp, #40	@ 0x28
 800a73c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a73e:	2300      	movs	r3, #0
 800a740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a742:	2300      	movs	r3, #0
 800a744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a746:	463a      	mov	r2, r7
 800a748:	1d39      	adds	r1, r7, #4
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff f81c 	bl	800978c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	9202      	str	r2, [sp, #8]
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	2300      	movs	r3, #0
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	2300      	movs	r3, #0
 800a764:	460a      	mov	r2, r1
 800a766:	4924      	ldr	r1, [pc, #144]	@ (800a7f8 <vTaskStartScheduler+0xc0>)
 800a768:	4824      	ldr	r0, [pc, #144]	@ (800a7fc <vTaskStartScheduler+0xc4>)
 800a76a:	f7ff fdf1 	bl	800a350 <xTaskCreateStatic>
 800a76e:	4603      	mov	r3, r0
 800a770:	4a23      	ldr	r2, [pc, #140]	@ (800a800 <vTaskStartScheduler+0xc8>)
 800a772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a774:	4b22      	ldr	r3, [pc, #136]	@ (800a800 <vTaskStartScheduler+0xc8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a77c:	2301      	movs	r3, #1
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	e001      	b.n	800a786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a782:	2300      	movs	r3, #0
 800a784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d102      	bne.n	800a792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a78c:	f000 fd1a 	bl	800b1c4 <xTimerCreateTimerTask>
 800a790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d11b      	bne.n	800a7d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	613b      	str	r3, [r7, #16]
}
 800a7aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7ac:	4b15      	ldr	r3, [pc, #84]	@ (800a804 <vTaskStartScheduler+0xcc>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	3354      	adds	r3, #84	@ 0x54
 800a7b2:	4a15      	ldr	r2, [pc, #84]	@ (800a808 <vTaskStartScheduler+0xd0>)
 800a7b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7b6:	4b15      	ldr	r3, [pc, #84]	@ (800a80c <vTaskStartScheduler+0xd4>)
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7be:	4b14      	ldr	r3, [pc, #80]	@ (800a810 <vTaskStartScheduler+0xd8>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7c4:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <vTaskStartScheduler+0xdc>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7ca:	f001 f8e1 	bl	800b990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7ce:	e00f      	b.n	800a7f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d6:	d10b      	bne.n	800a7f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	60fb      	str	r3, [r7, #12]
}
 800a7ea:	bf00      	nop
 800a7ec:	bf00      	nop
 800a7ee:	e7fd      	b.n	800a7ec <vTaskStartScheduler+0xb4>
}
 800a7f0:	bf00      	nop
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	0800cb7c 	.word	0x0800cb7c
 800a7fc:	0800ae49 	.word	0x0800ae49
 800a800:	2000138c 	.word	0x2000138c
 800a804:	20000e94 	.word	0x20000e94
 800a808:	20000014 	.word	0x20000014
 800a80c:	20001388 	.word	0x20001388
 800a810:	20001374 	.word	0x20001374
 800a814:	2000136c 	.word	0x2000136c

0800a818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a81c:	4b04      	ldr	r3, [pc, #16]	@ (800a830 <vTaskSuspendAll+0x18>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3301      	adds	r3, #1
 800a822:	4a03      	ldr	r2, [pc, #12]	@ (800a830 <vTaskSuspendAll+0x18>)
 800a824:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a826:	bf00      	nop
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20001390 	.word	0x20001390

0800a834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a83e:	2300      	movs	r3, #0
 800a840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a842:	4b42      	ldr	r3, [pc, #264]	@ (800a94c <xTaskResumeAll+0x118>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10b      	bne.n	800a862 <xTaskResumeAll+0x2e>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	603b      	str	r3, [r7, #0]
}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	e7fd      	b.n	800a85e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a862:	f001 f939 	bl	800bad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a866:	4b39      	ldr	r3, [pc, #228]	@ (800a94c <xTaskResumeAll+0x118>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a37      	ldr	r2, [pc, #220]	@ (800a94c <xTaskResumeAll+0x118>)
 800a86e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a870:	4b36      	ldr	r3, [pc, #216]	@ (800a94c <xTaskResumeAll+0x118>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d162      	bne.n	800a93e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a878:	4b35      	ldr	r3, [pc, #212]	@ (800a950 <xTaskResumeAll+0x11c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d05e      	beq.n	800a93e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a880:	e02f      	b.n	800a8e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a882:	4b34      	ldr	r3, [pc, #208]	@ (800a954 <xTaskResumeAll+0x120>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3318      	adds	r3, #24
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff f83a 	bl	8009908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3304      	adds	r3, #4
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff f835 	bl	8009908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a958 <xTaskResumeAll+0x124>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d903      	bls.n	800a8b2 <xTaskResumeAll+0x7e>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a958 <xTaskResumeAll+0x124>)
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4a27      	ldr	r2, [pc, #156]	@ (800a95c <xTaskResumeAll+0x128>)
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7fe ffc0 	bl	800984e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	4b23      	ldr	r3, [pc, #140]	@ (800a960 <xTaskResumeAll+0x12c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a8dc:	4b21      	ldr	r3, [pc, #132]	@ (800a964 <xTaskResumeAll+0x130>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a954 <xTaskResumeAll+0x120>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1cb      	bne.n	800a882 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8f0:	f000 fb66 	bl	800afc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a968 <xTaskResumeAll+0x134>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d010      	beq.n	800a922 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a900:	f000 f846 	bl	800a990 <xTaskIncrementTick>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a90a:	4b16      	ldr	r3, [pc, #88]	@ (800a964 <xTaskResumeAll+0x130>)
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3b01      	subs	r3, #1
 800a914:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f1      	bne.n	800a900 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a91c:	4b12      	ldr	r3, [pc, #72]	@ (800a968 <xTaskResumeAll+0x134>)
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a922:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <xTaskResumeAll+0x130>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a92a:	2301      	movs	r3, #1
 800a92c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a92e:	4b0f      	ldr	r3, [pc, #60]	@ (800a96c <xTaskResumeAll+0x138>)
 800a930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a93e:	f001 f8fd 	bl	800bb3c <vPortExitCritical>

	return xAlreadyYielded;
 800a942:	68bb      	ldr	r3, [r7, #8]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20001390 	.word	0x20001390
 800a950:	20001368 	.word	0x20001368
 800a954:	20001328 	.word	0x20001328
 800a958:	20001370 	.word	0x20001370
 800a95c:	20000e98 	.word	0x20000e98
 800a960:	20000e94 	.word	0x20000e94
 800a964:	2000137c 	.word	0x2000137c
 800a968:	20001378 	.word	0x20001378
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a976:	4b05      	ldr	r3, [pc, #20]	@ (800a98c <xTaskGetTickCount+0x1c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a97c:	687b      	ldr	r3, [r7, #4]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	2000136c 	.word	0x2000136c

0800a990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a996:	2300      	movs	r3, #0
 800a998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a99a:	4b4f      	ldr	r3, [pc, #316]	@ (800aad8 <xTaskIncrementTick+0x148>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f040 8090 	bne.w	800aac4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9a4:	4b4d      	ldr	r3, [pc, #308]	@ (800aadc <xTaskIncrementTick+0x14c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9ac:	4a4b      	ldr	r2, [pc, #300]	@ (800aadc <xTaskIncrementTick+0x14c>)
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d121      	bne.n	800a9fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9b8:	4b49      	ldr	r3, [pc, #292]	@ (800aae0 <xTaskIncrementTick+0x150>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00b      	beq.n	800a9da <xTaskIncrementTick+0x4a>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	603b      	str	r3, [r7, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xTaskIncrementTick+0x46>
 800a9da:	4b41      	ldr	r3, [pc, #260]	@ (800aae0 <xTaskIncrementTick+0x150>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	4b40      	ldr	r3, [pc, #256]	@ (800aae4 <xTaskIncrementTick+0x154>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a3e      	ldr	r2, [pc, #248]	@ (800aae0 <xTaskIncrementTick+0x150>)
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	4a3e      	ldr	r2, [pc, #248]	@ (800aae4 <xTaskIncrementTick+0x154>)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	4b3e      	ldr	r3, [pc, #248]	@ (800aae8 <xTaskIncrementTick+0x158>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	4a3c      	ldr	r2, [pc, #240]	@ (800aae8 <xTaskIncrementTick+0x158>)
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	f000 fae2 	bl	800afc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9fc:	4b3b      	ldr	r3, [pc, #236]	@ (800aaec <xTaskIncrementTick+0x15c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d349      	bcc.n	800aa9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa06:	4b36      	ldr	r3, [pc, #216]	@ (800aae0 <xTaskIncrementTick+0x150>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d104      	bne.n	800aa1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa10:	4b36      	ldr	r3, [pc, #216]	@ (800aaec <xTaskIncrementTick+0x15c>)
 800aa12:	f04f 32ff 	mov.w	r2, #4294967295
 800aa16:	601a      	str	r2, [r3, #0]
					break;
 800aa18:	e03f      	b.n	800aa9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1a:	4b31      	ldr	r3, [pc, #196]	@ (800aae0 <xTaskIncrementTick+0x150>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d203      	bcs.n	800aa3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa32:	4a2e      	ldr	r2, [pc, #184]	@ (800aaec <xTaskIncrementTick+0x15c>)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa38:	e02f      	b.n	800aa9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe ff62 	bl	8009908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	3318      	adds	r3, #24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe ff59 	bl	8009908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa5a:	4b25      	ldr	r3, [pc, #148]	@ (800aaf0 <xTaskIncrementTick+0x160>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d903      	bls.n	800aa6a <xTaskIncrementTick+0xda>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa66:	4a22      	ldr	r2, [pc, #136]	@ (800aaf0 <xTaskIncrementTick+0x160>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4a1f      	ldr	r2, [pc, #124]	@ (800aaf4 <xTaskIncrementTick+0x164>)
 800aa78:	441a      	add	r2, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4610      	mov	r0, r2
 800aa82:	f7fe fee4 	bl	800984e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa8a:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf8 <xTaskIncrementTick+0x168>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d3b8      	bcc.n	800aa06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aa94:	2301      	movs	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa98:	e7b5      	b.n	800aa06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa9a:	4b17      	ldr	r3, [pc, #92]	@ (800aaf8 <xTaskIncrementTick+0x168>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa0:	4914      	ldr	r1, [pc, #80]	@ (800aaf4 <xTaskIncrementTick+0x164>)
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	440b      	add	r3, r1
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d901      	bls.n	800aab6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800aab2:	2301      	movs	r3, #1
 800aab4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aab6:	4b11      	ldr	r3, [pc, #68]	@ (800aafc <xTaskIncrementTick+0x16c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aabe:	2301      	movs	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]
 800aac2:	e004      	b.n	800aace <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aac4:	4b0e      	ldr	r3, [pc, #56]	@ (800ab00 <xTaskIncrementTick+0x170>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	4a0d      	ldr	r2, [pc, #52]	@ (800ab00 <xTaskIncrementTick+0x170>)
 800aacc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aace:	697b      	ldr	r3, [r7, #20]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20001390 	.word	0x20001390
 800aadc:	2000136c 	.word	0x2000136c
 800aae0:	20001320 	.word	0x20001320
 800aae4:	20001324 	.word	0x20001324
 800aae8:	20001380 	.word	0x20001380
 800aaec:	20001388 	.word	0x20001388
 800aaf0:	20001370 	.word	0x20001370
 800aaf4:	20000e98 	.word	0x20000e98
 800aaf8:	20000e94 	.word	0x20000e94
 800aafc:	2000137c 	.word	0x2000137c
 800ab00:	20001378 	.word	0x20001378

0800ab04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab0a:	4b2b      	ldr	r3, [pc, #172]	@ (800abb8 <vTaskSwitchContext+0xb4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab12:	4b2a      	ldr	r3, [pc, #168]	@ (800abbc <vTaskSwitchContext+0xb8>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab18:	e047      	b.n	800abaa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ab1a:	4b28      	ldr	r3, [pc, #160]	@ (800abbc <vTaskSwitchContext+0xb8>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab20:	4b27      	ldr	r3, [pc, #156]	@ (800abc0 <vTaskSwitchContext+0xbc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e011      	b.n	800ab4c <vTaskSwitchContext+0x48>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <vTaskSwitchContext+0x42>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	607b      	str	r3, [r7, #4]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <vTaskSwitchContext+0x3e>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	491d      	ldr	r1, [pc, #116]	@ (800abc4 <vTaskSwitchContext+0xc0>)
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4613      	mov	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	440b      	add	r3, r1
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0e3      	beq.n	800ab28 <vTaskSwitchContext+0x24>
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4a16      	ldr	r2, [pc, #88]	@ (800abc4 <vTaskSwitchContext+0xc0>)
 800ab6c:	4413      	add	r3, r2
 800ab6e:	60bb      	str	r3, [r7, #8]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	605a      	str	r2, [r3, #4]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	3308      	adds	r3, #8
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d104      	bne.n	800ab90 <vTaskSwitchContext+0x8c>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	605a      	str	r2, [r3, #4]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	4a0c      	ldr	r2, [pc, #48]	@ (800abc8 <vTaskSwitchContext+0xc4>)
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	4a09      	ldr	r2, [pc, #36]	@ (800abc0 <vTaskSwitchContext+0xbc>)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aba0:	4b09      	ldr	r3, [pc, #36]	@ (800abc8 <vTaskSwitchContext+0xc4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3354      	adds	r3, #84	@ 0x54
 800aba6:	4a09      	ldr	r2, [pc, #36]	@ (800abcc <vTaskSwitchContext+0xc8>)
 800aba8:	6013      	str	r3, [r2, #0]
}
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20001390 	.word	0x20001390
 800abbc:	2000137c 	.word	0x2000137c
 800abc0:	20001370 	.word	0x20001370
 800abc4:	20000e98 	.word	0x20000e98
 800abc8:	20000e94 	.word	0x20000e94
 800abcc:	20000014 	.word	0x20000014

0800abd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10b      	bne.n	800abf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	60fb      	str	r3, [r7, #12]
}
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	e7fd      	b.n	800abf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abf8:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <vTaskPlaceOnEventList+0x48>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3318      	adds	r3, #24
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7fe fe48 	bl	8009896 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac06:	2101      	movs	r1, #1
 800ac08:	6838      	ldr	r0, [r7, #0]
 800ac0a:	f000 fa87 	bl	800b11c <prvAddCurrentTaskToDelayedList>
}
 800ac0e:	bf00      	nop
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20000e94 	.word	0x20000e94

0800ac1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b086      	sub	sp, #24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10b      	bne.n	800ac46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	617b      	str	r3, [r7, #20]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac46:	4b0a      	ldr	r3, [pc, #40]	@ (800ac70 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3318      	adds	r3, #24
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7fe fdfd 	bl	800984e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	68b8      	ldr	r0, [r7, #8]
 800ac64:	f000 fa5a 	bl	800b11c <prvAddCurrentTaskToDelayedList>
	}
 800ac68:	bf00      	nop
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000e94 	.word	0x20000e94

0800ac74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10b      	bne.n	800aca2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60fb      	str	r3, [r7, #12]
}
 800ac9c:	bf00      	nop
 800ac9e:	bf00      	nop
 800aca0:	e7fd      	b.n	800ac9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	3318      	adds	r3, #24
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fe2e 	bl	8009908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acac:	4b1d      	ldr	r3, [pc, #116]	@ (800ad24 <xTaskRemoveFromEventList+0xb0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11d      	bne.n	800acf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fe25 	bl	8009908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acc2:	4b19      	ldr	r3, [pc, #100]	@ (800ad28 <xTaskRemoveFromEventList+0xb4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d903      	bls.n	800acd2 <xTaskRemoveFromEventList+0x5e>
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	4a16      	ldr	r2, [pc, #88]	@ (800ad28 <xTaskRemoveFromEventList+0xb4>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a13      	ldr	r2, [pc, #76]	@ (800ad2c <xTaskRemoveFromEventList+0xb8>)
 800ace0:	441a      	add	r2, r3
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fe fdb0 	bl	800984e <vListInsertEnd>
 800acee:	e005      	b.n	800acfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	3318      	adds	r3, #24
 800acf4:	4619      	mov	r1, r3
 800acf6:	480e      	ldr	r0, [pc, #56]	@ (800ad30 <xTaskRemoveFromEventList+0xbc>)
 800acf8:	f7fe fda9 	bl	800984e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad00:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <xTaskRemoveFromEventList+0xc0>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d905      	bls.n	800ad16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <xTaskRemoveFromEventList+0xc4>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e001      	b.n	800ad1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad1a:	697b      	ldr	r3, [r7, #20]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20001390 	.word	0x20001390
 800ad28:	20001370 	.word	0x20001370
 800ad2c:	20000e98 	.word	0x20000e98
 800ad30:	20001328 	.word	0x20001328
 800ad34:	20000e94 	.word	0x20000e94
 800ad38:	2000137c 	.word	0x2000137c

0800ad3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad44:	4b06      	ldr	r3, [pc, #24]	@ (800ad60 <vTaskInternalSetTimeOutState+0x24>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad4c:	4b05      	ldr	r3, [pc, #20]	@ (800ad64 <vTaskInternalSetTimeOutState+0x28>)
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	605a      	str	r2, [r3, #4]
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	20001380 	.word	0x20001380
 800ad64:	2000136c 	.word	0x2000136c

0800ad68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	613b      	str	r3, [r7, #16]
}
 800ad8a:	bf00      	nop
 800ad8c:	bf00      	nop
 800ad8e:	e7fd      	b.n	800ad8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	60fb      	str	r3, [r7, #12]
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800adae:	f000 fe93 	bl	800bad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800adb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae28 <xTaskCheckForTimeOut+0xc0>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adca:	d102      	bne.n	800add2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]
 800add0:	e023      	b.n	800ae1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	4b15      	ldr	r3, [pc, #84]	@ (800ae2c <xTaskCheckForTimeOut+0xc4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d007      	beq.n	800adee <xTaskCheckForTimeOut+0x86>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d302      	bcc.n	800adee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ade8:	2301      	movs	r3, #1
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	e015      	b.n	800ae1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d20b      	bcs.n	800ae10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff ff99 	bl	800ad3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61fb      	str	r3, [r7, #28]
 800ae0e:	e004      	b.n	800ae1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae16:	2301      	movs	r3, #1
 800ae18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae1a:	f000 fe8f 	bl	800bb3c <vPortExitCritical>

	return xReturn;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3720      	adds	r7, #32
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	2000136c 	.word	0x2000136c
 800ae2c:	20001380 	.word	0x20001380

0800ae30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae34:	4b03      	ldr	r3, [pc, #12]	@ (800ae44 <vTaskMissedYield+0x14>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	601a      	str	r2, [r3, #0]
}
 800ae3a:	bf00      	nop
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	2000137c 	.word	0x2000137c

0800ae48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae50:	f000 f852 	bl	800aef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae54:	4b06      	ldr	r3, [pc, #24]	@ (800ae70 <prvIdleTask+0x28>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d9f9      	bls.n	800ae50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae5c:	4b05      	ldr	r3, [pc, #20]	@ (800ae74 <prvIdleTask+0x2c>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae6c:	e7f0      	b.n	800ae50 <prvIdleTask+0x8>
 800ae6e:	bf00      	nop
 800ae70:	20000e98 	.word	0x20000e98
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae7e:	2300      	movs	r3, #0
 800ae80:	607b      	str	r3, [r7, #4]
 800ae82:	e00c      	b.n	800ae9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4a12      	ldr	r2, [pc, #72]	@ (800aed8 <prvInitialiseTaskLists+0x60>)
 800ae90:	4413      	add	r3, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe fcae 	bl	80097f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	607b      	str	r3, [r7, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b37      	cmp	r3, #55	@ 0x37
 800aea2:	d9ef      	bls.n	800ae84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aea4:	480d      	ldr	r0, [pc, #52]	@ (800aedc <prvInitialiseTaskLists+0x64>)
 800aea6:	f7fe fca5 	bl	80097f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aeaa:	480d      	ldr	r0, [pc, #52]	@ (800aee0 <prvInitialiseTaskLists+0x68>)
 800aeac:	f7fe fca2 	bl	80097f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aeb0:	480c      	ldr	r0, [pc, #48]	@ (800aee4 <prvInitialiseTaskLists+0x6c>)
 800aeb2:	f7fe fc9f 	bl	80097f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aeb6:	480c      	ldr	r0, [pc, #48]	@ (800aee8 <prvInitialiseTaskLists+0x70>)
 800aeb8:	f7fe fc9c 	bl	80097f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aebc:	480b      	ldr	r0, [pc, #44]	@ (800aeec <prvInitialiseTaskLists+0x74>)
 800aebe:	f7fe fc99 	bl	80097f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aec2:	4b0b      	ldr	r3, [pc, #44]	@ (800aef0 <prvInitialiseTaskLists+0x78>)
 800aec4:	4a05      	ldr	r2, [pc, #20]	@ (800aedc <prvInitialiseTaskLists+0x64>)
 800aec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aec8:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <prvInitialiseTaskLists+0x7c>)
 800aeca:	4a05      	ldr	r2, [pc, #20]	@ (800aee0 <prvInitialiseTaskLists+0x68>)
 800aecc:	601a      	str	r2, [r3, #0]
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000e98 	.word	0x20000e98
 800aedc:	200012f8 	.word	0x200012f8
 800aee0:	2000130c 	.word	0x2000130c
 800aee4:	20001328 	.word	0x20001328
 800aee8:	2000133c 	.word	0x2000133c
 800aeec:	20001354 	.word	0x20001354
 800aef0:	20001320 	.word	0x20001320
 800aef4:	20001324 	.word	0x20001324

0800aef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aefe:	e019      	b.n	800af34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af00:	f000 fdea 	bl	800bad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af04:	4b10      	ldr	r3, [pc, #64]	@ (800af48 <prvCheckTasksWaitingTermination+0x50>)
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3304      	adds	r3, #4
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fcf9 	bl	8009908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af16:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <prvCheckTasksWaitingTermination+0x54>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	4a0b      	ldr	r2, [pc, #44]	@ (800af4c <prvCheckTasksWaitingTermination+0x54>)
 800af1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af20:	4b0b      	ldr	r3, [pc, #44]	@ (800af50 <prvCheckTasksWaitingTermination+0x58>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3b01      	subs	r3, #1
 800af26:	4a0a      	ldr	r2, [pc, #40]	@ (800af50 <prvCheckTasksWaitingTermination+0x58>)
 800af28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af2a:	f000 fe07 	bl	800bb3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f810 	bl	800af54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af34:	4b06      	ldr	r3, [pc, #24]	@ (800af50 <prvCheckTasksWaitingTermination+0x58>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e1      	bne.n	800af00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	2000133c 	.word	0x2000133c
 800af4c:	20001368 	.word	0x20001368
 800af50:	20001350 	.word	0x20001350

0800af54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3354      	adds	r3, #84	@ 0x54
 800af60:	4618      	mov	r0, r3
 800af62:	f001 f8f1 	bl	800c148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d108      	bne.n	800af82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af74:	4618      	mov	r0, r3
 800af76:	f000 ff9f 	bl	800beb8 <vPortFree>
				vPortFree( pxTCB );
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 ff9c 	bl	800beb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af80:	e019      	b.n	800afb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d103      	bne.n	800af94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 ff93 	bl	800beb8 <vPortFree>
	}
 800af92:	e010      	b.n	800afb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d00b      	beq.n	800afb6 <prvDeleteTCB+0x62>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	60fb      	str	r3, [r7, #12]
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	e7fd      	b.n	800afb2 <prvDeleteTCB+0x5e>
	}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc6:	4b0c      	ldr	r3, [pc, #48]	@ (800aff8 <prvResetNextTaskUnblockTime+0x38>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800afd0:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <prvResetNextTaskUnblockTime+0x3c>)
 800afd2:	f04f 32ff 	mov.w	r2, #4294967295
 800afd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800afd8:	e008      	b.n	800afec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afda:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <prvResetNextTaskUnblockTime+0x38>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4a04      	ldr	r2, [pc, #16]	@ (800affc <prvResetNextTaskUnblockTime+0x3c>)
 800afea:	6013      	str	r3, [r2, #0]
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	20001320 	.word	0x20001320
 800affc:	20001388 	.word	0x20001388

0800b000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b006:	4b0b      	ldr	r3, [pc, #44]	@ (800b034 <xTaskGetSchedulerState+0x34>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b00e:	2301      	movs	r3, #1
 800b010:	607b      	str	r3, [r7, #4]
 800b012:	e008      	b.n	800b026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b014:	4b08      	ldr	r3, [pc, #32]	@ (800b038 <xTaskGetSchedulerState+0x38>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b01c:	2302      	movs	r3, #2
 800b01e:	607b      	str	r3, [r7, #4]
 800b020:	e001      	b.n	800b026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b022:	2300      	movs	r3, #0
 800b024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b026:	687b      	ldr	r3, [r7, #4]
	}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	20001374 	.word	0x20001374
 800b038:	20001390 	.word	0x20001390

0800b03c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b048:	2300      	movs	r3, #0
 800b04a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d058      	beq.n	800b104 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b052:	4b2f      	ldr	r3, [pc, #188]	@ (800b110 <xTaskPriorityDisinherit+0xd4>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d00b      	beq.n	800b074 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60fb      	str	r3, [r7, #12]
}
 800b06e:	bf00      	nop
 800b070:	bf00      	nop
 800b072:	e7fd      	b.n	800b070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	60bb      	str	r3, [r7, #8]
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	e7fd      	b.n	800b090 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b098:	1e5a      	subs	r2, r3, #1
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d02c      	beq.n	800b104 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d128      	bne.n	800b104 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe fc26 	bl	8009908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b114 <xTaskPriorityDisinherit+0xd8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d903      	bls.n	800b0e4 <xTaskPriorityDisinherit+0xa8>
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b114 <xTaskPriorityDisinherit+0xd8>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4a09      	ldr	r2, [pc, #36]	@ (800b118 <xTaskPriorityDisinherit+0xdc>)
 800b0f2:	441a      	add	r2, r3
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fe fba7 	bl	800984e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b104:	697b      	ldr	r3, [r7, #20]
	}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000e94 	.word	0x20000e94
 800b114:	20001370 	.word	0x20001370
 800b118:	20000e98 	.word	0x20000e98

0800b11c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b126:	4b21      	ldr	r3, [pc, #132]	@ (800b1ac <prvAddCurrentTaskToDelayedList+0x90>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b12c:	4b20      	ldr	r3, [pc, #128]	@ (800b1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3304      	adds	r3, #4
 800b132:	4618      	mov	r0, r3
 800b134:	f7fe fbe8 	bl	8009908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13e:	d10a      	bne.n	800b156 <prvAddCurrentTaskToDelayedList+0x3a>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d007      	beq.n	800b156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b146:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4819      	ldr	r0, [pc, #100]	@ (800b1b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b150:	f7fe fb7d 	bl	800984e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b154:	e026      	b.n	800b1a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4413      	add	r3, r2
 800b15c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b15e:	4b14      	ldr	r3, [pc, #80]	@ (800b1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d209      	bcs.n	800b182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b16e:	4b12      	ldr	r3, [pc, #72]	@ (800b1b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b0f      	ldr	r3, [pc, #60]	@ (800b1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3304      	adds	r3, #4
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7fe fb8b 	bl	8009896 <vListInsert>
}
 800b180:	e010      	b.n	800b1a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b182:	4b0e      	ldr	r3, [pc, #56]	@ (800b1bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7fe fb81 	bl	8009896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b194:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d202      	bcs.n	800b1a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b19e:	4a08      	ldr	r2, [pc, #32]	@ (800b1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	6013      	str	r3, [r2, #0]
}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	2000136c 	.word	0x2000136c
 800b1b0:	20000e94 	.word	0x20000e94
 800b1b4:	20001354 	.word	0x20001354
 800b1b8:	20001324 	.word	0x20001324
 800b1bc:	20001320 	.word	0x20001320
 800b1c0:	20001388 	.word	0x20001388

0800b1c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08a      	sub	sp, #40	@ 0x28
 800b1c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b1ce:	f000 fb13 	bl	800b7f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b1d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b248 <xTimerCreateTimerTask+0x84>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d021      	beq.n	800b21e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b1e2:	1d3a      	adds	r2, r7, #4
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	f107 030c 	add.w	r3, r7, #12
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fae7 	bl	80097c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	9202      	str	r2, [sp, #8]
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	2300      	movs	r3, #0
 800b202:	460a      	mov	r2, r1
 800b204:	4911      	ldr	r1, [pc, #68]	@ (800b24c <xTimerCreateTimerTask+0x88>)
 800b206:	4812      	ldr	r0, [pc, #72]	@ (800b250 <xTimerCreateTimerTask+0x8c>)
 800b208:	f7ff f8a2 	bl	800a350 <xTaskCreateStatic>
 800b20c:	4603      	mov	r3, r0
 800b20e:	4a11      	ldr	r2, [pc, #68]	@ (800b254 <xTimerCreateTimerTask+0x90>)
 800b210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b212:	4b10      	ldr	r3, [pc, #64]	@ (800b254 <xTimerCreateTimerTask+0x90>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b21a:	2301      	movs	r3, #1
 800b21c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10b      	bne.n	800b23c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	613b      	str	r3, [r7, #16]
}
 800b236:	bf00      	nop
 800b238:	bf00      	nop
 800b23a:	e7fd      	b.n	800b238 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b23c:	697b      	ldr	r3, [r7, #20]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	200013c4 	.word	0x200013c4
 800b24c:	0800cb84 	.word	0x0800cb84
 800b250:	0800b391 	.word	0x0800b391
 800b254:	200013c8 	.word	0x200013c8

0800b258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	@ 0x28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
 800b264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b266:	2300      	movs	r3, #0
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10b      	bne.n	800b288 <xTimerGenericCommand+0x30>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	623b      	str	r3, [r7, #32]
}
 800b282:	bf00      	nop
 800b284:	bf00      	nop
 800b286:	e7fd      	b.n	800b284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b288:	4b19      	ldr	r3, [pc, #100]	@ (800b2f0 <xTimerGenericCommand+0x98>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02a      	beq.n	800b2e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b05      	cmp	r3, #5
 800b2a0:	dc18      	bgt.n	800b2d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2a2:	f7ff fead 	bl	800b000 <xTaskGetSchedulerState>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d109      	bne.n	800b2c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2ac:	4b10      	ldr	r3, [pc, #64]	@ (800b2f0 <xTimerGenericCommand+0x98>)
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	f107 0110 	add.w	r1, r7, #16
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2b8:	f7fe fc5a 	bl	8009b70 <xQueueGenericSend>
 800b2bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b2be:	e012      	b.n	800b2e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f0 <xTimerGenericCommand+0x98>)
 800b2c2:	6818      	ldr	r0, [r3, #0]
 800b2c4:	f107 0110 	add.w	r1, r7, #16
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f7fe fc50 	bl	8009b70 <xQueueGenericSend>
 800b2d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b2d2:	e008      	b.n	800b2e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b2d4:	4b06      	ldr	r3, [pc, #24]	@ (800b2f0 <xTimerGenericCommand+0x98>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	f107 0110 	add.w	r1, r7, #16
 800b2dc:	2300      	movs	r3, #0
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	f7fe fd48 	bl	8009d74 <xQueueGenericSendFromISR>
 800b2e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3728      	adds	r7, #40	@ 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	200013c4 	.word	0x200013c4

0800b2f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af02      	add	r7, sp, #8
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2fe:	4b23      	ldr	r3, [pc, #140]	@ (800b38c <prvProcessExpiredTimer+0x98>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7fe fafb 	bl	8009908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d023      	beq.n	800b368 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	699a      	ldr	r2, [r3, #24]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	18d1      	adds	r1, r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	6978      	ldr	r0, [r7, #20]
 800b32e:	f000 f8d5 	bl	800b4dc <prvInsertTimerInActiveList>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d020      	beq.n	800b37a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b338:	2300      	movs	r3, #0
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	2300      	movs	r3, #0
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	2100      	movs	r1, #0
 800b342:	6978      	ldr	r0, [r7, #20]
 800b344:	f7ff ff88 	bl	800b258 <xTimerGenericCommand>
 800b348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d114      	bne.n	800b37a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b36e:	f023 0301 	bic.w	r3, r3, #1
 800b372:	b2da      	uxtb	r2, r3
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	6978      	ldr	r0, [r7, #20]
 800b380:	4798      	blx	r3
}
 800b382:	bf00      	nop
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	200013bc 	.word	0x200013bc

0800b390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b398:	f107 0308 	add.w	r3, r7, #8
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f859 	bl	800b454 <prvGetNextExpireTime>
 800b3a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 f805 	bl	800b3b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b3ae:	f000 f8d7 	bl	800b560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3b2:	bf00      	nop
 800b3b4:	e7f0      	b.n	800b398 <prvTimerTask+0x8>
	...

0800b3b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b3c2:	f7ff fa29 	bl	800a818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3c6:	f107 0308 	add.w	r3, r7, #8
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f866 	bl	800b49c <prvSampleTimeNow>
 800b3d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d130      	bne.n	800b43a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <prvProcessTimerOrBlockTask+0x3c>
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d806      	bhi.n	800b3f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b3e6:	f7ff fa25 	bl	800a834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3ea:	68f9      	ldr	r1, [r7, #12]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff ff81 	bl	800b2f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b3f2:	e024      	b.n	800b43e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b3fa:	4b13      	ldr	r3, [pc, #76]	@ (800b448 <prvProcessTimerOrBlockTask+0x90>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <prvProcessTimerOrBlockTask+0x50>
 800b404:	2301      	movs	r3, #1
 800b406:	e000      	b.n	800b40a <prvProcessTimerOrBlockTask+0x52>
 800b408:	2300      	movs	r3, #0
 800b40a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b40c:	4b0f      	ldr	r3, [pc, #60]	@ (800b44c <prvProcessTimerOrBlockTask+0x94>)
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	4619      	mov	r1, r3
 800b41a:	f7fe ff65 	bl	800a2e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b41e:	f7ff fa09 	bl	800a834 <xTaskResumeAll>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b428:	4b09      	ldr	r3, [pc, #36]	@ (800b450 <prvProcessTimerOrBlockTask+0x98>)
 800b42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	f3bf 8f6f 	isb	sy
}
 800b438:	e001      	b.n	800b43e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b43a:	f7ff f9fb 	bl	800a834 <xTaskResumeAll>
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200013c0 	.word	0x200013c0
 800b44c:	200013c4 	.word	0x200013c4
 800b450:	e000ed04 	.word	0xe000ed04

0800b454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b45c:	4b0e      	ldr	r3, [pc, #56]	@ (800b498 <prvGetNextExpireTime+0x44>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <prvGetNextExpireTime+0x16>
 800b466:	2201      	movs	r2, #1
 800b468:	e000      	b.n	800b46c <prvGetNextExpireTime+0x18>
 800b46a:	2200      	movs	r2, #0
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d105      	bne.n	800b484 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b478:	4b07      	ldr	r3, [pc, #28]	@ (800b498 <prvGetNextExpireTime+0x44>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e001      	b.n	800b488 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	200013bc 	.word	0x200013bc

0800b49c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b4a4:	f7ff fa64 	bl	800a970 <xTaskGetTickCount>
 800b4a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b4aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d8 <prvSampleTimeNow+0x3c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d205      	bcs.n	800b4c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b4b4:	f000 f93a 	bl	800b72c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e002      	b.n	800b4c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b4c6:	4a04      	ldr	r2, [pc, #16]	@ (800b4d8 <prvSampleTimeNow+0x3c>)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200013cc 	.word	0x200013cc

0800b4dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d812      	bhi.n	800b528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d302      	bcc.n	800b516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e01b      	b.n	800b54e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b516:	4b10      	ldr	r3, [pc, #64]	@ (800b558 <prvInsertTimerInActiveList+0x7c>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3304      	adds	r3, #4
 800b51e:	4619      	mov	r1, r3
 800b520:	4610      	mov	r0, r2
 800b522:	f7fe f9b8 	bl	8009896 <vListInsert>
 800b526:	e012      	b.n	800b54e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d206      	bcs.n	800b53e <prvInsertTimerInActiveList+0x62>
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d302      	bcc.n	800b53e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b538:	2301      	movs	r3, #1
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e007      	b.n	800b54e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b53e:	4b07      	ldr	r3, [pc, #28]	@ (800b55c <prvInsertTimerInActiveList+0x80>)
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3304      	adds	r3, #4
 800b546:	4619      	mov	r1, r3
 800b548:	4610      	mov	r0, r2
 800b54a:	f7fe f9a4 	bl	8009896 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b54e:	697b      	ldr	r3, [r7, #20]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200013c0 	.word	0x200013c0
 800b55c:	200013bc 	.word	0x200013bc

0800b560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	@ 0x38
 800b564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b566:	e0ce      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	da19      	bge.n	800b5a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b56e:	1d3b      	adds	r3, r7, #4
 800b570:	3304      	adds	r3, #4
 800b572:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10b      	bne.n	800b592 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	61fb      	str	r3, [r7, #28]
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	e7fd      	b.n	800b58e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b598:	6850      	ldr	r0, [r2, #4]
 800b59a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b59c:	6892      	ldr	r2, [r2, #8]
 800b59e:	4611      	mov	r1, r2
 800b5a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f2c0 80ae 	blt.w	800b706 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe f9a4 	bl	8009908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5c0:	463b      	mov	r3, r7
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff ff6a 	bl	800b49c <prvSampleTimeNow>
 800b5c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b09      	cmp	r3, #9
 800b5ce:	f200 8097 	bhi.w	800b700 <prvProcessReceivedCommands+0x1a0>
 800b5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b5d8 <prvProcessReceivedCommands+0x78>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b601 	.word	0x0800b601
 800b5dc:	0800b601 	.word	0x0800b601
 800b5e0:	0800b601 	.word	0x0800b601
 800b5e4:	0800b677 	.word	0x0800b677
 800b5e8:	0800b68b 	.word	0x0800b68b
 800b5ec:	0800b6d7 	.word	0x0800b6d7
 800b5f0:	0800b601 	.word	0x0800b601
 800b5f4:	0800b601 	.word	0x0800b601
 800b5f8:	0800b677 	.word	0x0800b677
 800b5fc:	0800b68b 	.word	0x0800b68b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	18d1      	adds	r1, r2, r3
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b620:	f7ff ff5c 	bl	800b4dc <prvInsertTimerInActiveList>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d06c      	beq.n	800b704 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b630:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d061      	beq.n	800b704 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	441a      	add	r2, r3
 800b648:	2300      	movs	r3, #0
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2300      	movs	r3, #0
 800b64e:	2100      	movs	r1, #0
 800b650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b652:	f7ff fe01 	bl	800b258 <xTimerGenericCommand>
 800b656:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d152      	bne.n	800b704 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	61bb      	str	r3, [r7, #24]
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b67c:	f023 0301 	bic.w	r3, r3, #1
 800b680:	b2da      	uxtb	r2, r3
 800b682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b688:	e03d      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10b      	bne.n	800b6c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	617b      	str	r3, [r7, #20]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c4:	699a      	ldr	r2, [r3, #24]
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c8:	18d1      	adds	r1, r2, r3
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6d0:	f7ff ff04 	bl	800b4dc <prvInsertTimerInActiveList>
					break;
 800b6d4:	e017      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d103      	bne.n	800b6ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6e6:	f000 fbe7 	bl	800beb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6ea:	e00c      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6f2:	f023 0301 	bic.w	r3, r3, #1
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b6fe:	e002      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b700:	bf00      	nop
 800b702:	e000      	b.n	800b706 <prvProcessReceivedCommands+0x1a6>
					break;
 800b704:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b706:	4b08      	ldr	r3, [pc, #32]	@ (800b728 <prvProcessReceivedCommands+0x1c8>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	1d39      	adds	r1, r7, #4
 800b70c:	2200      	movs	r2, #0
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fbce 	bl	8009eb0 <xQueueReceive>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	f47f af26 	bne.w	800b568 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b71c:	bf00      	nop
 800b71e:	bf00      	nop
 800b720:	3730      	adds	r7, #48	@ 0x30
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	200013c4 	.word	0x200013c4

0800b72c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b732:	e049      	b.n	800b7c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b734:	4b2e      	ldr	r3, [pc, #184]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73e:	4b2c      	ldr	r3, [pc, #176]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe f8db 	bl	8009908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	d02f      	beq.n	800b7c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	4413      	add	r3, r2
 800b770:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	429a      	cmp	r2, r3
 800b778:	d90e      	bls.n	800b798 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b786:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fe f880 	bl	8009896 <vListInsert>
 800b796:	e017      	b.n	800b7c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b798:	2300      	movs	r3, #0
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	2300      	movs	r3, #0
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f7ff fd58 	bl	800b258 <xTimerGenericCommand>
 800b7a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10b      	bne.n	800b7c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	603b      	str	r3, [r7, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	bf00      	nop
 800b7c6:	e7fd      	b.n	800b7c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7c8:	4b09      	ldr	r3, [pc, #36]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1b0      	bne.n	800b734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b7d2:	4b07      	ldr	r3, [pc, #28]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b7d8:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <prvSwitchTimerLists+0xc8>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a04      	ldr	r2, [pc, #16]	@ (800b7f0 <prvSwitchTimerLists+0xc4>)
 800b7de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7e0:	4a04      	ldr	r2, [pc, #16]	@ (800b7f4 <prvSwitchTimerLists+0xc8>)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6013      	str	r3, [r2, #0]
}
 800b7e6:	bf00      	nop
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	200013bc 	.word	0x200013bc
 800b7f4:	200013c0 	.word	0x200013c0

0800b7f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7fe:	f000 f96b 	bl	800bad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b802:	4b15      	ldr	r3, [pc, #84]	@ (800b858 <prvCheckForValidListAndQueue+0x60>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d120      	bne.n	800b84c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b80a:	4814      	ldr	r0, [pc, #80]	@ (800b85c <prvCheckForValidListAndQueue+0x64>)
 800b80c:	f7fd fff2 	bl	80097f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b810:	4813      	ldr	r0, [pc, #76]	@ (800b860 <prvCheckForValidListAndQueue+0x68>)
 800b812:	f7fd ffef 	bl	80097f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b816:	4b13      	ldr	r3, [pc, #76]	@ (800b864 <prvCheckForValidListAndQueue+0x6c>)
 800b818:	4a10      	ldr	r2, [pc, #64]	@ (800b85c <prvCheckForValidListAndQueue+0x64>)
 800b81a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b81c:	4b12      	ldr	r3, [pc, #72]	@ (800b868 <prvCheckForValidListAndQueue+0x70>)
 800b81e:	4a10      	ldr	r2, [pc, #64]	@ (800b860 <prvCheckForValidListAndQueue+0x68>)
 800b820:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b822:	2300      	movs	r3, #0
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4b11      	ldr	r3, [pc, #68]	@ (800b86c <prvCheckForValidListAndQueue+0x74>)
 800b828:	4a11      	ldr	r2, [pc, #68]	@ (800b870 <prvCheckForValidListAndQueue+0x78>)
 800b82a:	2110      	movs	r1, #16
 800b82c:	200a      	movs	r0, #10
 800b82e:	f7fe f8ff 	bl	8009a30 <xQueueGenericCreateStatic>
 800b832:	4603      	mov	r3, r0
 800b834:	4a08      	ldr	r2, [pc, #32]	@ (800b858 <prvCheckForValidListAndQueue+0x60>)
 800b836:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b838:	4b07      	ldr	r3, [pc, #28]	@ (800b858 <prvCheckForValidListAndQueue+0x60>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d005      	beq.n	800b84c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b840:	4b05      	ldr	r3, [pc, #20]	@ (800b858 <prvCheckForValidListAndQueue+0x60>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	490b      	ldr	r1, [pc, #44]	@ (800b874 <prvCheckForValidListAndQueue+0x7c>)
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fd24 	bl	800a294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b84c:	f000 f976 	bl	800bb3c <vPortExitCritical>
}
 800b850:	bf00      	nop
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	200013c4 	.word	0x200013c4
 800b85c:	20001394 	.word	0x20001394
 800b860:	200013a8 	.word	0x200013a8
 800b864:	200013bc 	.word	0x200013bc
 800b868:	200013c0 	.word	0x200013c0
 800b86c:	20001470 	.word	0x20001470
 800b870:	200013d0 	.word	0x200013d0
 800b874:	0800cb8c 	.word	0x0800cb8c

0800b878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3b04      	subs	r3, #4
 800b888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3b04      	subs	r3, #4
 800b896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f023 0201 	bic.w	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b8dc <pxPortInitialiseStack+0x64>)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3b14      	subs	r3, #20
 800b8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f06f 0202 	mvn.w	r2, #2
 800b8c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3b20      	subs	r3, #32
 800b8cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	0800b8e1 	.word	0x0800b8e1

0800b8e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ea:	4b13      	ldr	r3, [pc, #76]	@ (800b938 <prvTaskExitError+0x58>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f2:	d00b      	beq.n	800b90c <prvTaskExitError+0x2c>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	60fb      	str	r3, [r7, #12]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <prvTaskExitError+0x28>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	60bb      	str	r3, [r7, #8]
}
 800b91e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b920:	bf00      	nop
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0fc      	beq.n	800b922 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20000010 	.word	0x20000010
 800b93c:	00000000 	.word	0x00000000

0800b940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b940:	4b07      	ldr	r3, [pc, #28]	@ (800b960 <pxCurrentTCBConst2>)
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	6808      	ldr	r0, [r1, #0]
 800b946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94a:	f380 8809 	msr	PSP, r0
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f04f 0000 	mov.w	r0, #0
 800b956:	f380 8811 	msr	BASEPRI, r0
 800b95a:	4770      	bx	lr
 800b95c:	f3af 8000 	nop.w

0800b960 <pxCurrentTCBConst2>:
 800b960:	20000e94 	.word	0x20000e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b968:	4808      	ldr	r0, [pc, #32]	@ (800b98c <prvPortStartFirstTask+0x24>)
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f380 8808 	msr	MSP, r0
 800b972:	f04f 0000 	mov.w	r0, #0
 800b976:	f380 8814 	msr	CONTROL, r0
 800b97a:	b662      	cpsie	i
 800b97c:	b661      	cpsie	f
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	df00      	svc	0
 800b988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b98a:	bf00      	nop
 800b98c:	e000ed08 	.word	0xe000ed08

0800b990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b996:	4b47      	ldr	r3, [pc, #284]	@ (800bab4 <xPortStartScheduler+0x124>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a47      	ldr	r2, [pc, #284]	@ (800bab8 <xPortStartScheduler+0x128>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d10b      	bne.n	800b9b8 <xPortStartScheduler+0x28>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	613b      	str	r3, [r7, #16]
}
 800b9b2:	bf00      	nop
 800b9b4:	bf00      	nop
 800b9b6:	e7fd      	b.n	800b9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9b8:	4b3e      	ldr	r3, [pc, #248]	@ (800bab4 <xPortStartScheduler+0x124>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a3f      	ldr	r2, [pc, #252]	@ (800babc <xPortStartScheduler+0x12c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d10b      	bne.n	800b9da <xPortStartScheduler+0x4a>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	60fb      	str	r3, [r7, #12]
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	e7fd      	b.n	800b9d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b9da:	4b39      	ldr	r3, [pc, #228]	@ (800bac0 <xPortStartScheduler+0x130>)
 800b9dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	22ff      	movs	r2, #255	@ 0xff
 800b9ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9f4:	78fb      	ldrb	r3, [r7, #3]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	4b31      	ldr	r3, [pc, #196]	@ (800bac4 <xPortStartScheduler+0x134>)
 800ba00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba02:	4b31      	ldr	r3, [pc, #196]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba04:	2207      	movs	r2, #7
 800ba06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba08:	e009      	b.n	800ba1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ba0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	4a2d      	ldr	r2, [pc, #180]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba14:	78fb      	ldrb	r3, [r7, #3]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba1e:	78fb      	ldrb	r3, [r7, #3]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba26:	2b80      	cmp	r3, #128	@ 0x80
 800ba28:	d0ef      	beq.n	800ba0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba2a:	4b27      	ldr	r3, [pc, #156]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f1c3 0307 	rsb	r3, r3, #7
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d00b      	beq.n	800ba4e <xPortStartScheduler+0xbe>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	60bb      	str	r3, [r7, #8]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	021b      	lsls	r3, r3, #8
 800ba54:	4a1c      	ldr	r2, [pc, #112]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba58:	4b1b      	ldr	r3, [pc, #108]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba60:	4a19      	ldr	r2, [pc, #100]	@ (800bac8 <xPortStartScheduler+0x138>)
 800ba62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba6c:	4b17      	ldr	r3, [pc, #92]	@ (800bacc <xPortStartScheduler+0x13c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a16      	ldr	r2, [pc, #88]	@ (800bacc <xPortStartScheduler+0x13c>)
 800ba72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba78:	4b14      	ldr	r3, [pc, #80]	@ (800bacc <xPortStartScheduler+0x13c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a13      	ldr	r2, [pc, #76]	@ (800bacc <xPortStartScheduler+0x13c>)
 800ba7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ba82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba84:	f000 f8da 	bl	800bc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba88:	4b11      	ldr	r3, [pc, #68]	@ (800bad0 <xPortStartScheduler+0x140>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba8e:	f000 f8f9 	bl	800bc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba92:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <xPortStartScheduler+0x144>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a0f      	ldr	r2, [pc, #60]	@ (800bad4 <xPortStartScheduler+0x144>)
 800ba98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba9e:	f7ff ff63 	bl	800b968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800baa2:	f7ff f82f 	bl	800ab04 <vTaskSwitchContext>
	prvTaskExitError();
 800baa6:	f7ff ff1b 	bl	800b8e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	e000ed00 	.word	0xe000ed00
 800bab8:	410fc271 	.word	0x410fc271
 800babc:	410fc270 	.word	0x410fc270
 800bac0:	e000e400 	.word	0xe000e400
 800bac4:	200014c0 	.word	0x200014c0
 800bac8:	200014c4 	.word	0x200014c4
 800bacc:	e000ed20 	.word	0xe000ed20
 800bad0:	20000010 	.word	0x20000010
 800bad4:	e000ef34 	.word	0xe000ef34

0800bad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	607b      	str	r3, [r7, #4]
}
 800baf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baf2:	4b10      	ldr	r3, [pc, #64]	@ (800bb34 <vPortEnterCritical+0x5c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3301      	adds	r3, #1
 800baf8:	4a0e      	ldr	r2, [pc, #56]	@ (800bb34 <vPortEnterCritical+0x5c>)
 800bafa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bafc:	4b0d      	ldr	r3, [pc, #52]	@ (800bb34 <vPortEnterCritical+0x5c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb04:	4b0c      	ldr	r3, [pc, #48]	@ (800bb38 <vPortEnterCritical+0x60>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00b      	beq.n	800bb26 <vPortEnterCritical+0x4e>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	603b      	str	r3, [r7, #0]
}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	e7fd      	b.n	800bb22 <vPortEnterCritical+0x4a>
	}
}
 800bb26:	bf00      	nop
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	20000010 	.word	0x20000010
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb42:	4b12      	ldr	r3, [pc, #72]	@ (800bb8c <vPortExitCritical+0x50>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <vPortExitCritical+0x26>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	607b      	str	r3, [r7, #4]
}
 800bb5c:	bf00      	nop
 800bb5e:	bf00      	nop
 800bb60:	e7fd      	b.n	800bb5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb62:	4b0a      	ldr	r3, [pc, #40]	@ (800bb8c <vPortExitCritical+0x50>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	4a08      	ldr	r2, [pc, #32]	@ (800bb8c <vPortExitCritical+0x50>)
 800bb6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb6c:	4b07      	ldr	r3, [pc, #28]	@ (800bb8c <vPortExitCritical+0x50>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d105      	bne.n	800bb80 <vPortExitCritical+0x44>
 800bb74:	2300      	movs	r3, #0
 800bb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f383 8811 	msr	BASEPRI, r3
}
 800bb7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000010 	.word	0x20000010

0800bb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb90:	f3ef 8009 	mrs	r0, PSP
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	4b15      	ldr	r3, [pc, #84]	@ (800bbf0 <pxCurrentTCBConst>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	f01e 0f10 	tst.w	lr, #16
 800bba0:	bf08      	it	eq
 800bba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbaa:	6010      	str	r0, [r2, #0]
 800bbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bbb4:	f380 8811 	msr	BASEPRI, r0
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f7fe ffa0 	bl	800ab04 <vTaskSwitchContext>
 800bbc4:	f04f 0000 	mov.w	r0, #0
 800bbc8:	f380 8811 	msr	BASEPRI, r0
 800bbcc:	bc09      	pop	{r0, r3}
 800bbce:	6819      	ldr	r1, [r3, #0]
 800bbd0:	6808      	ldr	r0, [r1, #0]
 800bbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd6:	f01e 0f10 	tst.w	lr, #16
 800bbda:	bf08      	it	eq
 800bbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bbe0:	f380 8809 	msr	PSP, r0
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	f3af 8000 	nop.w

0800bbf0 <pxCurrentTCBConst>:
 800bbf0:	20000e94 	.word	0x20000e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop

0800bbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc12:	f7fe febd 	bl	800a990 <xTaskIncrementTick>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc1c:	4b06      	ldr	r3, [pc, #24]	@ (800bc38 <xPortSysTickHandler+0x40>)
 800bc1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc22:	601a      	str	r2, [r3, #0]
 800bc24:	2300      	movs	r3, #0
 800bc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	f383 8811 	msr	BASEPRI, r3
}
 800bc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc40:	4b0b      	ldr	r3, [pc, #44]	@ (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc46:	4b0b      	ldr	r3, [pc, #44]	@ (800bc74 <vPortSetupTimerInterrupt+0x38>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <vPortSetupTimerInterrupt+0x3c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0a      	ldr	r2, [pc, #40]	@ (800bc7c <vPortSetupTimerInterrupt+0x40>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	099b      	lsrs	r3, r3, #6
 800bc58:	4a09      	ldr	r2, [pc, #36]	@ (800bc80 <vPortSetupTimerInterrupt+0x44>)
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc5e:	4b04      	ldr	r3, [pc, #16]	@ (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc60:	2207      	movs	r2, #7
 800bc62:	601a      	str	r2, [r3, #0]
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	e000e010 	.word	0xe000e010
 800bc74:	e000e018 	.word	0xe000e018
 800bc78:	20000004 	.word	0x20000004
 800bc7c:	10624dd3 	.word	0x10624dd3
 800bc80:	e000e014 	.word	0xe000e014

0800bc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bc94 <vPortEnableVFP+0x10>
 800bc88:	6801      	ldr	r1, [r0, #0]
 800bc8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bc8e:	6001      	str	r1, [r0, #0]
 800bc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc92:	bf00      	nop
 800bc94:	e000ed88 	.word	0xe000ed88

0800bc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc9e:	f3ef 8305 	mrs	r3, IPSR
 800bca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b0f      	cmp	r3, #15
 800bca8:	d915      	bls.n	800bcd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcaa:	4a18      	ldr	r2, [pc, #96]	@ (800bd0c <vPortValidateInterruptPriority+0x74>)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcb4:	4b16      	ldr	r3, [pc, #88]	@ (800bd10 <vPortValidateInterruptPriority+0x78>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	7afa      	ldrb	r2, [r7, #11]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d20b      	bcs.n	800bcd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	607b      	str	r3, [r7, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	@ (800bd14 <vPortValidateInterruptPriority+0x7c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bcde:	4b0e      	ldr	r3, [pc, #56]	@ (800bd18 <vPortValidateInterruptPriority+0x80>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d90b      	bls.n	800bcfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	603b      	str	r3, [r7, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <vPortValidateInterruptPriority+0x62>
	}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	e000e3f0 	.word	0xe000e3f0
 800bd10:	200014c0 	.word	0x200014c0
 800bd14:	e000ed0c 	.word	0xe000ed0c
 800bd18:	200014c4 	.word	0x200014c4

0800bd1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08a      	sub	sp, #40	@ 0x28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd28:	f7fe fd76 	bl	800a818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd2c:	4b5c      	ldr	r3, [pc, #368]	@ (800bea0 <pvPortMalloc+0x184>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd34:	f000 f924 	bl	800bf80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd38:	4b5a      	ldr	r3, [pc, #360]	@ (800bea4 <pvPortMalloc+0x188>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4013      	ands	r3, r2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f040 8095 	bne.w	800be70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d01e      	beq.n	800bd8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bd4c:	2208      	movs	r2, #8
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4413      	add	r3, r2
 800bd52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f003 0307 	and.w	r3, r3, #7
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d015      	beq.n	800bd8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f023 0307 	bic.w	r3, r3, #7
 800bd64:	3308      	adds	r3, #8
 800bd66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f003 0307 	and.w	r3, r3, #7
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <pvPortMalloc+0x6e>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	617b      	str	r3, [r7, #20]
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	e7fd      	b.n	800bd86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d06f      	beq.n	800be70 <pvPortMalloc+0x154>
 800bd90:	4b45      	ldr	r3, [pc, #276]	@ (800bea8 <pvPortMalloc+0x18c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d86a      	bhi.n	800be70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd9a:	4b44      	ldr	r3, [pc, #272]	@ (800beac <pvPortMalloc+0x190>)
 800bd9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd9e:	4b43      	ldr	r3, [pc, #268]	@ (800beac <pvPortMalloc+0x190>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bda4:	e004      	b.n	800bdb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d903      	bls.n	800bdc2 <pvPortMalloc+0xa6>
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f1      	bne.n	800bda6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdc2:	4b37      	ldr	r3, [pc, #220]	@ (800bea0 <pvPortMalloc+0x184>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d051      	beq.n	800be70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2208      	movs	r2, #8
 800bdd2:	4413      	add	r3, r2
 800bdd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	1ad2      	subs	r2, r2, r3
 800bde6:	2308      	movs	r3, #8
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d920      	bls.n	800be30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00b      	beq.n	800be18 <pvPortMalloc+0xfc>
	__asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	613b      	str	r3, [r7, #16]
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be2a:	69b8      	ldr	r0, [r7, #24]
 800be2c:	f000 f90a 	bl	800c044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be30:	4b1d      	ldr	r3, [pc, #116]	@ (800bea8 <pvPortMalloc+0x18c>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	4a1b      	ldr	r2, [pc, #108]	@ (800bea8 <pvPortMalloc+0x18c>)
 800be3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bea8 <pvPortMalloc+0x18c>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b1b      	ldr	r3, [pc, #108]	@ (800beb0 <pvPortMalloc+0x194>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d203      	bcs.n	800be52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be4a:	4b17      	ldr	r3, [pc, #92]	@ (800bea8 <pvPortMalloc+0x18c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a18      	ldr	r2, [pc, #96]	@ (800beb0 <pvPortMalloc+0x194>)
 800be50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	4b13      	ldr	r3, [pc, #76]	@ (800bea4 <pvPortMalloc+0x188>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	431a      	orrs	r2, r3
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be66:	4b13      	ldr	r3, [pc, #76]	@ (800beb4 <pvPortMalloc+0x198>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3301      	adds	r3, #1
 800be6c:	4a11      	ldr	r2, [pc, #68]	@ (800beb4 <pvPortMalloc+0x198>)
 800be6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be70:	f7fe fce0 	bl	800a834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00b      	beq.n	800be96 <pvPortMalloc+0x17a>
	__asm volatile
 800be7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	60fb      	str	r3, [r7, #12]
}
 800be90:	bf00      	nop
 800be92:	bf00      	nop
 800be94:	e7fd      	b.n	800be92 <pvPortMalloc+0x176>
	return pvReturn;
 800be96:	69fb      	ldr	r3, [r7, #28]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3728      	adds	r7, #40	@ 0x28
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	200050d0 	.word	0x200050d0
 800bea4:	200050e4 	.word	0x200050e4
 800bea8:	200050d4 	.word	0x200050d4
 800beac:	200050c8 	.word	0x200050c8
 800beb0:	200050d8 	.word	0x200050d8
 800beb4:	200050dc 	.word	0x200050dc

0800beb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d04f      	beq.n	800bf6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800beca:	2308      	movs	r3, #8
 800becc:	425b      	negs	r3, r3
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	4413      	add	r3, r2
 800bed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	4b25      	ldr	r3, [pc, #148]	@ (800bf74 <vPortFree+0xbc>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4013      	ands	r3, r2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <vPortFree+0x46>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	60fb      	str	r3, [r7, #12]
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	e7fd      	b.n	800befa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <vPortFree+0x66>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	60bb      	str	r3, [r7, #8]
}
 800bf18:	bf00      	nop
 800bf1a:	bf00      	nop
 800bf1c:	e7fd      	b.n	800bf1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	4b14      	ldr	r3, [pc, #80]	@ (800bf74 <vPortFree+0xbc>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4013      	ands	r3, r2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d01e      	beq.n	800bf6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d11a      	bne.n	800bf6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	4b0e      	ldr	r3, [pc, #56]	@ (800bf74 <vPortFree+0xbc>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	43db      	mvns	r3, r3
 800bf3e:	401a      	ands	r2, r3
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf44:	f7fe fc68 	bl	800a818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <vPortFree+0xc0>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4413      	add	r3, r2
 800bf52:	4a09      	ldr	r2, [pc, #36]	@ (800bf78 <vPortFree+0xc0>)
 800bf54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf56:	6938      	ldr	r0, [r7, #16]
 800bf58:	f000 f874 	bl	800c044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf5c:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <vPortFree+0xc4>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3301      	adds	r3, #1
 800bf62:	4a06      	ldr	r2, [pc, #24]	@ (800bf7c <vPortFree+0xc4>)
 800bf64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf66:	f7fe fc65 	bl	800a834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf6a:	bf00      	nop
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200050e4 	.word	0x200050e4
 800bf78:	200050d4 	.word	0x200050d4
 800bf7c:	200050e0 	.word	0x200050e0

0800bf80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bf8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf8c:	4b27      	ldr	r3, [pc, #156]	@ (800c02c <prvHeapInit+0xac>)
 800bf8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00c      	beq.n	800bfb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3307      	adds	r3, #7
 800bf9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 0307 	bic.w	r3, r3, #7
 800bfa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	4a1f      	ldr	r2, [pc, #124]	@ (800c02c <prvHeapInit+0xac>)
 800bfb0:	4413      	add	r3, r2
 800bfb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfb8:	4a1d      	ldr	r2, [pc, #116]	@ (800c030 <prvHeapInit+0xb0>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfbe:	4b1c      	ldr	r3, [pc, #112]	@ (800c030 <prvHeapInit+0xb0>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	4413      	add	r3, r2
 800bfca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bfcc:	2208      	movs	r2, #8
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	1a9b      	subs	r3, r3, r2
 800bfd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4a15      	ldr	r2, [pc, #84]	@ (800c034 <prvHeapInit+0xb4>)
 800bfe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfe2:	4b14      	ldr	r3, [pc, #80]	@ (800c034 <prvHeapInit+0xb4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfea:	4b12      	ldr	r3, [pc, #72]	@ (800c034 <prvHeapInit+0xb4>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2200      	movs	r2, #0
 800bff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c000:	4b0c      	ldr	r3, [pc, #48]	@ (800c034 <prvHeapInit+0xb4>)
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	4a0a      	ldr	r2, [pc, #40]	@ (800c038 <prvHeapInit+0xb8>)
 800c00e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	4a09      	ldr	r2, [pc, #36]	@ (800c03c <prvHeapInit+0xbc>)
 800c016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c018:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <prvHeapInit+0xc0>)
 800c01a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c01e:	601a      	str	r2, [r3, #0]
}
 800c020:	bf00      	nop
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	200014c8 	.word	0x200014c8
 800c030:	200050c8 	.word	0x200050c8
 800c034:	200050d0 	.word	0x200050d0
 800c038:	200050d8 	.word	0x200050d8
 800c03c:	200050d4 	.word	0x200050d4
 800c040:	200050e4 	.word	0x200050e4

0800c044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c04c:	4b28      	ldr	r3, [pc, #160]	@ (800c0f0 <prvInsertBlockIntoFreeList+0xac>)
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	e002      	b.n	800c058 <prvInsertBlockIntoFreeList+0x14>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d8f7      	bhi.n	800c052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d108      	bne.n	800c086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	441a      	add	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d118      	bne.n	800c0cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	4b15      	ldr	r3, [pc, #84]	@ (800c0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d00d      	beq.n	800c0c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	e008      	b.n	800c0d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c0f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	e003      	b.n	800c0d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d002      	beq.n	800c0e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0e2:	bf00      	nop
 800c0e4:	3714      	adds	r7, #20
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	200050c8 	.word	0x200050c8
 800c0f4:	200050d0 	.word	0x200050d0

0800c0f8 <siprintf>:
 800c0f8:	b40e      	push	{r1, r2, r3}
 800c0fa:	b500      	push	{lr}
 800c0fc:	b09c      	sub	sp, #112	@ 0x70
 800c0fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800c100:	9002      	str	r0, [sp, #8]
 800c102:	9006      	str	r0, [sp, #24]
 800c104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c108:	4809      	ldr	r0, [pc, #36]	@ (800c130 <siprintf+0x38>)
 800c10a:	9107      	str	r1, [sp, #28]
 800c10c:	9104      	str	r1, [sp, #16]
 800c10e:	4909      	ldr	r1, [pc, #36]	@ (800c134 <siprintf+0x3c>)
 800c110:	f853 2b04 	ldr.w	r2, [r3], #4
 800c114:	9105      	str	r1, [sp, #20]
 800c116:	6800      	ldr	r0, [r0, #0]
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	a902      	add	r1, sp, #8
 800c11c:	f000 f9f8 	bl	800c510 <_svfiprintf_r>
 800c120:	9b02      	ldr	r3, [sp, #8]
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
 800c126:	b01c      	add	sp, #112	@ 0x70
 800c128:	f85d eb04 	ldr.w	lr, [sp], #4
 800c12c:	b003      	add	sp, #12
 800c12e:	4770      	bx	lr
 800c130:	20000014 	.word	0x20000014
 800c134:	ffff0208 	.word	0xffff0208

0800c138 <memset>:
 800c138:	4402      	add	r2, r0
 800c13a:	4603      	mov	r3, r0
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d100      	bne.n	800c142 <memset+0xa>
 800c140:	4770      	bx	lr
 800c142:	f803 1b01 	strb.w	r1, [r3], #1
 800c146:	e7f9      	b.n	800c13c <memset+0x4>

0800c148 <_reclaim_reent>:
 800c148:	4b29      	ldr	r3, [pc, #164]	@ (800c1f0 <_reclaim_reent+0xa8>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4283      	cmp	r3, r0
 800c14e:	b570      	push	{r4, r5, r6, lr}
 800c150:	4604      	mov	r4, r0
 800c152:	d04b      	beq.n	800c1ec <_reclaim_reent+0xa4>
 800c154:	69c3      	ldr	r3, [r0, #28]
 800c156:	b1ab      	cbz	r3, 800c184 <_reclaim_reent+0x3c>
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	b16b      	cbz	r3, 800c178 <_reclaim_reent+0x30>
 800c15c:	2500      	movs	r5, #0
 800c15e:	69e3      	ldr	r3, [r4, #28]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	5959      	ldr	r1, [r3, r5]
 800c164:	2900      	cmp	r1, #0
 800c166:	d13b      	bne.n	800c1e0 <_reclaim_reent+0x98>
 800c168:	3504      	adds	r5, #4
 800c16a:	2d80      	cmp	r5, #128	@ 0x80
 800c16c:	d1f7      	bne.n	800c15e <_reclaim_reent+0x16>
 800c16e:	69e3      	ldr	r3, [r4, #28]
 800c170:	4620      	mov	r0, r4
 800c172:	68d9      	ldr	r1, [r3, #12]
 800c174:	f000 f878 	bl	800c268 <_free_r>
 800c178:	69e3      	ldr	r3, [r4, #28]
 800c17a:	6819      	ldr	r1, [r3, #0]
 800c17c:	b111      	cbz	r1, 800c184 <_reclaim_reent+0x3c>
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 f872 	bl	800c268 <_free_r>
 800c184:	6961      	ldr	r1, [r4, #20]
 800c186:	b111      	cbz	r1, 800c18e <_reclaim_reent+0x46>
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 f86d 	bl	800c268 <_free_r>
 800c18e:	69e1      	ldr	r1, [r4, #28]
 800c190:	b111      	cbz	r1, 800c198 <_reclaim_reent+0x50>
 800c192:	4620      	mov	r0, r4
 800c194:	f000 f868 	bl	800c268 <_free_r>
 800c198:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c19a:	b111      	cbz	r1, 800c1a2 <_reclaim_reent+0x5a>
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f863 	bl	800c268 <_free_r>
 800c1a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1a4:	b111      	cbz	r1, 800c1ac <_reclaim_reent+0x64>
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 f85e 	bl	800c268 <_free_r>
 800c1ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c1ae:	b111      	cbz	r1, 800c1b6 <_reclaim_reent+0x6e>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 f859 	bl	800c268 <_free_r>
 800c1b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c1b8:	b111      	cbz	r1, 800c1c0 <_reclaim_reent+0x78>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 f854 	bl	800c268 <_free_r>
 800c1c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c1c2:	b111      	cbz	r1, 800c1ca <_reclaim_reent+0x82>
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 f84f 	bl	800c268 <_free_r>
 800c1ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c1cc:	b111      	cbz	r1, 800c1d4 <_reclaim_reent+0x8c>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 f84a 	bl	800c268 <_free_r>
 800c1d4:	6a23      	ldr	r3, [r4, #32]
 800c1d6:	b14b      	cbz	r3, 800c1ec <_reclaim_reent+0xa4>
 800c1d8:	4620      	mov	r0, r4
 800c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1de:	4718      	bx	r3
 800c1e0:	680e      	ldr	r6, [r1, #0]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 f840 	bl	800c268 <_free_r>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	e7bb      	b.n	800c164 <_reclaim_reent+0x1c>
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000014 	.word	0x20000014

0800c1f4 <__errno>:
 800c1f4:	4b01      	ldr	r3, [pc, #4]	@ (800c1fc <__errno+0x8>)
 800c1f6:	6818      	ldr	r0, [r3, #0]
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000014 	.word	0x20000014

0800c200 <__libc_init_array>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	4d0d      	ldr	r5, [pc, #52]	@ (800c238 <__libc_init_array+0x38>)
 800c204:	4c0d      	ldr	r4, [pc, #52]	@ (800c23c <__libc_init_array+0x3c>)
 800c206:	1b64      	subs	r4, r4, r5
 800c208:	10a4      	asrs	r4, r4, #2
 800c20a:	2600      	movs	r6, #0
 800c20c:	42a6      	cmp	r6, r4
 800c20e:	d109      	bne.n	800c224 <__libc_init_array+0x24>
 800c210:	4d0b      	ldr	r5, [pc, #44]	@ (800c240 <__libc_init_array+0x40>)
 800c212:	4c0c      	ldr	r4, [pc, #48]	@ (800c244 <__libc_init_array+0x44>)
 800c214:	f000 fc66 	bl	800cae4 <_init>
 800c218:	1b64      	subs	r4, r4, r5
 800c21a:	10a4      	asrs	r4, r4, #2
 800c21c:	2600      	movs	r6, #0
 800c21e:	42a6      	cmp	r6, r4
 800c220:	d105      	bne.n	800c22e <__libc_init_array+0x2e>
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	f855 3b04 	ldr.w	r3, [r5], #4
 800c228:	4798      	blx	r3
 800c22a:	3601      	adds	r6, #1
 800c22c:	e7ee      	b.n	800c20c <__libc_init_array+0xc>
 800c22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c232:	4798      	blx	r3
 800c234:	3601      	adds	r6, #1
 800c236:	e7f2      	b.n	800c21e <__libc_init_array+0x1e>
 800c238:	0800d748 	.word	0x0800d748
 800c23c:	0800d748 	.word	0x0800d748
 800c240:	0800d748 	.word	0x0800d748
 800c244:	0800d74c 	.word	0x0800d74c

0800c248 <__retarget_lock_acquire_recursive>:
 800c248:	4770      	bx	lr

0800c24a <__retarget_lock_release_recursive>:
 800c24a:	4770      	bx	lr

0800c24c <memcpy>:
 800c24c:	440a      	add	r2, r1
 800c24e:	4291      	cmp	r1, r2
 800c250:	f100 33ff 	add.w	r3, r0, #4294967295
 800c254:	d100      	bne.n	800c258 <memcpy+0xc>
 800c256:	4770      	bx	lr
 800c258:	b510      	push	{r4, lr}
 800c25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c262:	4291      	cmp	r1, r2
 800c264:	d1f9      	bne.n	800c25a <memcpy+0xe>
 800c266:	bd10      	pop	{r4, pc}

0800c268 <_free_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4605      	mov	r5, r0
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d041      	beq.n	800c2f4 <_free_r+0x8c>
 800c270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c274:	1f0c      	subs	r4, r1, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	bfb8      	it	lt
 800c27a:	18e4      	addlt	r4, r4, r3
 800c27c:	f000 f8e0 	bl	800c440 <__malloc_lock>
 800c280:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f8 <_free_r+0x90>)
 800c282:	6813      	ldr	r3, [r2, #0]
 800c284:	b933      	cbnz	r3, 800c294 <_free_r+0x2c>
 800c286:	6063      	str	r3, [r4, #4]
 800c288:	6014      	str	r4, [r2, #0]
 800c28a:	4628      	mov	r0, r5
 800c28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c290:	f000 b8dc 	b.w	800c44c <__malloc_unlock>
 800c294:	42a3      	cmp	r3, r4
 800c296:	d908      	bls.n	800c2aa <_free_r+0x42>
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	1821      	adds	r1, r4, r0
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf01      	itttt	eq
 800c2a0:	6819      	ldreq	r1, [r3, #0]
 800c2a2:	685b      	ldreq	r3, [r3, #4]
 800c2a4:	1809      	addeq	r1, r1, r0
 800c2a6:	6021      	streq	r1, [r4, #0]
 800c2a8:	e7ed      	b.n	800c286 <_free_r+0x1e>
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	b10b      	cbz	r3, 800c2b4 <_free_r+0x4c>
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	d9fa      	bls.n	800c2aa <_free_r+0x42>
 800c2b4:	6811      	ldr	r1, [r2, #0]
 800c2b6:	1850      	adds	r0, r2, r1
 800c2b8:	42a0      	cmp	r0, r4
 800c2ba:	d10b      	bne.n	800c2d4 <_free_r+0x6c>
 800c2bc:	6820      	ldr	r0, [r4, #0]
 800c2be:	4401      	add	r1, r0
 800c2c0:	1850      	adds	r0, r2, r1
 800c2c2:	4283      	cmp	r3, r0
 800c2c4:	6011      	str	r1, [r2, #0]
 800c2c6:	d1e0      	bne.n	800c28a <_free_r+0x22>
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	6053      	str	r3, [r2, #4]
 800c2ce:	4408      	add	r0, r1
 800c2d0:	6010      	str	r0, [r2, #0]
 800c2d2:	e7da      	b.n	800c28a <_free_r+0x22>
 800c2d4:	d902      	bls.n	800c2dc <_free_r+0x74>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	e7d6      	b.n	800c28a <_free_r+0x22>
 800c2dc:	6820      	ldr	r0, [r4, #0]
 800c2de:	1821      	adds	r1, r4, r0
 800c2e0:	428b      	cmp	r3, r1
 800c2e2:	bf04      	itt	eq
 800c2e4:	6819      	ldreq	r1, [r3, #0]
 800c2e6:	685b      	ldreq	r3, [r3, #4]
 800c2e8:	6063      	str	r3, [r4, #4]
 800c2ea:	bf04      	itt	eq
 800c2ec:	1809      	addeq	r1, r1, r0
 800c2ee:	6021      	streq	r1, [r4, #0]
 800c2f0:	6054      	str	r4, [r2, #4]
 800c2f2:	e7ca      	b.n	800c28a <_free_r+0x22>
 800c2f4:	bd38      	pop	{r3, r4, r5, pc}
 800c2f6:	bf00      	nop
 800c2f8:	2000522c 	.word	0x2000522c

0800c2fc <sbrk_aligned>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	4e0f      	ldr	r6, [pc, #60]	@ (800c33c <sbrk_aligned+0x40>)
 800c300:	460c      	mov	r4, r1
 800c302:	6831      	ldr	r1, [r6, #0]
 800c304:	4605      	mov	r5, r0
 800c306:	b911      	cbnz	r1, 800c30e <sbrk_aligned+0x12>
 800c308:	f000 fba6 	bl	800ca58 <_sbrk_r>
 800c30c:	6030      	str	r0, [r6, #0]
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f000 fba1 	bl	800ca58 <_sbrk_r>
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	d103      	bne.n	800c322 <sbrk_aligned+0x26>
 800c31a:	f04f 34ff 	mov.w	r4, #4294967295
 800c31e:	4620      	mov	r0, r4
 800c320:	bd70      	pop	{r4, r5, r6, pc}
 800c322:	1cc4      	adds	r4, r0, #3
 800c324:	f024 0403 	bic.w	r4, r4, #3
 800c328:	42a0      	cmp	r0, r4
 800c32a:	d0f8      	beq.n	800c31e <sbrk_aligned+0x22>
 800c32c:	1a21      	subs	r1, r4, r0
 800c32e:	4628      	mov	r0, r5
 800c330:	f000 fb92 	bl	800ca58 <_sbrk_r>
 800c334:	3001      	adds	r0, #1
 800c336:	d1f2      	bne.n	800c31e <sbrk_aligned+0x22>
 800c338:	e7ef      	b.n	800c31a <sbrk_aligned+0x1e>
 800c33a:	bf00      	nop
 800c33c:	20005228 	.word	0x20005228

0800c340 <_malloc_r>:
 800c340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c344:	1ccd      	adds	r5, r1, #3
 800c346:	f025 0503 	bic.w	r5, r5, #3
 800c34a:	3508      	adds	r5, #8
 800c34c:	2d0c      	cmp	r5, #12
 800c34e:	bf38      	it	cc
 800c350:	250c      	movcc	r5, #12
 800c352:	2d00      	cmp	r5, #0
 800c354:	4606      	mov	r6, r0
 800c356:	db01      	blt.n	800c35c <_malloc_r+0x1c>
 800c358:	42a9      	cmp	r1, r5
 800c35a:	d904      	bls.n	800c366 <_malloc_r+0x26>
 800c35c:	230c      	movs	r3, #12
 800c35e:	6033      	str	r3, [r6, #0]
 800c360:	2000      	movs	r0, #0
 800c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c43c <_malloc_r+0xfc>
 800c36a:	f000 f869 	bl	800c440 <__malloc_lock>
 800c36e:	f8d8 3000 	ldr.w	r3, [r8]
 800c372:	461c      	mov	r4, r3
 800c374:	bb44      	cbnz	r4, 800c3c8 <_malloc_r+0x88>
 800c376:	4629      	mov	r1, r5
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff ffbf 	bl	800c2fc <sbrk_aligned>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	4604      	mov	r4, r0
 800c382:	d158      	bne.n	800c436 <_malloc_r+0xf6>
 800c384:	f8d8 4000 	ldr.w	r4, [r8]
 800c388:	4627      	mov	r7, r4
 800c38a:	2f00      	cmp	r7, #0
 800c38c:	d143      	bne.n	800c416 <_malloc_r+0xd6>
 800c38e:	2c00      	cmp	r4, #0
 800c390:	d04b      	beq.n	800c42a <_malloc_r+0xea>
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	4639      	mov	r1, r7
 800c396:	4630      	mov	r0, r6
 800c398:	eb04 0903 	add.w	r9, r4, r3
 800c39c:	f000 fb5c 	bl	800ca58 <_sbrk_r>
 800c3a0:	4581      	cmp	r9, r0
 800c3a2:	d142      	bne.n	800c42a <_malloc_r+0xea>
 800c3a4:	6821      	ldr	r1, [r4, #0]
 800c3a6:	1a6d      	subs	r5, r5, r1
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff ffa6 	bl	800c2fc <sbrk_aligned>
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d03a      	beq.n	800c42a <_malloc_r+0xea>
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	442b      	add	r3, r5
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	bb62      	cbnz	r2, 800c41c <_malloc_r+0xdc>
 800c3c2:	f8c8 7000 	str.w	r7, [r8]
 800c3c6:	e00f      	b.n	800c3e8 <_malloc_r+0xa8>
 800c3c8:	6822      	ldr	r2, [r4, #0]
 800c3ca:	1b52      	subs	r2, r2, r5
 800c3cc:	d420      	bmi.n	800c410 <_malloc_r+0xd0>
 800c3ce:	2a0b      	cmp	r2, #11
 800c3d0:	d917      	bls.n	800c402 <_malloc_r+0xc2>
 800c3d2:	1961      	adds	r1, r4, r5
 800c3d4:	42a3      	cmp	r3, r4
 800c3d6:	6025      	str	r5, [r4, #0]
 800c3d8:	bf18      	it	ne
 800c3da:	6059      	strne	r1, [r3, #4]
 800c3dc:	6863      	ldr	r3, [r4, #4]
 800c3de:	bf08      	it	eq
 800c3e0:	f8c8 1000 	streq.w	r1, [r8]
 800c3e4:	5162      	str	r2, [r4, r5]
 800c3e6:	604b      	str	r3, [r1, #4]
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f000 f82f 	bl	800c44c <__malloc_unlock>
 800c3ee:	f104 000b 	add.w	r0, r4, #11
 800c3f2:	1d23      	adds	r3, r4, #4
 800c3f4:	f020 0007 	bic.w	r0, r0, #7
 800c3f8:	1ac2      	subs	r2, r0, r3
 800c3fa:	bf1c      	itt	ne
 800c3fc:	1a1b      	subne	r3, r3, r0
 800c3fe:	50a3      	strne	r3, [r4, r2]
 800c400:	e7af      	b.n	800c362 <_malloc_r+0x22>
 800c402:	6862      	ldr	r2, [r4, #4]
 800c404:	42a3      	cmp	r3, r4
 800c406:	bf0c      	ite	eq
 800c408:	f8c8 2000 	streq.w	r2, [r8]
 800c40c:	605a      	strne	r2, [r3, #4]
 800c40e:	e7eb      	b.n	800c3e8 <_malloc_r+0xa8>
 800c410:	4623      	mov	r3, r4
 800c412:	6864      	ldr	r4, [r4, #4]
 800c414:	e7ae      	b.n	800c374 <_malloc_r+0x34>
 800c416:	463c      	mov	r4, r7
 800c418:	687f      	ldr	r7, [r7, #4]
 800c41a:	e7b6      	b.n	800c38a <_malloc_r+0x4a>
 800c41c:	461a      	mov	r2, r3
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	42a3      	cmp	r3, r4
 800c422:	d1fb      	bne.n	800c41c <_malloc_r+0xdc>
 800c424:	2300      	movs	r3, #0
 800c426:	6053      	str	r3, [r2, #4]
 800c428:	e7de      	b.n	800c3e8 <_malloc_r+0xa8>
 800c42a:	230c      	movs	r3, #12
 800c42c:	6033      	str	r3, [r6, #0]
 800c42e:	4630      	mov	r0, r6
 800c430:	f000 f80c 	bl	800c44c <__malloc_unlock>
 800c434:	e794      	b.n	800c360 <_malloc_r+0x20>
 800c436:	6005      	str	r5, [r0, #0]
 800c438:	e7d6      	b.n	800c3e8 <_malloc_r+0xa8>
 800c43a:	bf00      	nop
 800c43c:	2000522c 	.word	0x2000522c

0800c440 <__malloc_lock>:
 800c440:	4801      	ldr	r0, [pc, #4]	@ (800c448 <__malloc_lock+0x8>)
 800c442:	f7ff bf01 	b.w	800c248 <__retarget_lock_acquire_recursive>
 800c446:	bf00      	nop
 800c448:	20005224 	.word	0x20005224

0800c44c <__malloc_unlock>:
 800c44c:	4801      	ldr	r0, [pc, #4]	@ (800c454 <__malloc_unlock+0x8>)
 800c44e:	f7ff befc 	b.w	800c24a <__retarget_lock_release_recursive>
 800c452:	bf00      	nop
 800c454:	20005224 	.word	0x20005224

0800c458 <__ssputs_r>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	688e      	ldr	r6, [r1, #8]
 800c45e:	461f      	mov	r7, r3
 800c460:	42be      	cmp	r6, r7
 800c462:	680b      	ldr	r3, [r1, #0]
 800c464:	4682      	mov	sl, r0
 800c466:	460c      	mov	r4, r1
 800c468:	4690      	mov	r8, r2
 800c46a:	d82d      	bhi.n	800c4c8 <__ssputs_r+0x70>
 800c46c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c470:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c474:	d026      	beq.n	800c4c4 <__ssputs_r+0x6c>
 800c476:	6965      	ldr	r5, [r4, #20]
 800c478:	6909      	ldr	r1, [r1, #16]
 800c47a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c47e:	eba3 0901 	sub.w	r9, r3, r1
 800c482:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c486:	1c7b      	adds	r3, r7, #1
 800c488:	444b      	add	r3, r9
 800c48a:	106d      	asrs	r5, r5, #1
 800c48c:	429d      	cmp	r5, r3
 800c48e:	bf38      	it	cc
 800c490:	461d      	movcc	r5, r3
 800c492:	0553      	lsls	r3, r2, #21
 800c494:	d527      	bpl.n	800c4e6 <__ssputs_r+0x8e>
 800c496:	4629      	mov	r1, r5
 800c498:	f7ff ff52 	bl	800c340 <_malloc_r>
 800c49c:	4606      	mov	r6, r0
 800c49e:	b360      	cbz	r0, 800c4fa <__ssputs_r+0xa2>
 800c4a0:	6921      	ldr	r1, [r4, #16]
 800c4a2:	464a      	mov	r2, r9
 800c4a4:	f7ff fed2 	bl	800c24c <memcpy>
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	6126      	str	r6, [r4, #16]
 800c4b6:	6165      	str	r5, [r4, #20]
 800c4b8:	444e      	add	r6, r9
 800c4ba:	eba5 0509 	sub.w	r5, r5, r9
 800c4be:	6026      	str	r6, [r4, #0]
 800c4c0:	60a5      	str	r5, [r4, #8]
 800c4c2:	463e      	mov	r6, r7
 800c4c4:	42be      	cmp	r6, r7
 800c4c6:	d900      	bls.n	800c4ca <__ssputs_r+0x72>
 800c4c8:	463e      	mov	r6, r7
 800c4ca:	6820      	ldr	r0, [r4, #0]
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	4641      	mov	r1, r8
 800c4d0:	f000 faa8 	bl	800ca24 <memmove>
 800c4d4:	68a3      	ldr	r3, [r4, #8]
 800c4d6:	1b9b      	subs	r3, r3, r6
 800c4d8:	60a3      	str	r3, [r4, #8]
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	4433      	add	r3, r6
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e6:	462a      	mov	r2, r5
 800c4e8:	f000 fac6 	bl	800ca78 <_realloc_r>
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d1e0      	bne.n	800c4b4 <__ssputs_r+0x5c>
 800c4f2:	6921      	ldr	r1, [r4, #16]
 800c4f4:	4650      	mov	r0, sl
 800c4f6:	f7ff feb7 	bl	800c268 <_free_r>
 800c4fa:	230c      	movs	r3, #12
 800c4fc:	f8ca 3000 	str.w	r3, [sl]
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	e7e9      	b.n	800c4e2 <__ssputs_r+0x8a>
	...

0800c510 <_svfiprintf_r>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	4698      	mov	r8, r3
 800c516:	898b      	ldrh	r3, [r1, #12]
 800c518:	061b      	lsls	r3, r3, #24
 800c51a:	b09d      	sub	sp, #116	@ 0x74
 800c51c:	4607      	mov	r7, r0
 800c51e:	460d      	mov	r5, r1
 800c520:	4614      	mov	r4, r2
 800c522:	d510      	bpl.n	800c546 <_svfiprintf_r+0x36>
 800c524:	690b      	ldr	r3, [r1, #16]
 800c526:	b973      	cbnz	r3, 800c546 <_svfiprintf_r+0x36>
 800c528:	2140      	movs	r1, #64	@ 0x40
 800c52a:	f7ff ff09 	bl	800c340 <_malloc_r>
 800c52e:	6028      	str	r0, [r5, #0]
 800c530:	6128      	str	r0, [r5, #16]
 800c532:	b930      	cbnz	r0, 800c542 <_svfiprintf_r+0x32>
 800c534:	230c      	movs	r3, #12
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	f04f 30ff 	mov.w	r0, #4294967295
 800c53c:	b01d      	add	sp, #116	@ 0x74
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	2340      	movs	r3, #64	@ 0x40
 800c544:	616b      	str	r3, [r5, #20]
 800c546:	2300      	movs	r3, #0
 800c548:	9309      	str	r3, [sp, #36]	@ 0x24
 800c54a:	2320      	movs	r3, #32
 800c54c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c550:	f8cd 800c 	str.w	r8, [sp, #12]
 800c554:	2330      	movs	r3, #48	@ 0x30
 800c556:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c6f4 <_svfiprintf_r+0x1e4>
 800c55a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c55e:	f04f 0901 	mov.w	r9, #1
 800c562:	4623      	mov	r3, r4
 800c564:	469a      	mov	sl, r3
 800c566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c56a:	b10a      	cbz	r2, 800c570 <_svfiprintf_r+0x60>
 800c56c:	2a25      	cmp	r2, #37	@ 0x25
 800c56e:	d1f9      	bne.n	800c564 <_svfiprintf_r+0x54>
 800c570:	ebba 0b04 	subs.w	fp, sl, r4
 800c574:	d00b      	beq.n	800c58e <_svfiprintf_r+0x7e>
 800c576:	465b      	mov	r3, fp
 800c578:	4622      	mov	r2, r4
 800c57a:	4629      	mov	r1, r5
 800c57c:	4638      	mov	r0, r7
 800c57e:	f7ff ff6b 	bl	800c458 <__ssputs_r>
 800c582:	3001      	adds	r0, #1
 800c584:	f000 80a7 	beq.w	800c6d6 <_svfiprintf_r+0x1c6>
 800c588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c58a:	445a      	add	r2, fp
 800c58c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c58e:	f89a 3000 	ldrb.w	r3, [sl]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 809f 	beq.w	800c6d6 <_svfiprintf_r+0x1c6>
 800c598:	2300      	movs	r3, #0
 800c59a:	f04f 32ff 	mov.w	r2, #4294967295
 800c59e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a2:	f10a 0a01 	add.w	sl, sl, #1
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	9307      	str	r3, [sp, #28]
 800c5aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5b0:	4654      	mov	r4, sl
 800c5b2:	2205      	movs	r2, #5
 800c5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b8:	484e      	ldr	r0, [pc, #312]	@ (800c6f4 <_svfiprintf_r+0x1e4>)
 800c5ba:	f7f3 fe09 	bl	80001d0 <memchr>
 800c5be:	9a04      	ldr	r2, [sp, #16]
 800c5c0:	b9d8      	cbnz	r0, 800c5fa <_svfiprintf_r+0xea>
 800c5c2:	06d0      	lsls	r0, r2, #27
 800c5c4:	bf44      	itt	mi
 800c5c6:	2320      	movmi	r3, #32
 800c5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5cc:	0711      	lsls	r1, r2, #28
 800c5ce:	bf44      	itt	mi
 800c5d0:	232b      	movmi	r3, #43	@ 0x2b
 800c5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5da:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5dc:	d015      	beq.n	800c60a <_svfiprintf_r+0xfa>
 800c5de:	9a07      	ldr	r2, [sp, #28]
 800c5e0:	4654      	mov	r4, sl
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	f04f 0c0a 	mov.w	ip, #10
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ee:	3b30      	subs	r3, #48	@ 0x30
 800c5f0:	2b09      	cmp	r3, #9
 800c5f2:	d94b      	bls.n	800c68c <_svfiprintf_r+0x17c>
 800c5f4:	b1b0      	cbz	r0, 800c624 <_svfiprintf_r+0x114>
 800c5f6:	9207      	str	r2, [sp, #28]
 800c5f8:	e014      	b.n	800c624 <_svfiprintf_r+0x114>
 800c5fa:	eba0 0308 	sub.w	r3, r0, r8
 800c5fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c602:	4313      	orrs	r3, r2
 800c604:	9304      	str	r3, [sp, #16]
 800c606:	46a2      	mov	sl, r4
 800c608:	e7d2      	b.n	800c5b0 <_svfiprintf_r+0xa0>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d19      	adds	r1, r3, #4
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	9103      	str	r1, [sp, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfbb      	ittet	lt
 800c616:	425b      	neglt	r3, r3
 800c618:	f042 0202 	orrlt.w	r2, r2, #2
 800c61c:	9307      	strge	r3, [sp, #28]
 800c61e:	9307      	strlt	r3, [sp, #28]
 800c620:	bfb8      	it	lt
 800c622:	9204      	strlt	r2, [sp, #16]
 800c624:	7823      	ldrb	r3, [r4, #0]
 800c626:	2b2e      	cmp	r3, #46	@ 0x2e
 800c628:	d10a      	bne.n	800c640 <_svfiprintf_r+0x130>
 800c62a:	7863      	ldrb	r3, [r4, #1]
 800c62c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c62e:	d132      	bne.n	800c696 <_svfiprintf_r+0x186>
 800c630:	9b03      	ldr	r3, [sp, #12]
 800c632:	1d1a      	adds	r2, r3, #4
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	9203      	str	r2, [sp, #12]
 800c638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c63c:	3402      	adds	r4, #2
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c704 <_svfiprintf_r+0x1f4>
 800c644:	7821      	ldrb	r1, [r4, #0]
 800c646:	2203      	movs	r2, #3
 800c648:	4650      	mov	r0, sl
 800c64a:	f7f3 fdc1 	bl	80001d0 <memchr>
 800c64e:	b138      	cbz	r0, 800c660 <_svfiprintf_r+0x150>
 800c650:	9b04      	ldr	r3, [sp, #16]
 800c652:	eba0 000a 	sub.w	r0, r0, sl
 800c656:	2240      	movs	r2, #64	@ 0x40
 800c658:	4082      	lsls	r2, r0
 800c65a:	4313      	orrs	r3, r2
 800c65c:	3401      	adds	r4, #1
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c664:	4824      	ldr	r0, [pc, #144]	@ (800c6f8 <_svfiprintf_r+0x1e8>)
 800c666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c66a:	2206      	movs	r2, #6
 800c66c:	f7f3 fdb0 	bl	80001d0 <memchr>
 800c670:	2800      	cmp	r0, #0
 800c672:	d036      	beq.n	800c6e2 <_svfiprintf_r+0x1d2>
 800c674:	4b21      	ldr	r3, [pc, #132]	@ (800c6fc <_svfiprintf_r+0x1ec>)
 800c676:	bb1b      	cbnz	r3, 800c6c0 <_svfiprintf_r+0x1b0>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	3307      	adds	r3, #7
 800c67c:	f023 0307 	bic.w	r3, r3, #7
 800c680:	3308      	adds	r3, #8
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c686:	4433      	add	r3, r6
 800c688:	9309      	str	r3, [sp, #36]	@ 0x24
 800c68a:	e76a      	b.n	800c562 <_svfiprintf_r+0x52>
 800c68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c690:	460c      	mov	r4, r1
 800c692:	2001      	movs	r0, #1
 800c694:	e7a8      	b.n	800c5e8 <_svfiprintf_r+0xd8>
 800c696:	2300      	movs	r3, #0
 800c698:	3401      	adds	r4, #1
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f04f 0c0a 	mov.w	ip, #10
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a8:	3a30      	subs	r2, #48	@ 0x30
 800c6aa:	2a09      	cmp	r2, #9
 800c6ac:	d903      	bls.n	800c6b6 <_svfiprintf_r+0x1a6>
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0c6      	beq.n	800c640 <_svfiprintf_r+0x130>
 800c6b2:	9105      	str	r1, [sp, #20]
 800c6b4:	e7c4      	b.n	800c640 <_svfiprintf_r+0x130>
 800c6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e7f0      	b.n	800c6a2 <_svfiprintf_r+0x192>
 800c6c0:	ab03      	add	r3, sp, #12
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c700 <_svfiprintf_r+0x1f0>)
 800c6c8:	a904      	add	r1, sp, #16
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	f3af 8000 	nop.w
 800c6d0:	1c42      	adds	r2, r0, #1
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	d1d6      	bne.n	800c684 <_svfiprintf_r+0x174>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	065b      	lsls	r3, r3, #25
 800c6da:	f53f af2d 	bmi.w	800c538 <_svfiprintf_r+0x28>
 800c6de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6e0:	e72c      	b.n	800c53c <_svfiprintf_r+0x2c>
 800c6e2:	ab03      	add	r3, sp, #12
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	462a      	mov	r2, r5
 800c6e8:	4b05      	ldr	r3, [pc, #20]	@ (800c700 <_svfiprintf_r+0x1f0>)
 800c6ea:	a904      	add	r1, sp, #16
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f000 f879 	bl	800c7e4 <_printf_i>
 800c6f2:	e7ed      	b.n	800c6d0 <_svfiprintf_r+0x1c0>
 800c6f4:	0800d70c 	.word	0x0800d70c
 800c6f8:	0800d716 	.word	0x0800d716
 800c6fc:	00000000 	.word	0x00000000
 800c700:	0800c459 	.word	0x0800c459
 800c704:	0800d712 	.word	0x0800d712

0800c708 <_printf_common>:
 800c708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c70c:	4616      	mov	r6, r2
 800c70e:	4698      	mov	r8, r3
 800c710:	688a      	ldr	r2, [r1, #8]
 800c712:	690b      	ldr	r3, [r1, #16]
 800c714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c718:	4293      	cmp	r3, r2
 800c71a:	bfb8      	it	lt
 800c71c:	4613      	movlt	r3, r2
 800c71e:	6033      	str	r3, [r6, #0]
 800c720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c724:	4607      	mov	r7, r0
 800c726:	460c      	mov	r4, r1
 800c728:	b10a      	cbz	r2, 800c72e <_printf_common+0x26>
 800c72a:	3301      	adds	r3, #1
 800c72c:	6033      	str	r3, [r6, #0]
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	0699      	lsls	r1, r3, #26
 800c732:	bf42      	ittt	mi
 800c734:	6833      	ldrmi	r3, [r6, #0]
 800c736:	3302      	addmi	r3, #2
 800c738:	6033      	strmi	r3, [r6, #0]
 800c73a:	6825      	ldr	r5, [r4, #0]
 800c73c:	f015 0506 	ands.w	r5, r5, #6
 800c740:	d106      	bne.n	800c750 <_printf_common+0x48>
 800c742:	f104 0a19 	add.w	sl, r4, #25
 800c746:	68e3      	ldr	r3, [r4, #12]
 800c748:	6832      	ldr	r2, [r6, #0]
 800c74a:	1a9b      	subs	r3, r3, r2
 800c74c:	42ab      	cmp	r3, r5
 800c74e:	dc26      	bgt.n	800c79e <_printf_common+0x96>
 800c750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c754:	6822      	ldr	r2, [r4, #0]
 800c756:	3b00      	subs	r3, #0
 800c758:	bf18      	it	ne
 800c75a:	2301      	movne	r3, #1
 800c75c:	0692      	lsls	r2, r2, #26
 800c75e:	d42b      	bmi.n	800c7b8 <_printf_common+0xb0>
 800c760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c764:	4641      	mov	r1, r8
 800c766:	4638      	mov	r0, r7
 800c768:	47c8      	blx	r9
 800c76a:	3001      	adds	r0, #1
 800c76c:	d01e      	beq.n	800c7ac <_printf_common+0xa4>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	6922      	ldr	r2, [r4, #16]
 800c772:	f003 0306 	and.w	r3, r3, #6
 800c776:	2b04      	cmp	r3, #4
 800c778:	bf02      	ittt	eq
 800c77a:	68e5      	ldreq	r5, [r4, #12]
 800c77c:	6833      	ldreq	r3, [r6, #0]
 800c77e:	1aed      	subeq	r5, r5, r3
 800c780:	68a3      	ldr	r3, [r4, #8]
 800c782:	bf0c      	ite	eq
 800c784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c788:	2500      	movne	r5, #0
 800c78a:	4293      	cmp	r3, r2
 800c78c:	bfc4      	itt	gt
 800c78e:	1a9b      	subgt	r3, r3, r2
 800c790:	18ed      	addgt	r5, r5, r3
 800c792:	2600      	movs	r6, #0
 800c794:	341a      	adds	r4, #26
 800c796:	42b5      	cmp	r5, r6
 800c798:	d11a      	bne.n	800c7d0 <_printf_common+0xc8>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e008      	b.n	800c7b0 <_printf_common+0xa8>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	4641      	mov	r1, r8
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	47c8      	blx	r9
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d103      	bne.n	800c7b4 <_printf_common+0xac>
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	e7c6      	b.n	800c746 <_printf_common+0x3e>
 800c7b8:	18e1      	adds	r1, r4, r3
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	2030      	movs	r0, #48	@ 0x30
 800c7be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7c2:	4422      	add	r2, r4
 800c7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7cc:	3302      	adds	r3, #2
 800c7ce:	e7c7      	b.n	800c760 <_printf_common+0x58>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	4641      	mov	r1, r8
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	47c8      	blx	r9
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d0e6      	beq.n	800c7ac <_printf_common+0xa4>
 800c7de:	3601      	adds	r6, #1
 800c7e0:	e7d9      	b.n	800c796 <_printf_common+0x8e>
	...

0800c7e4 <_printf_i>:
 800c7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	7e0f      	ldrb	r7, [r1, #24]
 800c7ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7ec:	2f78      	cmp	r7, #120	@ 0x78
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	469a      	mov	sl, r3
 800c7f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7fa:	d807      	bhi.n	800c80c <_printf_i+0x28>
 800c7fc:	2f62      	cmp	r7, #98	@ 0x62
 800c7fe:	d80a      	bhi.n	800c816 <_printf_i+0x32>
 800c800:	2f00      	cmp	r7, #0
 800c802:	f000 80d2 	beq.w	800c9aa <_printf_i+0x1c6>
 800c806:	2f58      	cmp	r7, #88	@ 0x58
 800c808:	f000 80b9 	beq.w	800c97e <_printf_i+0x19a>
 800c80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c814:	e03a      	b.n	800c88c <_printf_i+0xa8>
 800c816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c81a:	2b15      	cmp	r3, #21
 800c81c:	d8f6      	bhi.n	800c80c <_printf_i+0x28>
 800c81e:	a101      	add	r1, pc, #4	@ (adr r1, 800c824 <_printf_i+0x40>)
 800c820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c824:	0800c87d 	.word	0x0800c87d
 800c828:	0800c891 	.word	0x0800c891
 800c82c:	0800c80d 	.word	0x0800c80d
 800c830:	0800c80d 	.word	0x0800c80d
 800c834:	0800c80d 	.word	0x0800c80d
 800c838:	0800c80d 	.word	0x0800c80d
 800c83c:	0800c891 	.word	0x0800c891
 800c840:	0800c80d 	.word	0x0800c80d
 800c844:	0800c80d 	.word	0x0800c80d
 800c848:	0800c80d 	.word	0x0800c80d
 800c84c:	0800c80d 	.word	0x0800c80d
 800c850:	0800c991 	.word	0x0800c991
 800c854:	0800c8bb 	.word	0x0800c8bb
 800c858:	0800c94b 	.word	0x0800c94b
 800c85c:	0800c80d 	.word	0x0800c80d
 800c860:	0800c80d 	.word	0x0800c80d
 800c864:	0800c9b3 	.word	0x0800c9b3
 800c868:	0800c80d 	.word	0x0800c80d
 800c86c:	0800c8bb 	.word	0x0800c8bb
 800c870:	0800c80d 	.word	0x0800c80d
 800c874:	0800c80d 	.word	0x0800c80d
 800c878:	0800c953 	.word	0x0800c953
 800c87c:	6833      	ldr	r3, [r6, #0]
 800c87e:	1d1a      	adds	r2, r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6032      	str	r2, [r6, #0]
 800c884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c88c:	2301      	movs	r3, #1
 800c88e:	e09d      	b.n	800c9cc <_printf_i+0x1e8>
 800c890:	6833      	ldr	r3, [r6, #0]
 800c892:	6820      	ldr	r0, [r4, #0]
 800c894:	1d19      	adds	r1, r3, #4
 800c896:	6031      	str	r1, [r6, #0]
 800c898:	0606      	lsls	r6, r0, #24
 800c89a:	d501      	bpl.n	800c8a0 <_printf_i+0xbc>
 800c89c:	681d      	ldr	r5, [r3, #0]
 800c89e:	e003      	b.n	800c8a8 <_printf_i+0xc4>
 800c8a0:	0645      	lsls	r5, r0, #25
 800c8a2:	d5fb      	bpl.n	800c89c <_printf_i+0xb8>
 800c8a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8a8:	2d00      	cmp	r5, #0
 800c8aa:	da03      	bge.n	800c8b4 <_printf_i+0xd0>
 800c8ac:	232d      	movs	r3, #45	@ 0x2d
 800c8ae:	426d      	negs	r5, r5
 800c8b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8b4:	4859      	ldr	r0, [pc, #356]	@ (800ca1c <_printf_i+0x238>)
 800c8b6:	230a      	movs	r3, #10
 800c8b8:	e011      	b.n	800c8de <_printf_i+0xfa>
 800c8ba:	6821      	ldr	r1, [r4, #0]
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	0608      	lsls	r0, r1, #24
 800c8c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8c4:	d402      	bmi.n	800c8cc <_printf_i+0xe8>
 800c8c6:	0649      	lsls	r1, r1, #25
 800c8c8:	bf48      	it	mi
 800c8ca:	b2ad      	uxthmi	r5, r5
 800c8cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8ce:	4853      	ldr	r0, [pc, #332]	@ (800ca1c <_printf_i+0x238>)
 800c8d0:	6033      	str	r3, [r6, #0]
 800c8d2:	bf14      	ite	ne
 800c8d4:	230a      	movne	r3, #10
 800c8d6:	2308      	moveq	r3, #8
 800c8d8:	2100      	movs	r1, #0
 800c8da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8de:	6866      	ldr	r6, [r4, #4]
 800c8e0:	60a6      	str	r6, [r4, #8]
 800c8e2:	2e00      	cmp	r6, #0
 800c8e4:	bfa2      	ittt	ge
 800c8e6:	6821      	ldrge	r1, [r4, #0]
 800c8e8:	f021 0104 	bicge.w	r1, r1, #4
 800c8ec:	6021      	strge	r1, [r4, #0]
 800c8ee:	b90d      	cbnz	r5, 800c8f4 <_printf_i+0x110>
 800c8f0:	2e00      	cmp	r6, #0
 800c8f2:	d04b      	beq.n	800c98c <_printf_i+0x1a8>
 800c8f4:	4616      	mov	r6, r2
 800c8f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8fa:	fb03 5711 	mls	r7, r3, r1, r5
 800c8fe:	5dc7      	ldrb	r7, [r0, r7]
 800c900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c904:	462f      	mov	r7, r5
 800c906:	42bb      	cmp	r3, r7
 800c908:	460d      	mov	r5, r1
 800c90a:	d9f4      	bls.n	800c8f6 <_printf_i+0x112>
 800c90c:	2b08      	cmp	r3, #8
 800c90e:	d10b      	bne.n	800c928 <_printf_i+0x144>
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	07df      	lsls	r7, r3, #31
 800c914:	d508      	bpl.n	800c928 <_printf_i+0x144>
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	6861      	ldr	r1, [r4, #4]
 800c91a:	4299      	cmp	r1, r3
 800c91c:	bfde      	ittt	le
 800c91e:	2330      	movle	r3, #48	@ 0x30
 800c920:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c924:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c928:	1b92      	subs	r2, r2, r6
 800c92a:	6122      	str	r2, [r4, #16]
 800c92c:	f8cd a000 	str.w	sl, [sp]
 800c930:	464b      	mov	r3, r9
 800c932:	aa03      	add	r2, sp, #12
 800c934:	4621      	mov	r1, r4
 800c936:	4640      	mov	r0, r8
 800c938:	f7ff fee6 	bl	800c708 <_printf_common>
 800c93c:	3001      	adds	r0, #1
 800c93e:	d14a      	bne.n	800c9d6 <_printf_i+0x1f2>
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	b004      	add	sp, #16
 800c946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	f043 0320 	orr.w	r3, r3, #32
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	4833      	ldr	r0, [pc, #204]	@ (800ca20 <_printf_i+0x23c>)
 800c954:	2778      	movs	r7, #120	@ 0x78
 800c956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	6831      	ldr	r1, [r6, #0]
 800c95e:	061f      	lsls	r7, r3, #24
 800c960:	f851 5b04 	ldr.w	r5, [r1], #4
 800c964:	d402      	bmi.n	800c96c <_printf_i+0x188>
 800c966:	065f      	lsls	r7, r3, #25
 800c968:	bf48      	it	mi
 800c96a:	b2ad      	uxthmi	r5, r5
 800c96c:	6031      	str	r1, [r6, #0]
 800c96e:	07d9      	lsls	r1, r3, #31
 800c970:	bf44      	itt	mi
 800c972:	f043 0320 	orrmi.w	r3, r3, #32
 800c976:	6023      	strmi	r3, [r4, #0]
 800c978:	b11d      	cbz	r5, 800c982 <_printf_i+0x19e>
 800c97a:	2310      	movs	r3, #16
 800c97c:	e7ac      	b.n	800c8d8 <_printf_i+0xf4>
 800c97e:	4827      	ldr	r0, [pc, #156]	@ (800ca1c <_printf_i+0x238>)
 800c980:	e7e9      	b.n	800c956 <_printf_i+0x172>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	f023 0320 	bic.w	r3, r3, #32
 800c988:	6023      	str	r3, [r4, #0]
 800c98a:	e7f6      	b.n	800c97a <_printf_i+0x196>
 800c98c:	4616      	mov	r6, r2
 800c98e:	e7bd      	b.n	800c90c <_printf_i+0x128>
 800c990:	6833      	ldr	r3, [r6, #0]
 800c992:	6825      	ldr	r5, [r4, #0]
 800c994:	6961      	ldr	r1, [r4, #20]
 800c996:	1d18      	adds	r0, r3, #4
 800c998:	6030      	str	r0, [r6, #0]
 800c99a:	062e      	lsls	r6, r5, #24
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	d501      	bpl.n	800c9a4 <_printf_i+0x1c0>
 800c9a0:	6019      	str	r1, [r3, #0]
 800c9a2:	e002      	b.n	800c9aa <_printf_i+0x1c6>
 800c9a4:	0668      	lsls	r0, r5, #25
 800c9a6:	d5fb      	bpl.n	800c9a0 <_printf_i+0x1bc>
 800c9a8:	8019      	strh	r1, [r3, #0]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	4616      	mov	r6, r2
 800c9b0:	e7bc      	b.n	800c92c <_printf_i+0x148>
 800c9b2:	6833      	ldr	r3, [r6, #0]
 800c9b4:	1d1a      	adds	r2, r3, #4
 800c9b6:	6032      	str	r2, [r6, #0]
 800c9b8:	681e      	ldr	r6, [r3, #0]
 800c9ba:	6862      	ldr	r2, [r4, #4]
 800c9bc:	2100      	movs	r1, #0
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f7f3 fc06 	bl	80001d0 <memchr>
 800c9c4:	b108      	cbz	r0, 800c9ca <_printf_i+0x1e6>
 800c9c6:	1b80      	subs	r0, r0, r6
 800c9c8:	6060      	str	r0, [r4, #4]
 800c9ca:	6863      	ldr	r3, [r4, #4]
 800c9cc:	6123      	str	r3, [r4, #16]
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9d4:	e7aa      	b.n	800c92c <_printf_i+0x148>
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	4632      	mov	r2, r6
 800c9da:	4649      	mov	r1, r9
 800c9dc:	4640      	mov	r0, r8
 800c9de:	47d0      	blx	sl
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d0ad      	beq.n	800c940 <_printf_i+0x15c>
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	079b      	lsls	r3, r3, #30
 800c9e8:	d413      	bmi.n	800ca12 <_printf_i+0x22e>
 800c9ea:	68e0      	ldr	r0, [r4, #12]
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	4298      	cmp	r0, r3
 800c9f0:	bfb8      	it	lt
 800c9f2:	4618      	movlt	r0, r3
 800c9f4:	e7a6      	b.n	800c944 <_printf_i+0x160>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4632      	mov	r2, r6
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	47d0      	blx	sl
 800ca00:	3001      	adds	r0, #1
 800ca02:	d09d      	beq.n	800c940 <_printf_i+0x15c>
 800ca04:	3501      	adds	r5, #1
 800ca06:	68e3      	ldr	r3, [r4, #12]
 800ca08:	9903      	ldr	r1, [sp, #12]
 800ca0a:	1a5b      	subs	r3, r3, r1
 800ca0c:	42ab      	cmp	r3, r5
 800ca0e:	dcf2      	bgt.n	800c9f6 <_printf_i+0x212>
 800ca10:	e7eb      	b.n	800c9ea <_printf_i+0x206>
 800ca12:	2500      	movs	r5, #0
 800ca14:	f104 0619 	add.w	r6, r4, #25
 800ca18:	e7f5      	b.n	800ca06 <_printf_i+0x222>
 800ca1a:	bf00      	nop
 800ca1c:	0800d71d 	.word	0x0800d71d
 800ca20:	0800d72e 	.word	0x0800d72e

0800ca24 <memmove>:
 800ca24:	4288      	cmp	r0, r1
 800ca26:	b510      	push	{r4, lr}
 800ca28:	eb01 0402 	add.w	r4, r1, r2
 800ca2c:	d902      	bls.n	800ca34 <memmove+0x10>
 800ca2e:	4284      	cmp	r4, r0
 800ca30:	4623      	mov	r3, r4
 800ca32:	d807      	bhi.n	800ca44 <memmove+0x20>
 800ca34:	1e43      	subs	r3, r0, #1
 800ca36:	42a1      	cmp	r1, r4
 800ca38:	d008      	beq.n	800ca4c <memmove+0x28>
 800ca3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca42:	e7f8      	b.n	800ca36 <memmove+0x12>
 800ca44:	4402      	add	r2, r0
 800ca46:	4601      	mov	r1, r0
 800ca48:	428a      	cmp	r2, r1
 800ca4a:	d100      	bne.n	800ca4e <memmove+0x2a>
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca56:	e7f7      	b.n	800ca48 <memmove+0x24>

0800ca58 <_sbrk_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d06      	ldr	r5, [pc, #24]	@ (800ca74 <_sbrk_r+0x1c>)
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	602b      	str	r3, [r5, #0]
 800ca64:	f7f6 f98c 	bl	8002d80 <_sbrk>
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	d102      	bne.n	800ca72 <_sbrk_r+0x1a>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	b103      	cbz	r3, 800ca72 <_sbrk_r+0x1a>
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	20005220 	.word	0x20005220

0800ca78 <_realloc_r>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	4680      	mov	r8, r0
 800ca7e:	4615      	mov	r5, r2
 800ca80:	460c      	mov	r4, r1
 800ca82:	b921      	cbnz	r1, 800ca8e <_realloc_r+0x16>
 800ca84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	4611      	mov	r1, r2
 800ca8a:	f7ff bc59 	b.w	800c340 <_malloc_r>
 800ca8e:	b92a      	cbnz	r2, 800ca9c <_realloc_r+0x24>
 800ca90:	f7ff fbea 	bl	800c268 <_free_r>
 800ca94:	2400      	movs	r4, #0
 800ca96:	4620      	mov	r0, r4
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	f000 f81a 	bl	800cad4 <_malloc_usable_size_r>
 800caa0:	4285      	cmp	r5, r0
 800caa2:	4606      	mov	r6, r0
 800caa4:	d802      	bhi.n	800caac <_realloc_r+0x34>
 800caa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800caaa:	d8f4      	bhi.n	800ca96 <_realloc_r+0x1e>
 800caac:	4629      	mov	r1, r5
 800caae:	4640      	mov	r0, r8
 800cab0:	f7ff fc46 	bl	800c340 <_malloc_r>
 800cab4:	4607      	mov	r7, r0
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d0ec      	beq.n	800ca94 <_realloc_r+0x1c>
 800caba:	42b5      	cmp	r5, r6
 800cabc:	462a      	mov	r2, r5
 800cabe:	4621      	mov	r1, r4
 800cac0:	bf28      	it	cs
 800cac2:	4632      	movcs	r2, r6
 800cac4:	f7ff fbc2 	bl	800c24c <memcpy>
 800cac8:	4621      	mov	r1, r4
 800caca:	4640      	mov	r0, r8
 800cacc:	f7ff fbcc 	bl	800c268 <_free_r>
 800cad0:	463c      	mov	r4, r7
 800cad2:	e7e0      	b.n	800ca96 <_realloc_r+0x1e>

0800cad4 <_malloc_usable_size_r>:
 800cad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cad8:	1f18      	subs	r0, r3, #4
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bfbc      	itt	lt
 800cade:	580b      	ldrlt	r3, [r1, r0]
 800cae0:	18c0      	addlt	r0, r0, r3
 800cae2:	4770      	bx	lr

0800cae4 <_init>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	bf00      	nop
 800cae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caea:	bc08      	pop	{r3}
 800caec:	469e      	mov	lr, r3
 800caee:	4770      	bx	lr

0800caf0 <_fini>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	bf00      	nop
 800caf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf6:	bc08      	pop	{r3}
 800caf8:	469e      	mov	lr, r3
 800cafa:	4770      	bx	lr
