
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  0800ec20  0800ec20  0000fc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc00  0800fc00  000111e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc00  0800fc00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc08  0800fc08  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc08  0800fc08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc0c  0800fc0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800fc10  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111e4  2**0
                  CONTENTS
 10 .bss          00005290  200001e8  200001e8  000111e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005478  20005478  000111e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df14  00000000  00000000  00011214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003daf  00000000  00000000  0002f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00032ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014f2  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000054ed  00000000  00000000  00035e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed7c  00000000  00000000  0003b36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7879  00000000  00000000  0005a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141964  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008324  00000000  00000000  001419a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00149ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec04 	.word	0x0800ec04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ec04 	.word	0x0800ec04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000edc:	f002 ffa0 	bl	8003e20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ee0:	f000 f896 	bl	8001010 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ee4:	f000 fc32 	bl	800174c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ee8:	f000 f994 	bl	8001214 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000eec:	f000 f9c0 	bl	8001270 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ef0:	f000 fa5c 	bl	80013ac <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ef4:	f000 faae 	bl	8001454 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000ef8:	f000 fb00 	bl	80014fc <MX_TIM4_Init>
	MX_TIM8_Init();
 8000efc:	f000 fb52 	bl	80015a4 <MX_TIM8_Init>
	MX_USART3_UART_Init();
 8000f00:	f000 fbfa 	bl	80016f8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000f04:	f000 f8e2 	bl	80010cc <MX_ADC1_Init>
	MX_ADC2_Init();
 8000f08:	f000 f932 	bl	8001170 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8000f0c:	f002 fefc 	bl	8003d08 <OLED_Init>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
 8000f10:	2205      	movs	r2, #5
 8000f12:	4925      	ldr	r1, [pc, #148]	@ (8000fa8 <main+0xd0>)
 8000f14:	4825      	ldr	r0, [pc, #148]	@ (8000fac <main+0xd4>)
 8000f16:	f007 f954 	bl	80081c2 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000f1a:	f008 f91f 	bl	800915c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000f1e:	4a24      	ldr	r2, [pc, #144]	@ (8000fb0 <main+0xd8>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4824      	ldr	r0, [pc, #144]	@ (8000fb4 <main+0xdc>)
 8000f24:	f008 f964 	bl	80091f0 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <main+0xe0>)
 8000f2c:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motorTask */
	motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f2e:	4a23      	ldr	r2, [pc, #140]	@ (8000fbc <main+0xe4>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4823      	ldr	r0, [pc, #140]	@ (8000fc0 <main+0xe8>)
 8000f34:	f008 f95c 	bl	80091f0 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a22      	ldr	r2, [pc, #136]	@ (8000fc4 <main+0xec>)
 8000f3c:	6013      	str	r3, [r2, #0]

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000f3e:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <main+0xf0>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4822      	ldr	r0, [pc, #136]	@ (8000fcc <main+0xf4>)
 8000f44:	f008 f954 	bl	80091f0 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <main+0xf8>)
 8000f4c:	6013      	str	r3, [r2, #0]

	/* creation of gyroTask */
	gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f4e:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <main+0xfc>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4821      	ldr	r0, [pc, #132]	@ (8000fd8 <main+0x100>)
 8000f54:	f008 f94c 	bl	80091f0 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a20      	ldr	r2, [pc, #128]	@ (8000fdc <main+0x104>)
 8000f5c:	6013      	str	r3, [r2, #0]

	/* creation of ultrasonicTask */
	ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL,
 8000f5e:	4a20      	ldr	r2, [pc, #128]	@ (8000fe0 <main+0x108>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4820      	ldr	r0, [pc, #128]	@ (8000fe4 <main+0x10c>)
 8000f64:	f008 f944 	bl	80091f0 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <main+0x110>)
 8000f6c:	6013      	str	r3, [r2, #0]
			&ultrasonicTask_attributes);

	/* creation of communicateTask */
	communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL,
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fec <main+0x114>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	481f      	ldr	r0, [pc, #124]	@ (8000ff0 <main+0x118>)
 8000f74:	f008 f93c 	bl	80091f0 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff4 <main+0x11c>)
 8000f7c:	6013      	str	r3, [r2, #0]
			&communicateTask_attributes);

	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(StartEncoderTask, NULL,
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <main+0x120>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	481e      	ldr	r0, [pc, #120]	@ (8000ffc <main+0x124>)
 8000f84:	f008 f934 	bl	80091f0 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001000 <main+0x128>)
 8000f8c:	6013      	str	r3, [r2, #0]
			&encoderTask_attributes);

	/* creation of IRTask */
	IRTaskHandle = osThreadNew(StartIRTask, NULL, &IRTask_attributes);
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001004 <main+0x12c>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	481d      	ldr	r0, [pc, #116]	@ (8001008 <main+0x130>)
 8000f94:	f008 f92c 	bl	80091f0 <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800100c <main+0x134>)
 8000f9c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f9e:	f008 f901 	bl	80091a4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <main+0xca>
 8000fa6:	bf00      	nop
 8000fa8:	200004b4 	.word	0x200004b4
 8000fac:	20000450 	.word	0x20000450
 8000fb0:	0800ecf4 	.word	0x0800ecf4
 8000fb4:	08002099 	.word	0x08002099
 8000fb8:	20000494 	.word	0x20000494
 8000fbc:	0800ed18 	.word	0x0800ed18
 8000fc0:	080020c1 	.word	0x080020c1
 8000fc4:	20000498 	.word	0x20000498
 8000fc8:	0800ed3c 	.word	0x0800ed3c
 8000fcc:	08002511 	.word	0x08002511
 8000fd0:	2000049c 	.word	0x2000049c
 8000fd4:	0800ed60 	.word	0x0800ed60
 8000fd8:	080026d1 	.word	0x080026d1
 8000fdc:	200004a0 	.word	0x200004a0
 8000fe0:	0800ed84 	.word	0x0800ed84
 8000fe4:	08002865 	.word	0x08002865
 8000fe8:	200004a4 	.word	0x200004a4
 8000fec:	0800eda8 	.word	0x0800eda8
 8000ff0:	080028b1 	.word	0x080028b1
 8000ff4:	200004a8 	.word	0x200004a8
 8000ff8:	0800edcc 	.word	0x0800edcc
 8000ffc:	08002fb1 	.word	0x08002fb1
 8001000:	200004ac 	.word	0x200004ac
 8001004:	0800edf0 	.word	0x0800edf0
 8001008:	080030a5 	.word	0x080030a5
 800100c:	200004b0 	.word	0x200004b0

08001010 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	@ 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00b fccf 	bl	800c9c2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <SystemClock_Config+0xb4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <SystemClock_Config+0xb4>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <SystemClock_Config+0xb4>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <SystemClock_Config+0xb8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1b      	ldr	r2, [pc, #108]	@ (80010c8 <SystemClock_Config+0xb8>)
 800105a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <SystemClock_Config+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001070:	2301      	movs	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fe95 	bl	8005db0 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x80>
		Error_Handler();
 800108c:	f002 f852 	bl	8003134 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 f8f8 	bl	80062a0 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xaa>
		Error_Handler();
 80010b6:	f002 f83d 	bl	8003134 <Error_Handler>
	}
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	@ 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <MX_ADC1_Init+0x9c>)
 80010e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_ADC1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_ADC1_Init+0x98>)
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <MX_ADC1_Init+0xa0>)
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_ADC1_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_ADC1_Init+0x98>)
 8001126:	2201      	movs	r2, #1
 8001128:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <MX_ADC1_Init+0x98>)
 800112c:	f002 ff0e 	bl	8003f4c <HAL_ADC_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001136:	f001 fffd 	bl	8003134 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800113e:	2301      	movs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_ADC1_Init+0x98>)
 800114c:	f003 f8e0 	bl	8004310 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001156:	f001 ffed 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000204 	.word	0x20000204
 8001168:	40012000 	.word	0x40012000
 800116c:	0f000001 	.word	0x0f000001

08001170 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0x98>)
 8001184:	4a21      	ldr	r2, [pc, #132]	@ (800120c <MX_ADC2_Init+0x9c>)
 8001186:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_ADC2_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_ADC2_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800119a:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011b0:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <MX_ADC2_Init+0xa0>)
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011bc:	2201      	movs	r2, #1
 80011be:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011d0:	f002 febc 	bl	8003f4c <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC2_Init+0x6e>
		Error_Handler();
 80011da:	f001 ffab 	bl	8003134 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011de:	2301      	movs	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0x98>)
 80011f0:	f003 f88e 	bl	8004310 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0x8e>
		Error_Handler();
 80011fa:	f001 ff9b 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000024c 	.word	0x2000024c
 800120c:	40012100 	.word	0x40012100
 8001210:	0f000001 	.word	0x0f000001

08001214 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001236:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f003 fdef 	bl	8004e34 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800125c:	f001 ff6a 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000294 	.word	0x20000294
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	@ 0x58
 8001274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001276:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001284:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800128e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2220      	movs	r2, #32
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00b fb8a 	bl	800c9c2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012ae:	4b3d      	ldr	r3, [pc, #244]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012b0:	4a3d      	ldr	r2, [pc, #244]	@ (80013a8 <MX_TIM1_Init+0x138>)
 80012b2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 80012b4:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012b6:	22a0      	movs	r2, #160	@ 0xa0
 80012b8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 80012c0:	4b38      	ldr	r3, [pc, #224]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012c6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80012da:	4832      	ldr	r0, [pc, #200]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012dc:	f005 f9c0 	bl	8006660 <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x7a>
		Error_Handler();
 80012e6:	f001 ff25 	bl	8003134 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80012f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012f4:	4619      	mov	r1, r3
 80012f6:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <MX_TIM1_Init+0x134>)
 80012f8:	f006 f834 	bl	8007364 <HAL_TIM_ConfigClockSource>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001302:	f001 ff17 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001306:	4827      	ldr	r0, [pc, #156]	@ (80013a4 <MX_TIM1_Init+0x134>)
 8001308:	f005 f9f9 	bl	80066fe <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001312:	f001 ff0f 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800131e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001322:	4619      	mov	r1, r3
 8001324:	481f      	ldr	r0, [pc, #124]	@ (80013a4 <MX_TIM1_Init+0x134>)
 8001326:	f006 fd8b 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001330:	f001 ff00 	bl	8003134 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	@ 0x60
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	220c      	movs	r2, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4813      	ldr	r0, [pc, #76]	@ (80013a4 <MX_TIM1_Init+0x134>)
 8001356:	f005 ff43 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8001360:	f001 fee8 	bl	8003134 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <MX_TIM1_Init+0x134>)
 8001388:	f006 fdd6 	bl	8007f38 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 8001392:	f001 fecf 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <MX_TIM1_Init+0x134>)
 8001398:	f002 f922 	bl	80035e0 <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	@ 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200002e8 	.word	0x200002e8
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2224      	movs	r2, #36	@ 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00b fb01 	bl	800c9c2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	@ (8001450 <MX_TIM2_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f0:	2303      	movs	r3, #3
 80013f2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f8:	2301      	movs	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001400:	230a      	movs	r3, #10
 8001402:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001408:	2301      	movs	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8001410:	230a      	movs	r3, #10
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_TIM2_Init+0xa4>)
 800141c:	f005 fc08 	bl	8006c30 <HAL_TIM_Encoder_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001426:	f001 fe85 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_TIM2_Init+0xa4>)
 8001438:	f006 fd02 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001442:	f001 fe77 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	@ 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000330 	.word	0x20000330

08001454 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	@ 0x30
 8001458:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2224      	movs	r2, #36	@ 0x24
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f00b faad 	bl	800c9c2 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001470:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 8001472:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <MX_TIM3_Init+0xa4>)
 8001474:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 8001484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001488:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001496:	2303      	movs	r3, #3
 8001498:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80014a6:	230a      	movs	r3, #10
 80014a8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014ae:	2301      	movs	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 80014b6:	230a      	movs	r3, #10
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 80014c2:	f005 fbb5 	bl	8006c30 <HAL_TIM_Encoder_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80014cc:	f001 fe32 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_TIM3_Init+0xa0>)
 80014de:	f006 fcaf 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80014e8:	f001 fe24 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3730      	adds	r7, #48	@ 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000378 	.word	0x20000378
 80014f8:	40000400 	.word	0x40000400

080014fc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001518:	4b20      	ldr	r3, [pc, #128]	@ (800159c <MX_TIM4_Init+0xa0>)
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <MX_TIM4_Init+0xa4>)
 800151c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16 - 1;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <MX_TIM4_Init+0xa0>)
 8001520:	220f      	movs	r2, #15
 8001522:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <MX_TIM4_Init+0xa0>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <MX_TIM4_Init+0xa0>)
 800152c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001530:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_TIM4_Init+0xa0>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_TIM4_Init+0xa0>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK) {
 800153e:	4817      	ldr	r0, [pc, #92]	@ (800159c <MX_TIM4_Init+0xa0>)
 8001540:	f005 f9fe 	bl	8006940 <HAL_TIM_IC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0x52>
		Error_Handler();
 800154a:	f001 fdf3 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	@ (800159c <MX_TIM4_Init+0xa0>)
 800155e:	f006 fc6f 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 8001568:	f001 fde4 	bl	8003134 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <MX_TIM4_Init+0xa0>)
 8001584:	f005 fd90 	bl	80070a8 <HAL_TIM_IC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM4_Init+0x96>
		Error_Handler();
 800158e:	f001 fdd1 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003c0 	.word	0x200003c0
 80015a0:	40000800 	.word	0x40000800

080015a4 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	@ 0x58
 80015a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00b f9f0 	bl	800c9c2 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80015e2:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80015e4:	4a43      	ldr	r2, [pc, #268]	@ (80016f4 <MX_TIM8_Init+0x150>)
 80015e6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80015e8:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 80015f4:	4b3e      	ldr	r3, [pc, #248]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80015f6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80015fa:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b3c      	ldr	r3, [pc, #240]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001602:	4b3b      	ldr	r3, [pc, #236]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b39      	ldr	r3, [pc, #228]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800160e:	4838      	ldr	r0, [pc, #224]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 8001610:	f005 f826 	bl	8006660 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM8_Init+0x7a>
		Error_Handler();
 800161a:	f001 fd8b 	bl	8003134 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001624:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001628:	4619      	mov	r1, r3
 800162a:	4831      	ldr	r0, [pc, #196]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 800162c:	f005 fe9a 	bl	8007364 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM8_Init+0x96>
		Error_Handler();
 8001636:	f001 fd7d 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800163a:	482d      	ldr	r0, [pc, #180]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 800163c:	f005 f85f 	bl	80066fe <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001646:	f001 fd75 	bl	8003134 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001652:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001656:	4619      	mov	r1, r3
 8001658:	4825      	ldr	r0, [pc, #148]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 800165a:	f006 fbf1 	bl	8007e40 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001664:	f001 fd66 	bl	8003134 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	@ 0x60
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 800168e:	f005 fda7 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001698:	f001 fd4c 	bl	8003134 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800169c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4812      	ldr	r0, [pc, #72]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80016a6:	f005 fd9b 	bl	80071e0 <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80016b0:	f001 fd40 	bl	8003134 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016cc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <MX_TIM8_Init+0x14c>)
 80016d8:	f006 fc2e 	bl	8007f38 <HAL_TIMEx_ConfigBreakDeadTime>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 80016e2:	f001 fd27 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	3758      	adds	r7, #88	@ 0x58
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000408 	.word	0x20000408
 80016f4:	40010400 	.word	0x40010400

080016f8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <MX_USART3_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_USART3_UART_Init+0x4c>)
 8001730:	f006 fc68 	bl	8008004 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800173a:	f001 fcfb 	bl	8003134 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000450 	.word	0x20000450
 8001748:	40004800 	.word	0x40004800

0800174c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	@ 0x30
 8001750:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a5a      	ldr	r2, [pc, #360]	@ (80018d4 <MX_GPIO_Init+0x188>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	4b54      	ldr	r3, [pc, #336]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a53      	ldr	r2, [pc, #332]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b4d      	ldr	r3, [pc, #308]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a4c      	ldr	r2, [pc, #304]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a45      	ldr	r2, [pc, #276]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b3f      	ldr	r3, [pc, #252]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a3e      	ldr	r2, [pc, #248]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <MX_GPIO_Init+0x188>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <MX_GPIO_Init+0x188>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001810:	4831      	ldr	r0, [pc, #196]	@ (80018d8 <MX_GPIO_Init+0x18c>)
 8001812:	f003 fadb 	bl	8004dcc <HAL_GPIO_WritePin>
	OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin,
 8001816:	2200      	movs	r2, #0
 8001818:	213c      	movs	r1, #60	@ 0x3c
 800181a:	4830      	ldr	r0, [pc, #192]	@ (80018dc <MX_GPIO_Init+0x190>)
 800181c:	f003 fad6 	bl	8004dcc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001826:	482e      	ldr	r0, [pc, #184]	@ (80018e0 <MX_GPIO_Init+0x194>)
 8001828:	f003 fad0 	bl	8004dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001832:	482c      	ldr	r0, [pc, #176]	@ (80018e4 <MX_GPIO_Init+0x198>)
 8001834:	f003 faca 	bl	8004dcc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 8001838:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 800183c:	61fb      	str	r3, [r7, #28]
			| OLED_DC_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4821      	ldr	r0, [pc, #132]	@ (80018d8 <MX_GPIO_Init+0x18c>)
 8001852:	f003 f91f 	bl	8004a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin;
 8001856:	233c      	movs	r3, #60	@ 0x3c
 8001858:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	481b      	ldr	r0, [pc, #108]	@ (80018dc <MX_GPIO_Init+0x190>)
 800186e:	f003 f911 	bl	8004a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 8001872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001876:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <MX_GPIO_Init+0x194>)
 800188c:	f003 f902 	bl	8004a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_PB_Pin */
	GPIO_InitStruct.Pin = USER_PB_Pin;
 8001890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001894:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800189a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <MX_GPIO_Init+0x198>)
 80018a8:	f003 f8f4 	bl	8004a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : Trigger_Pin */
	GPIO_InitStruct.Pin = Trigger_Pin;
 80018ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <MX_GPIO_Init+0x198>)
 80018c6:	f003 f8e5 	bl	8004a94 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	@ 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020c00 	.word	0x40020c00

080018e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// communication
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	HAL_UART_Receive_IT(&huart3, aRxBuffer, 5);
 80018f0:	2205      	movs	r2, #5
 80018f2:	4904      	ldr	r1, [pc, #16]	@ (8001904 <HAL_UART_RxCpltCallback+0x1c>)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <HAL_UART_RxCpltCallback+0x20>)
 80018f6:	f006 fc64 	bl	80081c2 <HAL_UART_Receive_IT>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200004b4 	.word	0x200004b4
 8001908:	20000450 	.word	0x20000450

0800190c <delay>:

// ultrasonic
void delay(uint16_t time) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <delay+0x30>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time)
 800191e:	bf00      	nop
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <delay+0x30>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3f9      	bcc.n	8001920 <delay+0x14>
		;
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200003c0 	.word	0x200003c0

08001940 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7f1b      	ldrb	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	f040 808a 	bne.w	8001a66 <HAL_TIM_IC_CaptureCallback+0x126>
		if (Is_First_Captured == 0) {
 8001952:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11b      	bne.n	8001992 <HAL_TIM_IC_CaptureCallback+0x52>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 fdc9 	bl	80074f4 <HAL_TIM_ReadCapturedValue>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001968:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;
 800196a:	4b43      	ldr	r3, [pc, #268]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x138>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a1a      	ldr	r2, [r3, #32]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 020a 	bic.w	r2, r2, #10
 800197e:	621a      	str	r2, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0202 	orr.w	r2, r2, #2
 800198e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001990:	e069      	b.n	8001a66 <HAL_TIM_IC_CaptureCallback+0x126>
		} else if (Is_First_Captured == 1) {
 8001992:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d165      	bne.n	8001a66 <HAL_TIM_IC_CaptureCallback+0x126>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f005 fda9 	bl	80074f4 <HAL_TIM_ReadCapturedValue>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b36      	ldr	r3, [pc, #216]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019a8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1) {
 80019b2:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dd0a      	ble.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x94>
				Difference = IC_Val2 - IC_Val1;
 80019be:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	e011      	b.n	80019f8 <HAL_TIM_IC_CaptureCallback+0xb8>
			else if (IC_Val1 > IC_Val2) {
 80019d4:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dd0b      	ble.n	80019f8 <HAL_TIM_IC_CaptureCallback+0xb8>
				Difference = (65535 - IC_Val1) + IC_Val2;
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019f6:	801a      	strh	r2, [r3, #0]
			uDistance = Difference * .0343 / 2;
 80019f8:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd91 	bl	8000524 <__aeabi_i2d>
 8001a02:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a1c:	f7fe ff16 	bl	800084c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8be 	bl	8000ba8 <__aeabi_d2uiz>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a32:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0;
 8001a34:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020a 	bic.w	r2, r2, #10
 8001a48:	621a      	str	r2, [r3, #32]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a12      	ldr	r2, [r2, #32]
 8001a54:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0202 	bic.w	r2, r2, #2
 8001a64:	60da      	str	r2, [r3, #12]
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	04816f00 	.word	0x04816f00
 8001a74:	3fa18fc5 	.word	0x3fa18fc5
 8001a78:	2000050c 	.word	0x2000050c
 8001a7c:	20000510 	.word	0x20000510
 8001a80:	20000514 	.word	0x20000514
 8001a84:	20000518 	.word	0x20000518
 8001a88:	2000051a 	.word	0x2000051a
 8001a8c:	200003c0 	.word	0x200003c0

08001a90 <HCSR04_Read>:

void HCSR04_Read(void) //Call when u want to get reading from US
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9a:	480b      	ldr	r0, [pc, #44]	@ (8001ac8 <HCSR04_Read+0x38>)
 8001a9c:	f003 f996 	bl	8004dcc <HAL_GPIO_WritePin>
	delay(10);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f7ff ff33 	bl	800190c <delay>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aac:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <HCSR04_Read+0x38>)
 8001aae:	f003 f98d 	bl	8004dcc <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HCSR04_Read+0x3c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HCSR04_Read+0x3c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0202 	orr.w	r2, r2, #2
 8001ac0:	60da      	str	r2, [r3, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	200003c0 	.word	0x200003c0

08001ad0 <moveCarStraight>:

// movement
void moveCarStraight(double distance) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	ed87 0b00 	vstr	d0, [r7]
	distance = distance * 75;
 8001ada:	a331      	add	r3, pc, #196	@ (adr r3, 8001ba0 <moveCarStraight+0xd0>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = SERVOCENTER;
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <moveCarStraight+0xb0>)
 8001af2:	2295      	movs	r2, #149	@ 0x95
 8001af4:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001af6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001afa:	f007 fc0b 	bl	8009314 <osDelay>
	e_brake = 0;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <moveCarStraight+0xb4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <moveCarStraight+0xb8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <moveCarStraight+0xbc>)
 8001b0c:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <moveCarStraight+0xc0>)
 8001b0e:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <moveCarStraight+0xc4>)
 8001b12:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <moveCarStraight+0xc0>)
 8001b14:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <moveCarStraight+0xc8>)
 8001b18:	4a1d      	ldr	r2, [pc, #116]	@ (8001b90 <moveCarStraight+0xc0>)
 8001b1a:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <moveCarStraight+0xcc>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b90 <moveCarStraight+0xc0>)
 8001b20:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <moveCarStraight+0xc8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcfc 	bl	8000524 <__aeabi_i2d>
 8001b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b30:	f7fe fbac 	bl	800028c <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f80c 	bl	8000b58 <__aeabi_d2iz>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <moveCarStraight+0xc8>)
 8001b44:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <moveCarStraight+0xcc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcea 	bl	8000524 <__aeabi_i2d>
 8001b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b54:	f7fe fb9a 	bl	800028c <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe fffa 	bl	8000b58 <__aeabi_d2iz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <moveCarStraight+0xcc>)
 8001b68:	6013      	str	r3, [r2, #0]
	while (finishCheck())
 8001b6a:	bf00      	nop
 8001b6c:	f000 f99a 	bl	8001ea4 <finishCheck>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1fa      	bne.n	8001b6c <moveCarStraight+0x9c>
		;
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	200004d0 	.word	0x200004d0
 8001b88:	200004cc 	.word	0x200004cc
 8001b8c:	200004d4 	.word	0x200004d4
 8001b90:	000124f8 	.word	0x000124f8
 8001b94:	200004d8 	.word	0x200004d8
 8001b98:	200004dc 	.word	0x200004dc
 8001b9c:	200004e0 	.word	0x200004e0
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	4052c000 	.word	0x4052c000

08001ba8 <moveCarStop>:

void moveCarStop() {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	e_brake = 1;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <moveCarStop+0x1c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
	pwmVal_servo = SERVOCENTER;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <moveCarStop+0x20>)
 8001bb4:	2295      	movs	r2, #149	@ 0x95
 8001bb6:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001bb8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001bbc:	f007 fbaa 	bl	8009314 <osDelay>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200004d0 	.word	0x200004d0
 8001bc8:	20000000 	.word	0x20000000

08001bcc <moveCarRight>:

void moveCarRight(double angle) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVORIGHT;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <moveCarRight+0x58>)
 8001bd8:	22e6      	movs	r2, #230	@ 0xe6
 8001bda:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001bdc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001be0:	f007 fb98 	bl	8009314 <osDelay>
	e_brake = 0;
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <moveCarRight+0x5c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <moveCarRight+0x60>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <moveCarRight+0x64>)
 8001bf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bfa:	f7fe fb45 	bl	8000288 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	490b      	ldr	r1, [pc, #44]	@ (8001c30 <moveCarRight+0x64>)
 8001c04:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001c08:	bf00      	nop
 8001c0a:	f000 f94b 	bl	8001ea4 <finishCheck>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1fa      	bne.n	8001c0a <moveCarRight+0x3e>
	pwmVal_servo = SERVOCENTER;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <moveCarRight+0x58>)
 8001c16:	2295      	movs	r2, #149	@ 0x95
 8001c18:	801a      	strh	r2, [r3, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	200004d0 	.word	0x200004d0
 8001c2c:	200004cc 	.word	0x200004cc
 8001c30:	200004e8 	.word	0x200004e8

08001c34 <moveCarLeft>:

void moveCarLeft(double angle) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = SERVOLEFT;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <moveCarLeft+0x58>)
 8001c40:	226a      	movs	r2, #106	@ 0x6a
 8001c42:	801a      	strh	r2, [r3, #0]
	osDelay(300);
 8001c44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c48:	f007 fb64 	bl	8009314 <osDelay>
	e_brake = 0;
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <moveCarLeft+0x5c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	times_acceptable = 0;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <moveCarLeft+0x60>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <moveCarLeft+0x64>)
 8001c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c62:	f7fe fb13 	bl	800028c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <moveCarLeft+0x64>)
 8001c6c:	e9c1 2300 	strd	r2, r3, [r1]
	while (finishCheck());
 8001c70:	bf00      	nop
 8001c72:	f000 f917 	bl	8001ea4 <finishCheck>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1fa      	bne.n	8001c72 <moveCarLeft+0x3e>
	pwmVal_servo = SERVOCENTER;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <moveCarLeft+0x58>)
 8001c7e:	2295      	movs	r2, #149	@ 0x95
 8001c80:	801a      	strh	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	200004d0 	.word	0x200004d0
 8001c94:	200004cc 	.word	0x200004cc
 8001c98:	200004e8 	.word	0x200004e8

08001c9c <PID_Control>:

// error correction
int PID_Control(int error, int right) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	if (right) { //rightMotor
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <PID_Control+0x42>
		if (error > 0) { //go forward
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dd0a      	ble.n	8001cc8 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	4835      	ldr	r0, [pc, #212]	@ (8001d8c <PID_Control+0xf0>)
 8001cb8:	f003 f888 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4832      	ldr	r0, [pc, #200]	@ (8001d8c <PID_Control+0xf0>)
 8001cc2:	f003 f883 	bl	8004dcc <HAL_GPIO_WritePin>
 8001cc6:	e022      	b.n	8001d0e <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2110      	movs	r1, #16
 8001ccc:	482f      	ldr	r0, [pc, #188]	@ (8001d8c <PID_Control+0xf0>)
 8001cce:	f003 f87d 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	482d      	ldr	r0, [pc, #180]	@ (8001d8c <PID_Control+0xf0>)
 8001cd8:	f003 f878 	bl	8004dcc <HAL_GPIO_WritePin>
 8001cdc:	e017      	b.n	8001d0e <PID_Control+0x72>
		}
	} else { //leftMotor
		if (error > 0) { //go forward
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd0a      	ble.n	8001cfa <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4828      	ldr	r0, [pc, #160]	@ (8001d8c <PID_Control+0xf0>)
 8001cea:	f003 f86f 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <PID_Control+0xf0>)
 8001cf4:	f003 f86a 	bl	8004dcc <HAL_GPIO_WritePin>
 8001cf8:	e009      	b.n	8001d0e <PID_Control+0x72>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4823      	ldr	r0, [pc, #140]	@ (8001d8c <PID_Control+0xf0>)
 8001d00:	f003 f864 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2104      	movs	r1, #4
 8001d08:	4820      	ldr	r0, [pc, #128]	@ (8001d8c <PID_Control+0xf0>)
 8001d0a:	f003 f85f 	bl	8004dcc <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bfb8      	it	lt
 8001d14:	425b      	neglt	r3, r3
 8001d16:	607b      	str	r3, [r7, #4]
	if (error > 2000) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d1e:	dd02      	ble.n	8001d26 <PID_Control+0x8a>
		return 3000;
 8001d20:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001d24:	e02d      	b.n	8001d82 <PID_Control+0xe6>
	} else if (error > 500) {
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d2c:	dd02      	ble.n	8001d34 <PID_Control+0x98>
		return 2000;
 8001d2e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d32:	e026      	b.n	8001d82 <PID_Control+0xe6>
	} else if (error > 200) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d38:	dd02      	ble.n	8001d40 <PID_Control+0xa4>
		return 1400;
 8001d3a:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001d3e:	e020      	b.n	8001d82 <PID_Control+0xe6>
	} else if (error > 100) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b64      	cmp	r3, #100	@ 0x64
 8001d44:	dd02      	ble.n	8001d4c <PID_Control+0xb0>
		return 1000;
 8001d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4a:	e01a      	b.n	8001d82 <PID_Control+0xe6>
	} else if (error > 3) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	dd07      	ble.n	8001d62 <PID_Control+0xc6>
		times_acceptable++;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <PID_Control+0xf4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <PID_Control+0xf4>)
 8001d5a:	6013      	str	r3, [r2, #0]
		return 500;
 8001d5c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d60:	e00f      	b.n	8001d82 <PID_Control+0xe6>
	} else if (error >= 1) {
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	dd06      	ble.n	8001d76 <PID_Control+0xda>
		times_acceptable++;
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <PID_Control+0xf4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <PID_Control+0xf4>)
 8001d70:	6013      	str	r3, [r2, #0]
		return 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e005      	b.n	8001d82 <PID_Control+0xe6>
	} else {
		times_acceptable++;
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <PID_Control+0xf4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <PID_Control+0xf4>)
 8001d7e:	6013      	str	r3, [r2, #0]
		return 0;
 8001d80:	2300      	movs	r3, #0
	}
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	200004cc 	.word	0x200004cc

08001d94 <PID_Angle>:

int PID_Angle(double errord, int right) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d9e:	6078      	str	r0, [r7, #4]
	int error = (int) (errord * 10);
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b3c      	ldr	r3, [pc, #240]	@ (8001e98 <PID_Angle+0x104>)
 8001da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001daa:	f7fe fc25 	bl	80005f8 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fecf 	bl	8000b58 <__aeabi_d2iz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	617b      	str	r3, [r7, #20]
	if (right) { //rightMotor
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d018      	beq.n	8001df6 <PID_Angle+0x62>
		if (error > 0) { //go forward
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd0a      	ble.n	8001de0 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4833      	ldr	r0, [pc, #204]	@ (8001e9c <PID_Angle+0x108>)
 8001dd0:	f002 fffc 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	4830      	ldr	r0, [pc, #192]	@ (8001e9c <PID_Angle+0x108>)
 8001dda:	f002 fff7 	bl	8004dcc <HAL_GPIO_WritePin>
 8001dde:	e022      	b.n	8001e26 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001de0:	2200      	movs	r2, #0
 8001de2:	2110      	movs	r1, #16
 8001de4:	482d      	ldr	r0, [pc, #180]	@ (8001e9c <PID_Angle+0x108>)
 8001de6:	f002 fff1 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2120      	movs	r1, #32
 8001dee:	482b      	ldr	r0, [pc, #172]	@ (8001e9c <PID_Angle+0x108>)
 8001df0:	f002 ffec 	bl	8004dcc <HAL_GPIO_WritePin>
 8001df4:	e017      	b.n	8001e26 <PID_Angle+0x92>
		}
	} else { //leftMotor
		if (error < 0) { //go forward
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da0a      	bge.n	8001e12 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2108      	movs	r1, #8
 8001e00:	4826      	ldr	r0, [pc, #152]	@ (8001e9c <PID_Angle+0x108>)
 8001e02:	f002 ffe3 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2104      	movs	r1, #4
 8001e0a:	4824      	ldr	r0, [pc, #144]	@ (8001e9c <PID_Angle+0x108>)
 8001e0c:	f002 ffde 	bl	8004dcc <HAL_GPIO_WritePin>
 8001e10:	e009      	b.n	8001e26 <PID_Angle+0x92>
		} else { //go backward
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001e12:	2200      	movs	r2, #0
 8001e14:	2108      	movs	r1, #8
 8001e16:	4821      	ldr	r0, [pc, #132]	@ (8001e9c <PID_Angle+0x108>)
 8001e18:	f002 ffd8 	bl	8004dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2104      	movs	r1, #4
 8001e20:	481e      	ldr	r0, [pc, #120]	@ (8001e9c <PID_Angle+0x108>)
 8001e22:	f002 ffd3 	bl	8004dcc <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bfb8      	it	lt
 8001e2c:	425b      	neglt	r3, r3
 8001e2e:	617b      	str	r3, [r7, #20]
	if (error > 300) {
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e36:	dd02      	ble.n	8001e3e <PID_Angle+0xaa>
		return 3000;
 8001e38:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001e3c:	e028      	b.n	8001e90 <PID_Angle+0xfc>
	} else if (error > 200) {
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e42:	dd02      	ble.n	8001e4a <PID_Angle+0xb6>
		return 2000;
 8001e44:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e48:	e022      	b.n	8001e90 <PID_Angle+0xfc>
	} else if (error > 150) {
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b96      	cmp	r3, #150	@ 0x96
 8001e4e:	dd02      	ble.n	8001e56 <PID_Angle+0xc2>
		return 1600;
 8001e50:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8001e54:	e01c      	b.n	8001e90 <PID_Angle+0xfc>
	} else if (error > 100) {
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b64      	cmp	r3, #100	@ 0x64
 8001e5a:	dd02      	ble.n	8001e62 <PID_Angle+0xce>
		return 1400;
 8001e5c:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8001e60:	e016      	b.n	8001e90 <PID_Angle+0xfc>
	} else if (error > 10) {
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b0a      	cmp	r3, #10
 8001e66:	dd02      	ble.n	8001e6e <PID_Angle+0xda>
		return 1000;
 8001e68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6c:	e010      	b.n	8001e90 <PID_Angle+0xfc>
	} else if (error >= 3) {
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	dd07      	ble.n	8001e84 <PID_Angle+0xf0>
		times_acceptable++;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <PID_Angle+0x10c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <PID_Angle+0x10c>)
 8001e7c:	6013      	str	r3, [r2, #0]
		return 600;
 8001e7e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001e82:	e005      	b.n	8001e90 <PID_Angle+0xfc>
	} else {
		times_acceptable++;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <PID_Angle+0x10c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <PID_Angle+0x10c>)
 8001e8c:	6013      	str	r3, [r2, #0]
		return 0;
 8001e8e:	2300      	movs	r3, #0
	}
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40240000 	.word	0x40240000
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	200004cc 	.word	0x200004cc

08001ea4 <finishCheck>:
//		output = 0;
//	}
//	return output;
//}

int finishCheck() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	if (times_acceptable > 20) {
 8001ea8:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <finishCheck+0x48>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b14      	cmp	r3, #20
 8001eae:	dd1a      	ble.n	8001ee6 <finishCheck+0x42>
		e_brake = 1;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <finishCheck+0x4c>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <finishCheck+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	801a      	strh	r2, [r3, #0]
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <finishCheck+0x50>)
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <finishCheck+0x54>)
 8001ec2:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <finishCheck+0x58>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <finishCheck+0x5c>)
 8001eca:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <finishCheck+0x60>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <finishCheck+0x64>)
 8001ed2:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <finishCheck+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
		osDelay(300);
 8001eda:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ede:	f007 fa19 	bl	8009314 <osDelay>

		return 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <finishCheck+0x44>
	}
	return 1;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200004cc 	.word	0x200004cc
 8001ef0:	200004d0 	.word	0x200004d0
 8001ef4:	200004c8 	.word	0x200004c8
 8001ef8:	200004ca 	.word	0x200004ca
 8001efc:	200004d8 	.word	0x200004d8
 8001f00:	200004e0 	.word	0x200004e0
 8001f04:	200004d4 	.word	0x200004d4
 8001f08:	200004dc 	.word	0x200004dc

08001f0c <readByte>:

// gyro
void readByte(uint8_t addr, uint8_t *data) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 8001f18:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <readByte+0x48>)
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <readByte+0x4c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	b299      	uxth	r1, r3
 8001f26:	230a      	movs	r3, #10
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <readByte+0x48>)
 8001f2e:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <readByte+0x50>)
 8001f30:	f003 f8c4 	bl	80050bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <readByte+0x4c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	2314      	movs	r3, #20
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2302      	movs	r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <readByte+0x50>)
 8001f46:	f003 f9b7 	bl	80052b8 <HAL_I2C_Master_Receive>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200004f8 	.word	0x200004f8
 8001f58:	20000002 	.word	0x20000002
 8001f5c:	20000294 	.word	0x20000294

08001f60 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	4603      	mov	r3, r0
 8001f68:	460a      	mov	r2, r1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8001f70:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <writeByte+0x3c>)
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <writeByte+0x3c>)
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <writeByte+0x40>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	b299      	uxth	r1, r3
 8001f84:	2314      	movs	r3, #20
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	4a04      	ldr	r2, [pc, #16]	@ (8001f9c <writeByte+0x3c>)
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <writeByte+0x44>)
 8001f8e:	f003 f895 	bl	80050bc <HAL_I2C_Master_Transmit>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200004f8 	.word	0x200004f8
 8001fa0:	20000002 	.word	0x20000002
 8001fa4:	20000294 	.word	0x20000294

08001fa8 <gyroInit>:

void gyroInit() {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001fac:	2100      	movs	r1, #0
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7ff ffd6 	bl	8001f60 <writeByte>
	osDelay(10);
 8001fb4:	200a      	movs	r0, #10
 8001fb6:	f007 f9ad 	bl	8009314 <osDelay>
	writeByte(0x03, 0x80);
 8001fba:	2180      	movs	r1, #128	@ 0x80
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f7ff ffcf 	bl	8001f60 <writeByte>
	osDelay(10);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f007 f9a6 	bl	8009314 <osDelay>
	writeByte(0x07, 0x07);
 8001fc8:	2107      	movs	r1, #7
 8001fca:	2007      	movs	r0, #7
 8001fcc:	f7ff ffc8 	bl	8001f60 <writeByte>
	osDelay(10);
 8001fd0:	200a      	movs	r0, #10
 8001fd2:	f007 f99f 	bl	8009314 <osDelay>
	writeByte(0x06, 0x01);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f7ff ffc1 	bl	8001f60 <writeByte>
	osDelay(10);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f007 f998 	bl	8009314 <osDelay>
	writeByte(0x7F, 0x20);
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	207f      	movs	r0, #127	@ 0x7f
 8001fe8:	f7ff ffba 	bl	8001f60 <writeByte>
	osDelay(10);
 8001fec:	200a      	movs	r0, #10
 8001fee:	f007 f991 	bl	8009314 <osDelay>
	writeByte(0x01, 0x2F);
 8001ff2:	212f      	movs	r1, #47	@ 0x2f
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff ffb3 	bl	8001f60 <writeByte>
	osDelay(10);
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f007 f98a 	bl	8009314 <osDelay>
	writeByte(0x0, 0x00);
 8002000:	2100      	movs	r1, #0
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff ffac 	bl	8001f60 <writeByte>
	osDelay(10);
 8002008:	200a      	movs	r0, #10
 800200a:	f007 f983 	bl	8009314 <osDelay>
	writeByte(0x7F, 0x00);
 800200e:	2100      	movs	r1, #0
 8002010:	207f      	movs	r0, #127	@ 0x7f
 8002012:	f7ff ffa5 	bl	8001f60 <writeByte>
	osDelay(10);
 8002016:	200a      	movs	r0, #10
 8002018:	f007 f97c 	bl	8009314 <osDelay>
	writeByte(0x07, 0x00);
 800201c:	2100      	movs	r1, #0
 800201e:	2007      	movs	r0, #7
 8002020:	f7ff ff9e 	bl	8001f60 <writeByte>
	osDelay(10);
 8002024:	200a      	movs	r0, #10
 8002026:	f007 f975 	bl	8009314 <osDelay>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <IR_Left_Read>:

// ir sensor
void IR_Left_Read() {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002034:	4809      	ldr	r0, [pc, #36]	@ (800205c <IR_Left_Read+0x2c>)
 8002036:	f001 ffcd 	bl	8003fd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800203a:	210a      	movs	r1, #10
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <IR_Left_Read+0x2c>)
 800203e:	f002 f8ce 	bl	80041de <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc1);
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <IR_Left_Read+0x2c>)
 8002044:	f002 f956 	bl	80042f4 <HAL_ADC_GetValue>
 8002048:	4603      	mov	r3, r0
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <IR_Left_Read+0x30>)
 800204e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <IR_Left_Read+0x2c>)
 8002052:	f002 f891 	bl	8004178 <HAL_ADC_Stop>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000204 	.word	0x20000204
 8002060:	2000052c 	.word	0x2000052c

08002064 <IR_Right_Read>:

void IR_Right_Read() {
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8002068:	4809      	ldr	r0, [pc, #36]	@ (8002090 <IR_Right_Read+0x2c>)
 800206a:	f001 ffb3 	bl	8003fd4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 800206e:	210a      	movs	r1, #10
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <IR_Right_Read+0x2c>)
 8002072:	f002 f8b4 	bl	80041de <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc2);
 8002076:	4806      	ldr	r0, [pc, #24]	@ (8002090 <IR_Right_Read+0x2c>)
 8002078:	f002 f93c 	bl	80042f4 <HAL_ADC_GetValue>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <IR_Right_Read+0x30>)
 8002082:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <IR_Right_Read+0x2c>)
 8002086:	f002 f877 	bl	8004178 <HAL_ADC_Stop>
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000024c 	.word	0x2000024c
 8002094:	2000052e 	.word	0x2000052e

08002098 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80020a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <StartDefaultTask+0x20>)
 80020a6:	f002 feaa 	bl	8004dfe <HAL_GPIO_TogglePin>
		osDelay(2000);
 80020aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020ae:	f007 f931 	bl	8009314 <osDelay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80020b2:	bf00      	nop
 80020b4:	e7f4      	b.n	80020a0 <StartDefaultTask+0x8>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	00000000 	.word	0x00000000

080020c0 <StartMotorTask>:
 * @brief Function implementing the motorTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 80020c8:	4bab      	ldr	r3, [pc, #684]	@ (8002378 <StartMotorTask+0x2b8>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 80020ce:	4bab      	ldr	r3, [pc, #684]	@ (800237c <StartMotorTask+0x2bc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	801a      	strh	r2, [r3, #0]
	int straightCorrection = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80020d8:	2100      	movs	r1, #0
 80020da:	48a9      	ldr	r0, [pc, #676]	@ (8002380 <StartMotorTask+0x2c0>)
 80020dc:	f004 fb68 	bl	80067b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80020e0:	2104      	movs	r1, #4
 80020e2:	48a7      	ldr	r0, [pc, #668]	@ (8002380 <StartMotorTask+0x2c0>)
 80020e4:	f004 fb64 	bl	80067b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80020e8:	210c      	movs	r1, #12
 80020ea:	48a6      	ldr	r0, [pc, #664]	@ (8002384 <StartMotorTask+0x2c4>)
 80020ec:	f004 fb60 	bl	80067b0 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = SERVOCENTER; //Centre
 80020f0:	4ba4      	ldr	r3, [pc, #656]	@ (8002384 <StartMotorTask+0x2c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2295      	movs	r2, #149	@ 0x95
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80020f8:	2201      	movs	r2, #1
 80020fa:	2110      	movs	r1, #16
 80020fc:	48a2      	ldr	r0, [pc, #648]	@ (8002388 <StartMotorTask+0x2c8>)
 80020fe:	f002 fe65 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	2120      	movs	r1, #32
 8002106:	48a0      	ldr	r0, [pc, #640]	@ (8002388 <StartMotorTask+0x2c8>)
 8002108:	f002 fe60 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 800210c:	2201      	movs	r2, #1
 800210e:	2108      	movs	r1, #8
 8002110:	489d      	ldr	r0, [pc, #628]	@ (8002388 <StartMotorTask+0x2c8>)
 8002112:	f002 fe5b 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2104      	movs	r1, #4
 800211a:	489b      	ldr	r0, [pc, #620]	@ (8002388 <StartMotorTask+0x2c8>)
 800211c:	f002 fe56 	bl	8004dcc <HAL_GPIO_WritePin>
	osDelay(1000);
 8002120:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002124:	f007 f8f6 	bl	8009314 <osDelay>

	/* Infinite loop */
	for (;;) {
		htim1.Instance->CCR4 = pwmVal_servo;
 8002128:	4b98      	ldr	r3, [pc, #608]	@ (800238c <StartMotorTask+0x2cc>)
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	4b95      	ldr	r3, [pc, #596]	@ (8002384 <StartMotorTask+0x2c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
		double error_angle = target_angle - total_angle;
 8002132:	4b97      	ldr	r3, [pc, #604]	@ (8002390 <StartMotorTask+0x2d0>)
 8002134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002138:	4b96      	ldr	r3, [pc, #600]	@ (8002394 <StartMotorTask+0x2d4>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe f8a3 	bl	8000288 <__aeabi_dsub>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (pwmVal_servo < 127) { //106 //TURN LEFT
 800214a:	4b90      	ldr	r3, [pc, #576]	@ (800238c <StartMotorTask+0x2cc>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002150:	d84c      	bhi.n	80021ec <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1) * 1.072;  //right is master
 8002152:	2001      	movs	r0, #1
 8002154:	ed97 0b02 	vldr	d0, [r7, #8]
 8002158:	f7ff fe1c 	bl	8001d94 <PID_Angle>
 800215c:	4603      	mov	r3, r0
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9e0 	bl	8000524 <__aeabi_i2d>
 8002164:	a380      	add	r3, pc, #512	@ (adr r3, 8002368 <StartMotorTask+0x2a8>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe fa45 	bl	80005f8 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd17 	bl	8000ba8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <StartMotorTask+0x2b8>)
 8002180:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R * (0.59); //left is slave
 8002182:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <StartMotorTask+0x2b8>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9cc 	bl	8000524 <__aeabi_i2d>
 800218c:	a378      	add	r3, pc, #480	@ (adr r3, 8002370 <StartMotorTask+0x2b0>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fa31 	bl	80005f8 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fd03 	bl	8000ba8 <__aeabi_d2uiz>
 80021a2:	4603      	mov	r3, r0
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b75      	ldr	r3, [pc, #468]	@ (800237c <StartMotorTask+0x2bc>)
 80021a8:	801a      	strh	r2, [r3, #0]

			if (error_angle > 0) {
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021b6:	f7fe fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 80021c0:	2201      	movs	r2, #1
 80021c2:	2108      	movs	r1, #8
 80021c4:	4870      	ldr	r0, [pc, #448]	@ (8002388 <StartMotorTask+0x2c8>)
 80021c6:	f002 fe01 	bl	8004dcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2104      	movs	r1, #4
 80021ce:	486e      	ldr	r0, [pc, #440]	@ (8002388 <StartMotorTask+0x2c8>)
 80021d0:	f002 fdfc 	bl	8004dcc <HAL_GPIO_WritePin>
 80021d4:	e14f      	b.n	8002476 <StartMotorTask+0x3b6>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 80021d6:	2200      	movs	r2, #0
 80021d8:	2108      	movs	r1, #8
 80021da:	486b      	ldr	r0, [pc, #428]	@ (8002388 <StartMotorTask+0x2c8>)
 80021dc:	f002 fdf6 	bl	8004dcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2104      	movs	r1, #4
 80021e4:	4868      	ldr	r0, [pc, #416]	@ (8002388 <StartMotorTask+0x2c8>)
 80021e6:	f002 fdf1 	bl	8004dcc <HAL_GPIO_WritePin>
 80021ea:	e144      	b.n	8002476 <StartMotorTask+0x3b6>
			}
		}

		else if (pwmVal_servo > 189) { //230 //TURN RIGHT
 80021ec:	4b67      	ldr	r3, [pc, #412]	@ (800238c <StartMotorTask+0x2cc>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	2bbd      	cmp	r3, #189	@ 0xbd
 80021f2:	d93d      	bls.n	8002270 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 80021f4:	2000      	movs	r0, #0
 80021f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80021fa:	f7ff fdcb 	bl	8001d94 <PID_Angle>
 80021fe:	4603      	mov	r3, r0
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <StartMotorTask+0x2bc>)
 8002204:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L * (0.59); //right is slave
 8002206:	4b5d      	ldr	r3, [pc, #372]	@ (800237c <StartMotorTask+0x2bc>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f98a 	bl	8000524 <__aeabi_i2d>
 8002210:	a357      	add	r3, pc, #348	@ (adr r3, 8002370 <StartMotorTask+0x2b0>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe f9ef 	bl	80005f8 <__aeabi_dmul>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fcc1 	bl	8000ba8 <__aeabi_d2uiz>
 8002226:	4603      	mov	r3, r0
 8002228:	b29a      	uxth	r2, r3
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <StartMotorTask+0x2b8>)
 800222c:	801a      	strh	r2, [r3, #0]

			if (error_angle < 0) {
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800223a:	f7fe fc4f 	bl	8000adc <__aeabi_dcmplt>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002244:	2201      	movs	r2, #1
 8002246:	2110      	movs	r1, #16
 8002248:	484f      	ldr	r0, [pc, #316]	@ (8002388 <StartMotorTask+0x2c8>)
 800224a:	f002 fdbf 	bl	8004dcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2120      	movs	r1, #32
 8002252:	484d      	ldr	r0, [pc, #308]	@ (8002388 <StartMotorTask+0x2c8>)
 8002254:	f002 fdba 	bl	8004dcc <HAL_GPIO_WritePin>
 8002258:	e10d      	b.n	8002476 <StartMotorTask+0x3b6>
			} else {
				//go backward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 800225a:	2200      	movs	r2, #0
 800225c:	2110      	movs	r1, #16
 800225e:	484a      	ldr	r0, [pc, #296]	@ (8002388 <StartMotorTask+0x2c8>)
 8002260:	f002 fdb4 	bl	8004dcc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002264:	2201      	movs	r2, #1
 8002266:	2120      	movs	r1, #32
 8002268:	4847      	ldr	r0, [pc, #284]	@ (8002388 <StartMotorTask+0x2c8>)
 800226a:	f002 fdaf 	bl	8004dcc <HAL_GPIO_WritePin>
 800226e:	e102      	b.n	8002476 <StartMotorTask+0x3b6>
			}
		}

		else {

			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0) * 1.072;
 8002270:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <StartMotorTask+0x2d8>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b49      	ldr	r3, [pc, #292]	@ (800239c <StartMotorTask+0x2dc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fd0d 	bl	8001c9c <PID_Control>
 8002282:	4603      	mov	r3, r0
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f94d 	bl	8000524 <__aeabi_i2d>
 800228a:	a337      	add	r3, pc, #220	@ (adr r3, 8002368 <StartMotorTask+0x2a8>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc84 	bl	8000ba8 <__aeabi_d2uiz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <StartMotorTask+0x2b8>)
 80022a6:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)
 80022a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <StartMotorTask+0x2d8>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b3b      	ldr	r3, [pc, #236]	@ (800239c <StartMotorTask+0x2dc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022b6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
					> abs(rightTarget - rightEncoderVal)) {
 80022ba:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <StartMotorTask+0x2e0>)
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <StartMotorTask+0x2e4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1acb      	subs	r3, r1, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bfb8      	it	lt
 80022c8:	425b      	neglt	r3, r3
			if (abs(leftTarget - leftEncoderVal)
 80022ca:	429a      	cmp	r2, r3
 80022cc:	dd03      	ble.n	80022d6 <StartMotorTask+0x216>
				straightCorrection++;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e002      	b.n	80022dc <StartMotorTask+0x21c>
			} else {
				straightCorrection--;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3b01      	subs	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
			}
			if (abs(leftTarget - leftEncoderVal) < 100) {
 80022dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <StartMotorTask+0x2d8>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <StartMotorTask+0x2dc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 80022ea:	db08      	blt.n	80022fe <StartMotorTask+0x23e>
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <StartMotorTask+0x2d8>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <StartMotorTask+0x2dc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b63      	cmp	r3, #99	@ 0x63
 80022f8:	dc01      	bgt.n	80022fe <StartMotorTask+0x23e>
				straightCorrection = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <StartMotorTask+0x2e0>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b28      	ldr	r3, [pc, #160]	@ (80023a4 <StartMotorTask+0x2e4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fcc6 	bl	8001c9c <PID_Control>
 8002310:	4603      	mov	r3, r0
					+ straightCorrection;
 8002312:	b29a      	uxth	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4413      	add	r3, r2
 800231a:	b29a      	uxth	r2, r3
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)
 800231c:	4b17      	ldr	r3, [pc, #92]	@ (800237c <StartMotorTask+0x2bc>)
 800231e:	801a      	strh	r2, [r3, #0]

			if ((leftTarget - leftEncoderVal) < 0) {
 8002320:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <StartMotorTask+0x2d8>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <StartMotorTask+0x2dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	da64      	bge.n	80023f8 <StartMotorTask+0x338>
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <StartMotorTask+0x2e8>)
 8002334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002338:	f7fe fbee 	bl	8000b18 <__aeabi_dcmpgt>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <StartMotorTask+0x28a>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002342:	4b12      	ldr	r3, [pc, #72]	@ (800238c <StartMotorTask+0x2cc>)
 8002344:	22a8      	movs	r2, #168	@ 0xa8
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	e095      	b.n	8002476 <StartMotorTask+0x3b6>
				} else if (error_angle < -5) {
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <StartMotorTask+0x2ec>)
 8002350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002354:	f7fe fbc2 	bl	8000adc <__aeabi_dcmplt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d028      	beq.n	80023b0 <StartMotorTask+0x2f0>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <StartMotorTask+0x2cc>)
 8002360:	2282      	movs	r2, #130	@ 0x82
 8002362:	801a      	strh	r2, [r3, #0]
 8002364:	e087      	b.n	8002476 <StartMotorTask+0x3b6>
 8002366:	bf00      	nop
 8002368:	78d4fdf4 	.word	0x78d4fdf4
 800236c:	3ff126e9 	.word	0x3ff126e9
 8002370:	ae147ae1 	.word	0xae147ae1
 8002374:	3fe2e147 	.word	0x3fe2e147
 8002378:	200004c8 	.word	0x200004c8
 800237c:	200004ca 	.word	0x200004ca
 8002380:	20000408 	.word	0x20000408
 8002384:	200002e8 	.word	0x200002e8
 8002388:	40020000 	.word	0x40020000
 800238c:	20000000 	.word	0x20000000
 8002390:	200004e8 	.word	0x200004e8
 8002394:	200004f0 	.word	0x200004f0
 8002398:	200004e0 	.word	0x200004e0
 800239c:	200004d8 	.word	0x200004d8
 80023a0:	200004dc 	.word	0x200004dc
 80023a4:	200004d4 	.word	0x200004d4
 80023a8:	40140000 	.word	0x40140000
 80023ac:	c0140000 	.word	0xc0140000
				} else {
					pwmVal_servo = ((19 * error_angle) / 5 + SERVOCENTER);
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	4b48      	ldr	r3, [pc, #288]	@ (80024d8 <StartMotorTask+0x418>)
 80023b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ba:	f7fe f91d 	bl	80005f8 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4b44      	ldr	r3, [pc, #272]	@ (80024dc <StartMotorTask+0x41c>)
 80023cc:	f7fe fa3e 	bl	800084c <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	a33d      	add	r3, pc, #244	@ (adr r3, 80024d0 <StartMotorTask+0x410>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fd ff55 	bl	800028c <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fbdd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	4b3b      	ldr	r3, [pc, #236]	@ (80024e0 <StartMotorTask+0x420>)
 80023f4:	801a      	strh	r2, [r3, #0]
 80023f6:	e03e      	b.n	8002476 <StartMotorTask+0x3b6>
				}

			} else {
				if (error_angle > 5) { // if turn left, 106. right 230. left +. right -.
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b37      	ldr	r3, [pc, #220]	@ (80024dc <StartMotorTask+0x41c>)
 80023fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002402:	f7fe fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <StartMotorTask+0x354>
					pwmVal_servo = ((-19 * 5) / 5 + SERVOCENTER);
 800240c:	4b34      	ldr	r3, [pc, #208]	@ (80024e0 <StartMotorTask+0x420>)
 800240e:	2282      	movs	r2, #130	@ 0x82
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	e030      	b.n	8002476 <StartMotorTask+0x3b6>
				} else if (error_angle < -5) {
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <StartMotorTask+0x424>)
 800241a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800241e:	f7fe fb5d 	bl	8000adc <__aeabi_dcmplt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <StartMotorTask+0x370>
					pwmVal_servo = ((19 * 5) / 5 + SERVOCENTER);
 8002428:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <StartMotorTask+0x420>)
 800242a:	22a8      	movs	r2, #168	@ 0xa8
 800242c:	801a      	strh	r2, [r3, #0]
 800242e:	e022      	b.n	8002476 <StartMotorTask+0x3b6>
				} else {
					pwmVal_servo = ((-19 * error_angle) / 5 + SERVOCENTER);
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <StartMotorTask+0x428>)
 8002436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800243a:	f7fe f8dd 	bl	80005f8 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <StartMotorTask+0x41c>)
 800244c:	f7fe f9fe 	bl	800084c <__aeabi_ddiv>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	a31d      	add	r3, pc, #116	@ (adr r3, 80024d0 <StartMotorTask+0x410>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fd ff15 	bl	800028c <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fb9d 	bl	8000ba8 <__aeabi_d2uiz>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <StartMotorTask+0x420>)
 8002474:	801a      	strh	r2, [r3, #0]
			}

			//line correction equation is pwmVal = (19*error)/5 + SERVOCENTER
		}

		if (e_brake) {
 8002476:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <StartMotorTask+0x42c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00e      	beq.n	800249c <StartMotorTask+0x3dc>
			pwmVal_L = pwmVal_R = 0;
 800247e:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <StartMotorTask+0x430>)
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <StartMotorTask+0x430>)
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <StartMotorTask+0x434>)
 800248a:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <StartMotorTask+0x438>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <StartMotorTask+0x43c>)
 8002492:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <StartMotorTask+0x440>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1a      	ldr	r2, [pc, #104]	@ (8002504 <StartMotorTask+0x444>)
 800249a:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*1);
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <StartMotorTask+0x434>)
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <StartMotorTask+0x448>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R*1);
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <StartMotorTask+0x430>)
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <StartMotorTask+0x448>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
		osDelay(1);
 80024b0:	2001      	movs	r0, #1
 80024b2:	f006 ff2f 	bl	8009314 <osDelay>

		if (times_acceptable > 1000) {
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <StartMotorTask+0x44c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024be:	f77f ae33 	ble.w	8002128 <StartMotorTask+0x68>
			times_acceptable = 1001;
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <StartMotorTask+0x44c>)
 80024c4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80024c8:	601a      	str	r2, [r3, #0]
	for (;;) {
 80024ca:	e62d      	b.n	8002128 <StartMotorTask+0x68>
 80024cc:	f3af 8000 	nop.w
 80024d0:	00000000 	.word	0x00000000
 80024d4:	4062a000 	.word	0x4062a000
 80024d8:	40330000 	.word	0x40330000
 80024dc:	40140000 	.word	0x40140000
 80024e0:	20000000 	.word	0x20000000
 80024e4:	c0140000 	.word	0xc0140000
 80024e8:	c0330000 	.word	0xc0330000
 80024ec:	200004d0 	.word	0x200004d0
 80024f0:	200004c8 	.word	0x200004c8
 80024f4:	200004ca 	.word	0x200004ca
 80024f8:	200004d8 	.word	0x200004d8
 80024fc:	200004e0 	.word	0x200004e0
 8002500:	200004d4 	.word	0x200004d4
 8002504:	200004dc 	.word	0x200004dc
 8002508:	20000408 	.word	0x20000408
 800250c:	200004cc 	.word	0x200004cc

08002510 <StartOLEDTask>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument) {
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b0a0      	sub	sp, #128	@ 0x80
 8002514:	af04      	add	r7, sp, #16
 8002516:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOLEDTask */
	uint8_t usVal[20] = { 0 };
 8002518:	2300      	movs	r3, #0
 800251a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800251c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
	uint8_t gyroVal[20] = { 0 };
 800252a:	2300      	movs	r3, #0
 800252c:	647b      	str	r3, [r7, #68]	@ 0x44
 800252e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
	uint8_t encoderVal[20] = { 0 };
 800253c:	2300      	movs	r3, #0
 800253e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
	uint8_t irVal[20] = { 0 };
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
	uint8_t command[20] = { 0 };
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]

	for (;;) {
		sprintf(usVal, "Distance: %d \0", (int) uDistance);
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <StartOLEDTask+0x18c>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800257c:	4948      	ldr	r1, [pc, #288]	@ (80026a0 <StartOLEDTask+0x190>)
 800257e:	4618      	mov	r0, r3
 8002580:	f00a f9bc 	bl	800c8fc <siprintf>
		OLED_ShowString(0, 10, usVal);
 8002584:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002588:	461a      	mov	r2, r3
 800258a:	210a      	movs	r1, #10
 800258c:	2000      	movs	r0, #0
 800258e:	f001 fb89 	bl	8003ca4 <OLED_ShowString>

		int decimals = abs((int) ((total_angle - (int) (total_angle)) * 1000));
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <StartOLEDTask+0x194>)
 8002594:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002598:	4b42      	ldr	r3, [pc, #264]	@ (80026a4 <StartOLEDTask+0x194>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fad9 	bl	8000b58 <__aeabi_d2iz>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffbb 	bl	8000524 <__aeabi_i2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4620      	mov	r0, r4
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7fd fe67 	bl	8000288 <__aeabi_dsub>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <StartOLEDTask+0x198>)
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fac0 	bl	8000b58 <__aeabi_d2iz>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bfb8      	it	lt
 80025de:	425b      	neglt	r3, r3
 80025e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
		sprintf(gyroVal, "Gyro: %d.%d \0", (int) total_angle, decimals);
 80025e2:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <StartOLEDTask+0x194>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fab4 	bl	8000b58 <__aeabi_d2iz>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80025f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f8:	492c      	ldr	r1, [pc, #176]	@ (80026ac <StartOLEDTask+0x19c>)
 80025fa:	f00a f97f 	bl	800c8fc <siprintf>
		OLED_ShowString(0, 20, gyroVal);
 80025fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002602:	461a      	mov	r2, r3
 8002604:	2114      	movs	r1, #20
 8002606:	2000      	movs	r0, #0
 8002608:	f001 fb4c 	bl	8003ca4 <OLED_ShowString>

		sprintf(encoderVal, "X: %d Y: %d \0", (int) x, (int) y);
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <StartOLEDTask+0x1a0>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <StartOLEDTask+0x1a4>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800261a:	4927      	ldr	r1, [pc, #156]	@ (80026b8 <StartOLEDTask+0x1a8>)
 800261c:	f00a f96e 	bl	800c8fc <siprintf>
		OLED_ShowString(0, 30, encoderVal);
 8002620:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002624:	461a      	mov	r2, r3
 8002626:	211e      	movs	r1, #30
 8002628:	2000      	movs	r0, #0
 800262a:	f001 fb3b 	bl	8003ca4 <OLED_ShowString>

		sprintf(irVal, "L: %d R: %d \0", (int) iDistanceL, iDistanceR);
 800262e:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <StartOLEDTask+0x1ac>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <StartOLEDTask+0x1b0>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f107 001c 	add.w	r0, r7, #28
 800263c:	4921      	ldr	r1, [pc, #132]	@ (80026c4 <StartOLEDTask+0x1b4>)
 800263e:	f00a f95d 	bl	800c8fc <siprintf>
		OLED_ShowString(0, 40, irVal);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	461a      	mov	r2, r3
 8002648:	2128      	movs	r1, #40	@ 0x28
 800264a:	2000      	movs	r0, #0
 800264c:	f001 fb2a 	bl	8003ca4 <OLED_ShowString>

		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <StartOLEDTask+0x1b8>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461c      	mov	r4, r3
 8002656:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <StartOLEDTask+0x1b8>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	461d      	mov	r5, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <StartOLEDTask+0x1b8>)
 800265e:	789b      	ldrb	r3, [r3, #2]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002660:	461a      	mov	r2, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <StartOLEDTask+0x1b8>)
 8002664:	78db      	ldrb	r3, [r3, #3]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 8002666:	4619      	mov	r1, r3
				aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <StartOLEDTask+0x1b8>)
 800266a:	791b      	ldrb	r3, [r3, #4]
		sprintf(command, "C: %c%c%c%c%c \0", aRxBuffer[0], aRxBuffer[1],
 800266c:	f107 0008 	add.w	r0, r7, #8
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	9101      	str	r1, [sp, #4]
 8002674:	9200      	str	r2, [sp, #0]
 8002676:	462b      	mov	r3, r5
 8002678:	4622      	mov	r2, r4
 800267a:	4914      	ldr	r1, [pc, #80]	@ (80026cc <StartOLEDTask+0x1bc>)
 800267c:	f00a f93e 	bl	800c8fc <siprintf>
		OLED_ShowString(0, 50, command);
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	461a      	mov	r2, r3
 8002686:	2132      	movs	r1, #50	@ 0x32
 8002688:	2000      	movs	r0, #0
 800268a:	f001 fb0b 	bl	8003ca4 <OLED_ShowString>

		OLED_Refresh_Gram();
 800268e:	f001 f995 	bl	80039bc <OLED_Refresh_Gram>
		osDelay(100);
 8002692:	2064      	movs	r0, #100	@ 0x64
 8002694:	f006 fe3e 	bl	8009314 <osDelay>
	for (;;) {
 8002698:	bf00      	nop
 800269a:	e76a      	b.n	8002572 <StartOLEDTask+0x62>
 800269c:	2000051a 	.word	0x2000051a
 80026a0:	0800ec84 	.word	0x0800ec84
 80026a4:	200004f0 	.word	0x200004f0
 80026a8:	408f4000 	.word	0x408f4000
 80026ac:	0800ec94 	.word	0x0800ec94
 80026b0:	20000538 	.word	0x20000538
 80026b4:	20000524 	.word	0x20000524
 80026b8:	0800eca4 	.word	0x0800eca4
 80026bc:	2000052c 	.word	0x2000052c
 80026c0:	2000052e 	.word	0x2000052e
 80026c4:	0800ecb4 	.word	0x0800ecb4
 80026c8:	200004b4 	.word	0x200004b4
 80026cc:	0800ecc4 	.word	0x0800ecc4

080026d0 <StartGyroTask>:
 * @brief Function implementing the gyroTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument) {
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGyroTask */
	gyroInit();
 80026d8:	f7ff fc66 	bl	8001fa8 <gyroInit>
	uint8_t val[2] = { 0, 0 };
 80026dc:	2300      	movs	r3, #0
 80026de:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
	double offset = 0;
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash = 0;
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
	while (i < 100) {
 8002704:	e048      	b.n	8002798 <StartGyroTask+0xc8>
		osDelay(50);
 8002706:	2032      	movs	r0, #50	@ 0x32
 8002708:	f006 fe04 	bl	8009314 <osDelay>
		readByte(0x37, val);
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	4619      	mov	r1, r3
 8002712:	2037      	movs	r0, #55	@ 0x37
 8002714:	f7ff fbfa 	bl	8001f0c <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002718:	7a3b      	ldrb	r3, [r7, #8]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21a      	sxth	r2, r3
 800271e:	7a7b      	ldrb	r3, [r7, #9]
 8002720:	b21b      	sxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	817b      	strh	r3, [r7, #10]
		trash += (double) ((double) angular_speed)
 8002726:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fefa 	bl	8000524 <__aeabi_i2d>
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
				* ((HAL_GetTick() - tick) / 16400.0);
 8002734:	f001 fbda 	bl	8003eec <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fee0 	bl	8000504 <__aeabi_ui2d>
 8002744:	a345      	add	r3, pc, #276	@ (adr r3, 800285c <StartGyroTask+0x18c>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fe f87f 	bl	800084c <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd ff4f 	bl	80005f8 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
		trash += (double) ((double) angular_speed)
 800275e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002762:	f7fd fd93 	bl	800028c <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 800276e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fed6 	bl	8000524 <__aeabi_i2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002780:	f7fd fd84 	bl	800028c <__adddf3>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 800278c:	f001 fbae 	bl	8003eec <HAL_GetTick>
 8002790:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
	while (i < 100) {
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b63      	cmp	r3, #99	@ 0x63
 800279c:	ddb3      	ble.n	8002706 <StartGyroTask+0x36>
	}
	offset = offset / i;
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7fd fec0 	bl	8000524 <__aeabi_i2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ac:	f7fe f84e 	bl	800084c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	tick = HAL_GetTick();
 80027b8:	f001 fb98 	bl	8003eec <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	@ 0x24
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80027be:	2064      	movs	r0, #100	@ 0x64
 80027c0:	f006 fda8 	bl	8009314 <osDelay>
		readByte(0x37, val);
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	4619      	mov	r1, r3
 80027ca:	2037      	movs	r0, #55	@ 0x37
 80027cc:	f7ff fb9e 	bl	8001f0c <readByte>
		angular_speed = (val[0] << 8) | val[1];
 80027d0:	7a3b      	ldrb	r3, [r7, #8]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	7a7b      	ldrb	r3, [r7, #9]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	817b      	strh	r3, [r7, #10]
		total_angle += (double) ((double) angular_speed - offset)
 80027de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fe9e 	bl	8000524 <__aeabi_i2d>
 80027e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ec:	f7fd fd4c 	bl	8000288 <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
				* ((HAL_GetTick() - tick) / 16400.0);
 80027f8:	f001 fb78 	bl	8003eec <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fe7e 	bl	8000504 <__aeabi_ui2d>
 8002808:	a314      	add	r3, pc, #80	@ (adr r3, 800285c <StartGyroTask+0x18c>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fe f81d 	bl	800084c <__aeabi_ddiv>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fd feed 	bl	80005f8 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
		total_angle += (double) ((double) angular_speed - offset)
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <StartGyroTask+0x188>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fd2e 	bl	800028c <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4908      	ldr	r1, [pc, #32]	@ (8002858 <StartGyroTask+0x188>)
 8002836:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 800283a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002844:	f001 fb52 	bl	8003eec <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24
		i++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3301      	adds	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 8002850:	bf00      	nop
 8002852:	e7b4      	b.n	80027be <StartGyroTask+0xee>
 8002854:	f3af 8000 	nop.w
 8002858:	200004f0 	.word	0x200004f0
 800285c:	00000000 	.word	0x00000000
 8002860:	40d00400 	.word	0x40d00400

08002864 <StartUltrasonicTask>:
 * @brief Function implementing the ultrasonicTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUltrasonicTask */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // HC-SR04 Sensor
 800286c:	2100      	movs	r1, #0
 800286e:	480c      	ldr	r0, [pc, #48]	@ (80028a0 <StartUltrasonicTask+0x3c>)
 8002870:	f004 f8b6 	bl	80069e0 <HAL_TIM_IC_Start_IT>
	/* Infinite loop */
	for (;;) {
		HCSR04_Read();
 8002874:	f7ff f90c 	bl	8001a90 <HCSR04_Read>

		if (uDistance <= usThreshold && usFlag == 1) {
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <StartUltrasonicTask+0x40>)
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <StartUltrasonicTask+0x44>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d808      	bhi.n	8002896 <StartUltrasonicTask+0x32>
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <StartUltrasonicTask+0x48>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d104      	bne.n	8002896 <StartUltrasonicTask+0x32>
			usFlag = 0;
 800288c:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <StartUltrasonicTask+0x48>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
			moveCarStop();
 8002892:	f7ff f989 	bl	8001ba8 <moveCarStop>
		}

		osDelay(100);
 8002896:	2064      	movs	r0, #100	@ 0x64
 8002898:	f006 fd3c 	bl	8009314 <osDelay>
		HCSR04_Read();
 800289c:	e7ea      	b.n	8002874 <StartUltrasonicTask+0x10>
 800289e:	bf00      	nop
 80028a0:	200003c0 	.word	0x200003c0
 80028a4:	2000051a 	.word	0x2000051a
 80028a8:	20000004 	.word	0x20000004
 80028ac:	2000051c 	.word	0x2000051c

080028b0 <StartCommunicateTask>:
 * @brief Function implementing the communicateTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCommunicateTask */
	char ack = 'A';
 80028b8:	2341      	movs	r3, #65	@ 0x41
 80028ba:	73fb      	strb	r3, [r7, #15]

	aRxBuffer[0] = 'E';
 80028bc:	4b8e      	ldr	r3, [pc, #568]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028be:	2245      	movs	r2, #69	@ 0x45
 80028c0:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 'M';
 80028c2:	4b8d      	ldr	r3, [pc, #564]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028c4:	224d      	movs	r2, #77	@ 0x4d
 80028c6:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = 'P';
 80028c8:	4b8b      	ldr	r3, [pc, #556]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028ca:	2250      	movs	r2, #80	@ 0x50
 80028cc:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = 'T';
 80028ce:	4b8a      	ldr	r3, [pc, #552]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028d0:	2254      	movs	r2, #84	@ 0x54
 80028d2:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = 'Y';
 80028d4:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028d6:	2259      	movs	r2, #89	@ 0x59
 80028d8:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for (;;) {
		magnitude = 0;
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <StartCommunicateTask+0x24c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
		if (((aRxBuffer[0] == 'T' || aRxBuffer[0] == 'I' || aRxBuffer[0] == 'X')
 80028e0:	4b85      	ldr	r3, [pc, #532]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b54      	cmp	r3, #84	@ 0x54
 80028e6:	d007      	beq.n	80028f8 <StartCommunicateTask+0x48>
 80028e8:	4b83      	ldr	r3, [pc, #524]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b49      	cmp	r3, #73	@ 0x49
 80028ee:	d003      	beq.n	80028f8 <StartCommunicateTask+0x48>
 80028f0:	4b81      	ldr	r3, [pc, #516]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b58      	cmp	r3, #88	@ 0x58
 80028f6:	d107      	bne.n	8002908 <StartCommunicateTask+0x58>
				&& (aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L')
 80028f8:	4b7f      	ldr	r3, [pc, #508]	@ (8002af8 <StartCommunicateTask+0x248>)
 80028fa:	785b      	ldrb	r3, [r3, #1]
				&& (0 <= aRxBuffer[2] - '0' <= 9)
				&& (0 <= aRxBuffer[3] - '0' <= 9)
				&& (0 <= aRxBuffer[4] - '0' <= 9))
 80028fc:	2b52      	cmp	r3, #82	@ 0x52
 80028fe:	d025      	beq.n	800294c <StartCommunicateTask+0x9c>
				&& (aRxBuffer[1] == 'R' || aRxBuffer[1] == 'L')
 8002900:	4b7d      	ldr	r3, [pc, #500]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b4c      	cmp	r3, #76	@ 0x4c
 8002906:	d021      	beq.n	800294c <StartCommunicateTask+0x9c>
				|| (aRxBuffer[0] == 'S' || aRxBuffer[0] == 'U'
 8002908:	4b7b      	ldr	r3, [pc, #492]	@ (8002af8 <StartCommunicateTask+0x248>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b53      	cmp	r3, #83	@ 0x53
 800290e:	d014      	beq.n	800293a <StartCommunicateTask+0x8a>
 8002910:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b55      	cmp	r3, #85	@ 0x55
 8002916:	d010      	beq.n	800293a <StartCommunicateTask+0x8a>
						|| aRxBuffer[0] == 'Y' || aRxBuffer[0] == 'V'
 8002918:	4b77      	ldr	r3, [pc, #476]	@ (8002af8 <StartCommunicateTask+0x248>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b59      	cmp	r3, #89	@ 0x59
 800291e:	d00c      	beq.n	800293a <StartCommunicateTask+0x8a>
 8002920:	4b75      	ldr	r3, [pc, #468]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b56      	cmp	r3, #86	@ 0x56
 8002926:	d008      	beq.n	800293a <StartCommunicateTask+0x8a>
						|| aRxBuffer[0] == 'R' || aRxBuffer[0] == 'L')
 8002928:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <StartCommunicateTask+0x248>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b52      	cmp	r3, #82	@ 0x52
 800292e:	d004      	beq.n	800293a <StartCommunicateTask+0x8a>
 8002930:	4b71      	ldr	r3, [pc, #452]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b4c      	cmp	r3, #76	@ 0x4c
 8002936:	f040 823c 	bne.w	8002db2 <StartCommunicateTask+0x502>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 800293a:	4b6f      	ldr	r3, [pc, #444]	@ (8002af8 <StartCommunicateTask+0x248>)
 800293c:	785b      	ldrb	r3, [r3, #1]
						&& (0 <= aRxBuffer[2] - '0' <= 9)
						&& (0 <= aRxBuffer[3] - '0' <= 9)
						&& (0 <= aRxBuffer[4] - '0' <= 9)) {
 800293e:	2b46      	cmp	r3, #70	@ 0x46
 8002940:	d004      	beq.n	800294c <StartCommunicateTask+0x9c>
						&& (aRxBuffer[1] == 'F' || aRxBuffer[1] == 'B')
 8002942:	4b6d      	ldr	r3, [pc, #436]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	2b42      	cmp	r3, #66	@ 0x42
 8002948:	f040 8233 	bne.w	8002db2 <StartCommunicateTask+0x502>

			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <StartCommunicateTask+0x248>)
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	3b30      	subs	r3, #48	@ 0x30
 8002952:	2264      	movs	r2, #100	@ 0x64
 8002954:	fb02 f103 	mul.w	r1, r2, r3
					+ ((int) (aRxBuffer[3]) - 48) * 10
 8002958:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <StartCommunicateTask+0x248>)
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	18ca      	adds	r2, r1, r3
					+ ((int) (aRxBuffer[4]) - 48);
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <StartCommunicateTask+0x248>)
 800296c:	791b      	ldrb	r3, [r3, #4]
 800296e:	3b30      	subs	r3, #48	@ 0x30
 8002970:	4413      	add	r3, r2
			magnitude = ((int) (aRxBuffer[2]) - 48) * 100
 8002972:	4a62      	ldr	r2, [pc, #392]	@ (8002afc <StartCommunicateTask+0x24c>)
 8002974:	6013      	str	r3, [r2, #0]

			if (aRxBuffer[1] == 'B') {
 8002976:	4b60      	ldr	r3, [pc, #384]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	2b42      	cmp	r3, #66	@ 0x42
 800297c:	d104      	bne.n	8002988 <StartCommunicateTask+0xd8>
				magnitude *= -1;
 800297e:	4b5f      	ldr	r3, [pc, #380]	@ (8002afc <StartCommunicateTask+0x24c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	425b      	negs	r3, r3
 8002984:	4a5d      	ldr	r2, [pc, #372]	@ (8002afc <StartCommunicateTask+0x24c>)
 8002986:	6013      	str	r3, [r2, #0]
			}

			osDelay(300);
 8002988:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800298c:	f006 fcc2 	bl	8009314 <osDelay>
			switch (aRxBuffer[0]) {
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	3b49      	subs	r3, #73	@ 0x49
 8002996:	2b10      	cmp	r3, #16
 8002998:	f200 820b 	bhi.w	8002db2 <StartCommunicateTask+0x502>
 800299c:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <StartCommunicateTask+0xf4>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	08002a2b 	.word	0x08002a2b
 80029a8:	08002db3 	.word	0x08002db3
 80029ac:	08002db3 	.word	0x08002db3
 80029b0:	08002d71 	.word	0x08002d71
 80029b4:	08002db3 	.word	0x08002db3
 80029b8:	08002db3 	.word	0x08002db3
 80029bc:	08002db3 	.word	0x08002db3
 80029c0:	08002db3 	.word	0x08002db3
 80029c4:	08002db3 	.word	0x08002db3
 80029c8:	08002cf1 	.word	0x08002cf1
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	08002c19 	.word	0x08002c19
 80029d4:	08002aa3 	.word	0x08002aa3
 80029d8:	08002c97 	.word	0x08002c97
 80029dc:	08002db3 	.word	0x08002db3
 80029e0:	08002b21 	.word	0x08002b21
 80029e4:	08002ba9 	.word	0x08002ba9
			case 'S':
				moveCarStraight(magnitude);
 80029e8:	4b44      	ldr	r3, [pc, #272]	@ (8002afc <StartCommunicateTask+0x24c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fd99 	bl	8000524 <__aeabi_i2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	ec43 2b10 	vmov	d0, r2, r3
 80029fa:	f7ff f869 	bl	8001ad0 <moveCarStraight>
				flagDone = 1;
 80029fe:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <StartCommunicateTask+0x250>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002a04:	4b3c      	ldr	r3, [pc, #240]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a06:	2244      	movs	r2, #68	@ 0x44
 8002a08:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a0c:	224f      	movs	r2, #79	@ 0x4f
 8002a0e:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a12:	224e      	movs	r2, #78	@ 0x4e
 8002a14:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002a16:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a18:	2245      	movs	r2, #69	@ 0x45
 8002a1a:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002a1c:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a1e:	2221      	movs	r2, #33	@ 0x21
 8002a20:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002a22:	2064      	movs	r0, #100	@ 0x64
 8002a24:	f006 fc76 	bl	8009314 <osDelay>
				break;
 8002a28:	e1c3      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'I':
				irFlag = 1;
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <StartCommunicateTask+0x254>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
				if (!((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500))
 8002a30:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b4c      	cmp	r3, #76	@ 0x4c
 8002a36:	d107      	bne.n	8002a48 <StartCommunicateTask+0x198>
 8002a38:	4b33      	ldr	r3, [pc, #204]	@ (8002b08 <StartCommunicateTask+0x258>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002a40:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <StartCommunicateTask+0x25c>)
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	dc16      	bgt.n	8002a76 <StartCommunicateTask+0x1c6>
						|| (aRxBuffer[1] == 'R'
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a4a:	785b      	ldrb	r3, [r3, #1]
				if (!((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500))
 8002a4c:	2b52      	cmp	r3, #82	@ 0x52
 8002a4e:	d107      	bne.n	8002a60 <StartCommunicateTask+0x1b0>
								&& (iDistanceR <= irThreshold - 500)))) {
 8002a50:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <StartCommunicateTask+0x258>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002a58:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <StartCommunicateTask+0x260>)
 8002a5a:	8812      	ldrh	r2, [r2, #0]
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	dc0a      	bgt.n	8002a76 <StartCommunicateTask+0x1c6>
					moveCarStraight(magnitude);
 8002a60:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <StartCommunicateTask+0x24c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd5d 	bl	8000524 <__aeabi_i2d>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	ec43 2b10 	vmov	d0, r2, r3
 8002a72:	f7ff f82d 	bl	8001ad0 <moveCarStraight>
				}
				flagDone = 1;
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <StartCommunicateTask+0x250>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a7e:	2244      	movs	r2, #68	@ 0x44
 8002a80:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002a82:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a84:	224f      	movs	r2, #79	@ 0x4f
 8002a86:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a8a:	224e      	movs	r2, #78	@ 0x4e
 8002a8c:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a90:	2245      	movs	r2, #69	@ 0x45
 8002a92:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002a96:	2221      	movs	r2, #33	@ 0x21
 8002a98:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002a9a:	2064      	movs	r0, #100	@ 0x64
 8002a9c:	f006 fc3a 	bl	8009314 <osDelay>
				break;
 8002aa0:	e187      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'U':
				usFlag = 1;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b14 <StartCommunicateTask+0x264>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
				if (uDistance > usThreshold) {
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <StartCommunicateTask+0x268>)
 8002aaa:	881a      	ldrh	r2, [r3, #0]
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <StartCommunicateTask+0x26c>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d90a      	bls.n	8002aca <StartCommunicateTask+0x21a>
					moveCarStraight(magnitude);
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <StartCommunicateTask+0x24c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd33 	bl	8000524 <__aeabi_i2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	ec43 2b10 	vmov	d0, r2, r3
 8002ac6:	f7ff f803 	bl	8001ad0 <moveCarStraight>
				}
				flagDone = 1;
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <StartCommunicateTask+0x250>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002ad2:	2244      	movs	r2, #68	@ 0x44
 8002ad4:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002ad8:	224f      	movs	r2, #79	@ 0x4f
 8002ada:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002ade:	224e      	movs	r2, #78	@ 0x4e
 8002ae0:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002ae4:	2245      	movs	r2, #69	@ 0x45
 8002ae6:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <StartCommunicateTask+0x248>)
 8002aea:	2221      	movs	r2, #33	@ 0x21
 8002aec:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002aee:	2064      	movs	r0, #100	@ 0x64
 8002af0:	f006 fc10 	bl	8009314 <osDelay>
				break;
 8002af4:	e15d      	b.n	8002db2 <StartCommunicateTask+0x502>
 8002af6:	bf00      	nop
 8002af8:	200004b4 	.word	0x200004b4
 8002afc:	200004c4 	.word	0x200004c4
 8002b00:	200004c0 	.word	0x200004c0
 8002b04:	20000530 	.word	0x20000530
 8002b08:	20000006 	.word	0x20000006
 8002b0c:	2000052c 	.word	0x2000052c
 8002b10:	2000052e 	.word	0x2000052e
 8002b14:	2000051c 	.word	0x2000051c
 8002b18:	2000051a 	.word	0x2000051a
 8002b1c:	20000004 	.word	0x20000004
			case 'X':
				xFlag = 1;
 8002b20:	4b84      	ldr	r3, [pc, #528]	@ (8002d34 <StartCommunicateTask+0x484>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
				irFlag = 1;
 8002b26:	4b84      	ldr	r3, [pc, #528]	@ (8002d38 <StartCommunicateTask+0x488>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
				if (!((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500))
 8002b2c:	4b83      	ldr	r3, [pc, #524]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b4c      	cmp	r3, #76	@ 0x4c
 8002b32:	d107      	bne.n	8002b44 <StartCommunicateTask+0x294>
 8002b34:	4b82      	ldr	r3, [pc, #520]	@ (8002d40 <StartCommunicateTask+0x490>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002b3c:	4a81      	ldr	r2, [pc, #516]	@ (8002d44 <StartCommunicateTask+0x494>)
 8002b3e:	8812      	ldrh	r2, [r2, #0]
 8002b40:	4293      	cmp	r3, r2
 8002b42:	dc16      	bgt.n	8002b72 <StartCommunicateTask+0x2c2>
						|| (aRxBuffer[1] == 'R'
 8002b44:	4b7d      	ldr	r3, [pc, #500]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b46:	785b      	ldrb	r3, [r3, #1]
				if (!((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500))
 8002b48:	2b52      	cmp	r3, #82	@ 0x52
 8002b4a:	d107      	bne.n	8002b5c <StartCommunicateTask+0x2ac>
								&& (iDistanceR <= irThreshold - 500)))) {
 8002b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d40 <StartCommunicateTask+0x490>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 8002b54:	4a7c      	ldr	r2, [pc, #496]	@ (8002d48 <StartCommunicateTask+0x498>)
 8002b56:	8812      	ldrh	r2, [r2, #0]
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	dc0a      	bgt.n	8002b72 <StartCommunicateTask+0x2c2>
					moveCarStraight(magnitude);
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d4c <StartCommunicateTask+0x49c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcdf 	bl	8000524 <__aeabi_i2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b10 	vmov	d0, r2, r3
 8002b6e:	f7fe ffaf 	bl	8001ad0 <moveCarStraight>
				}
				vTaskSuspend(IRTaskHandle);
 8002b72:	4b77      	ldr	r3, [pc, #476]	@ (8002d50 <StartCommunicateTask+0x4a0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 fbbe 	bl	800a2f8 <vTaskSuspend>
				flagDone = 1;
 8002b7c:	4b75      	ldr	r3, [pc, #468]	@ (8002d54 <StartCommunicateTask+0x4a4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002b82:	4b6e      	ldr	r3, [pc, #440]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b84:	2244      	movs	r2, #68	@ 0x44
 8002b86:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002b88:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b8a:	224f      	movs	r2, #79	@ 0x4f
 8002b8c:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b90:	224e      	movs	r2, #78	@ 0x4e
 8002b92:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002b94:	4b69      	ldr	r3, [pc, #420]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b96:	2245      	movs	r2, #69	@ 0x45
 8002b98:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002b9a:	4b68      	ldr	r3, [pc, #416]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002b9c:	2221      	movs	r2, #33	@ 0x21
 8002b9e:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002ba0:	2064      	movs	r0, #100	@ 0x64
 8002ba2:	f006 fbb7 	bl	8009314 <osDelay>
				break;
 8002ba6:	e104      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'Y':
				yFlag = 1;
 8002ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d58 <StartCommunicateTask+0x4a8>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
				usFlag = 1;
 8002bae:	4b6b      	ldr	r3, [pc, #428]	@ (8002d5c <StartCommunicateTask+0x4ac>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
				if (uDistance - usThreshold < 10) {
 8002bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d60 <StartCommunicateTask+0x4b0>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b6a      	ldr	r3, [pc, #424]	@ (8002d64 <StartCommunicateTask+0x4b4>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	dc02      	bgt.n	8002bca <StartCommunicateTask+0x31a>
					usSmall = 1;
 8002bc4:	4b68      	ldr	r3, [pc, #416]	@ (8002d68 <StartCommunicateTask+0x4b8>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
				}

				if (uDistance > usThreshold) {
 8002bca:	4b65      	ldr	r3, [pc, #404]	@ (8002d60 <StartCommunicateTask+0x4b0>)
 8002bcc:	881a      	ldrh	r2, [r3, #0]
 8002bce:	4b65      	ldr	r3, [pc, #404]	@ (8002d64 <StartCommunicateTask+0x4b4>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d90a      	bls.n	8002bec <StartCommunicateTask+0x33c>
					moveCarStraight(magnitude);
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d4c <StartCommunicateTask+0x49c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fca2 	bl	8000524 <__aeabi_i2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b10 	vmov	d0, r2, r3
 8002be8:	f7fe ff72 	bl	8001ad0 <moveCarStraight>
				}
				flagDone = 1;
 8002bec:	4b59      	ldr	r3, [pc, #356]	@ (8002d54 <StartCommunicateTask+0x4a4>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002bf2:	4b52      	ldr	r3, [pc, #328]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002bf4:	2244      	movs	r2, #68	@ 0x44
 8002bf6:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002bf8:	4b50      	ldr	r3, [pc, #320]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002bfa:	224f      	movs	r2, #79	@ 0x4f
 8002bfc:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c00:	224e      	movs	r2, #78	@ 0x4e
 8002c02:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002c04:	4b4d      	ldr	r3, [pc, #308]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c06:	2245      	movs	r2, #69	@ 0x45
 8002c08:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c0c:	2221      	movs	r2, #33	@ 0x21
 8002c0e:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002c10:	2064      	movs	r0, #100	@ 0x64
 8002c12:	f006 fb7f 	bl	8009314 <osDelay>
				break;
 8002c16:	e0cc      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'T':
				if (irResumeFlag == 1) {
 8002c18:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <StartCommunicateTask+0x4bc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <StartCommunicateTask+0x380>
					vTaskResume(IRTaskHandle);
 8002c20:	4b4b      	ldr	r3, [pc, #300]	@ (8002d50 <StartCommunicateTask+0x4a0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f007 fc0f 	bl	800a448 <vTaskResume>
					irResumeFlag = 0;
 8002c2a:	4b50      	ldr	r3, [pc, #320]	@ (8002d6c <StartCommunicateTask+0x4bc>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
				}
				moveCarStraight(-magnitude);
 8002c30:	4b46      	ldr	r3, [pc, #280]	@ (8002d4c <StartCommunicateTask+0x49c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	425b      	negs	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc74 	bl	8000524 <__aeabi_i2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	ec43 2b10 	vmov	d0, r2, r3
 8002c44:	f7fe ff44 	bl	8001ad0 <moveCarStraight>
				if (aRxBuffer[1] == 'R') {
 8002c48:	4b3c      	ldr	r3, [pc, #240]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b52      	cmp	r3, #82	@ 0x52
 8002c4e:	d104      	bne.n	8002c5a <StartCommunicateTask+0x3aa>
					irThreshold = iDistanceR;
 8002c50:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <StartCommunicateTask+0x498>)
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	4b3a      	ldr	r3, [pc, #232]	@ (8002d40 <StartCommunicateTask+0x490>)
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	e007      	b.n	8002c6a <StartCommunicateTask+0x3ba>
				} else if (aRxBuffer[1] == 'L') {
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	2b4c      	cmp	r3, #76	@ 0x4c
 8002c60:	d103      	bne.n	8002c6a <StartCommunicateTask+0x3ba>
					irThreshold = iDistanceL;
 8002c62:	4b38      	ldr	r3, [pc, #224]	@ (8002d44 <StartCommunicateTask+0x494>)
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <StartCommunicateTask+0x490>)
 8002c68:	801a      	strh	r2, [r3, #0]
				}
				flagDone = 1;
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <StartCommunicateTask+0x4a4>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002c70:	4b32      	ldr	r3, [pc, #200]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c72:	2244      	movs	r2, #68	@ 0x44
 8002c74:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002c76:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c78:	224f      	movs	r2, #79	@ 0x4f
 8002c7a:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c7e:	224e      	movs	r2, #78	@ 0x4e
 8002c80:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002c82:	4b2e      	ldr	r3, [pc, #184]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c84:	2245      	movs	r2, #69	@ 0x45
 8002c86:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002c88:	4b2c      	ldr	r3, [pc, #176]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002c8a:	2221      	movs	r2, #33	@ 0x21
 8002c8c:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002c8e:	2064      	movs	r0, #100	@ 0x64
 8002c90:	f006 fb40 	bl	8009314 <osDelay>
				break;
 8002c94:	e08d      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'V':
				usThreshold = 25;
 8002c96:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <StartCommunicateTask+0x4b4>)
 8002c98:	2219      	movs	r2, #25
 8002c9a:	801a      	strh	r2, [r3, #0]
				usFlag = 1;
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <StartCommunicateTask+0x4ac>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
				if (uDistance > usThreshold) {
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <StartCommunicateTask+0x4b0>)
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <StartCommunicateTask+0x4b4>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90a      	bls.n	8002cc4 <StartCommunicateTask+0x414>
					moveCarStraight(magnitude);
 8002cae:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <StartCommunicateTask+0x49c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc36 	bl	8000524 <__aeabi_i2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	ec43 2b10 	vmov	d0, r2, r3
 8002cc0:	f7fe ff06 	bl	8001ad0 <moveCarStraight>
				}
				flagDone = 1;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <StartCommunicateTask+0x4a4>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002cca:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002ccc:	2244      	movs	r2, #68	@ 0x44
 8002cce:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002cd2:	224f      	movs	r2, #79	@ 0x4f
 8002cd4:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002cd8:	224e      	movs	r2, #78	@ 0x4e
 8002cda:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002cde:	2245      	movs	r2, #69	@ 0x45
 8002ce0:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002ce4:	2221      	movs	r2, #33	@ 0x21
 8002ce6:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002ce8:	2064      	movs	r0, #100	@ 0x64
 8002cea:	f006 fb13 	bl	8009314 <osDelay>
				break;
 8002cee:	e060      	b.n	8002db2 <StartCommunicateTask+0x502>
			case 'R':
				moveCarRight(magnitude);
 8002cf0:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <StartCommunicateTask+0x49c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc15 	bl	8000524 <__aeabi_i2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	ec43 2b10 	vmov	d0, r2, r3
 8002d02:	f7fe ff63 	bl	8001bcc <moveCarRight>
				flagDone = 1;
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <StartCommunicateTask+0x4a4>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002d0e:	2244      	movs	r2, #68	@ 0x44
 8002d10:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002d14:	224f      	movs	r2, #79	@ 0x4f
 8002d16:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002d1a:	224e      	movs	r2, #78	@ 0x4e
 8002d1c:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002d20:	2245      	movs	r2, #69	@ 0x45
 8002d22:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <StartCommunicateTask+0x48c>)
 8002d26:	2221      	movs	r2, #33	@ 0x21
 8002d28:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002d2a:	2064      	movs	r0, #100	@ 0x64
 8002d2c:	f006 faf2 	bl	8009314 <osDelay>
				break;
 8002d30:	e03f      	b.n	8002db2 <StartCommunicateTask+0x502>
 8002d32:	bf00      	nop
 8002d34:	20000534 	.word	0x20000534
 8002d38:	20000530 	.word	0x20000530
 8002d3c:	200004b4 	.word	0x200004b4
 8002d40:	20000006 	.word	0x20000006
 8002d44:	2000052c 	.word	0x2000052c
 8002d48:	2000052e 	.word	0x2000052e
 8002d4c:	200004c4 	.word	0x200004c4
 8002d50:	200004b0 	.word	0x200004b0
 8002d54:	200004c0 	.word	0x200004c0
 8002d58:	20000520 	.word	0x20000520
 8002d5c:	2000051c 	.word	0x2000051c
 8002d60:	2000051a 	.word	0x2000051a
 8002d64:	20000004 	.word	0x20000004
 8002d68:	20000528 	.word	0x20000528
 8002d6c:	20000008 	.word	0x20000008
			case 'L':
				moveCarLeft(magnitude);
 8002d70:	4b7f      	ldr	r3, [pc, #508]	@ (8002f70 <StartCommunicateTask+0x6c0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbd5 	bl	8000524 <__aeabi_i2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ec43 2b10 	vmov	d0, r2, r3
 8002d82:	f7fe ff57 	bl	8001c34 <moveCarLeft>
				flagDone = 1;
 8002d86:	4b7b      	ldr	r3, [pc, #492]	@ (8002f74 <StartCommunicateTask+0x6c4>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
				aRxBuffer[0] = 'D';
 8002d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f78 <StartCommunicateTask+0x6c8>)
 8002d8e:	2244      	movs	r2, #68	@ 0x44
 8002d90:	701a      	strb	r2, [r3, #0]
				aRxBuffer[1] = 'O';
 8002d92:	4b79      	ldr	r3, [pc, #484]	@ (8002f78 <StartCommunicateTask+0x6c8>)
 8002d94:	224f      	movs	r2, #79	@ 0x4f
 8002d96:	705a      	strb	r2, [r3, #1]
				aRxBuffer[2] = 'N';
 8002d98:	4b77      	ldr	r3, [pc, #476]	@ (8002f78 <StartCommunicateTask+0x6c8>)
 8002d9a:	224e      	movs	r2, #78	@ 0x4e
 8002d9c:	709a      	strb	r2, [r3, #2]
				aRxBuffer[3] = 'E';
 8002d9e:	4b76      	ldr	r3, [pc, #472]	@ (8002f78 <StartCommunicateTask+0x6c8>)
 8002da0:	2245      	movs	r2, #69	@ 0x45
 8002da2:	70da      	strb	r2, [r3, #3]
				aRxBuffer[4] = '!';
 8002da4:	4b74      	ldr	r3, [pc, #464]	@ (8002f78 <StartCommunicateTask+0x6c8>)
 8002da6:	2221      	movs	r2, #33	@ 0x21
 8002da8:	711a      	strb	r2, [r3, #4]
				osDelay(100);
 8002daa:	2064      	movs	r0, #100	@ 0x64
 8002dac:	f006 fab2 	bl	8009314 <osDelay>
				break;
 8002db0:	bf00      	nop
			}
		}

		if (flagDone == 1) {
 8002db2:	4b70      	ldr	r3, [pc, #448]	@ (8002f74 <StartCommunicateTask+0x6c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 80cf 	bne.w	8002f5a <StartCommunicateTask+0x6aa>
			if (xFlag == 1) {
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f7c <StartCommunicateTask+0x6cc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d14f      	bne.n	8002e64 <StartCommunicateTask+0x5b4>
				osDelay(100);
 8002dc4:	2064      	movs	r0, #100	@ 0x64
 8002dc6:	f006 faa5 	bl	8009314 <osDelay>
				x = ((((((float) (leftEncoderVal - 75000)
 8002dca:	4b6d      	ldr	r3, [pc, #436]	@ (8002f80 <StartCommunicateTask+0x6d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f5a3 3392 	sub.w	r3, r3, #74752	@ 0x12400
 8002dd2:	3bf8      	subs	r3, #248	@ 0xf8
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						+ (float) (rightEncoderVal - 75000)) / 2) / 4) / 379)
 8002ddc:	4b69      	ldr	r3, [pc, #420]	@ (8002f84 <StartCommunicateTask+0x6d4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f5a3 3392 	sub.w	r3, r3, #74752	@ 0x12400
 8002de4:	3bf8      	subs	r3, #248	@ 0xf8
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002df6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dfa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e02:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002f88 <StartCommunicateTask+0x6d8>
 8002e06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e0a:	ee16 0a90 	vmov	r0, s13
 8002e0e:	f7fd fb9b 	bl	8000548 <__aeabi_f2d>
						* (M_PI * 6.5));
 8002e12:	a355      	add	r3, pc, #340	@ (adr r3, 8002f68 <StartCommunicateTask+0x6b8>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fbee 	bl	80005f8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
				x = ((((((float) (leftEncoderVal - 75000)
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7fd fec0 	bl	8000ba8 <__aeabi_d2uiz>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b57      	ldr	r3, [pc, #348]	@ (8002f8c <StartCommunicateTask+0x6dc>)
 8002e2e:	801a      	strh	r2, [r3, #0]
				xFlag = 0;
 8002e30:	4b52      	ldr	r3, [pc, #328]	@ (8002f7c <StartCommunicateTask+0x6cc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
				sprintf(dataBuffer, "%03d", x);
 8002e36:	4b55      	ldr	r3, [pc, #340]	@ (8002f8c <StartCommunicateTask+0x6dc>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4954      	ldr	r1, [pc, #336]	@ (8002f90 <StartCommunicateTask+0x6e0>)
 8002e3e:	4855      	ldr	r0, [pc, #340]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002e40:	f009 fd5c 	bl	800c8fc <siprintf>
				osDelay(300);
 8002e44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e48:	f006 fa64 	bl	8009314 <osDelay>
				HAL_UART_Transmit(&huart3, (uint8_t*) dataBuffer,
						strlen(dataBuffer), 0xFFFF);
 8002e4c:	4851      	ldr	r0, [pc, #324]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002e4e:	f7fd fa0f 	bl	8000270 <strlen>
 8002e52:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, (uint8_t*) dataBuffer,
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5a:	494e      	ldr	r1, [pc, #312]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002e5c:	484e      	ldr	r0, [pc, #312]	@ (8002f98 <StartCommunicateTask+0x6e8>)
 8002e5e:	f005 f91e 	bl	800809e <HAL_UART_Transmit>
 8002e62:	e077      	b.n	8002f54 <StartCommunicateTask+0x6a4>
			} else if (yFlag == 1) {
 8002e64:	4b4d      	ldr	r3, [pc, #308]	@ (8002f9c <StartCommunicateTask+0x6ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d167      	bne.n	8002f3c <StartCommunicateTask+0x68c>
				osDelay(100);
 8002e6c:	2064      	movs	r0, #100	@ 0x64
 8002e6e:	f006 fa51 	bl	8009314 <osDelay>
				if (usSmall == 1) {
 8002e72:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <StartCommunicateTask+0x6f0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d113      	bne.n	8002ea2 <StartCommunicateTask+0x5f2>
					if (uDistance < 40) {
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <StartCommunicateTask+0x6f4>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	2b27      	cmp	r3, #39	@ 0x27
 8002e80:	d803      	bhi.n	8002e8a <StartCommunicateTask+0x5da>
						y = 0;
 8002e82:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <StartCommunicateTask+0x6f8>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	801a      	strh	r2, [r3, #0]
 8002e88:	e007      	b.n	8002e9a <StartCommunicateTask+0x5ea>
					} else {
						y = uDistance - usThreshold;
 8002e8a:	4b46      	ldr	r3, [pc, #280]	@ (8002fa4 <StartCommunicateTask+0x6f4>)
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <StartCommunicateTask+0x6fc>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b44      	ldr	r3, [pc, #272]	@ (8002fa8 <StartCommunicateTask+0x6f8>)
 8002e98:	801a      	strh	r2, [r3, #0]
					}
					usSmall = 0;
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <StartCommunicateTask+0x6f0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e032      	b.n	8002f08 <StartCommunicateTask+0x658>
				} else {
					y =
							((((((float) (leftEncoderVal - 75000)
 8002ea2:	4b37      	ldr	r3, [pc, #220]	@ (8002f80 <StartCommunicateTask+0x6d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f5a3 3392 	sub.w	r3, r3, #74752	@ 0x12400
 8002eaa:	3bf8      	subs	r3, #248	@ 0xf8
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
									+ (float) (rightEncoderVal - 75000)) / 2)
 8002eb4:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <StartCommunicateTask+0x6d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f5a3 3392 	sub.w	r3, r3, #74752	@ 0x12400
 8002ebc:	3bf8      	subs	r3, #248	@ 0xf8
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ece:	ee87 7aa6 	vdiv.f32	s14, s15, s13
									/ 4) / 379) * (M_PI * 6.5));
 8002ed2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002f88 <StartCommunicateTask+0x6d8>
 8002ede:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ee2:	ee16 0a90 	vmov	r0, s13
 8002ee6:	f7fd fb2f 	bl	8000548 <__aeabi_f2d>
 8002eea:	a31f      	add	r3, pc, #124	@ (adr r3, 8002f68 <StartCommunicateTask+0x6b8>)
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f7fd fb82 	bl	80005f8 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
					y =
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fd fe54 	bl	8000ba8 <__aeabi_d2uiz>
 8002f00:	4603      	mov	r3, r0
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <StartCommunicateTask+0x6f8>)
 8002f06:	801a      	strh	r2, [r3, #0]
				}
				yFlag = 0;
 8002f08:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <StartCommunicateTask+0x6ec>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
				sprintf(dataBuffer, "%03d", y);
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <StartCommunicateTask+0x6f8>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	491e      	ldr	r1, [pc, #120]	@ (8002f90 <StartCommunicateTask+0x6e0>)
 8002f16:	481f      	ldr	r0, [pc, #124]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002f18:	f009 fcf0 	bl	800c8fc <siprintf>
				osDelay(300);
 8002f1c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f20:	f006 f9f8 	bl	8009314 <osDelay>
				HAL_UART_Transmit(&huart3, (uint8_t*) dataBuffer,
						strlen(dataBuffer), 0xFFFF);
 8002f24:	481b      	ldr	r0, [pc, #108]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002f26:	f7fd f9a3 	bl	8000270 <strlen>
 8002f2a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart3, (uint8_t*) dataBuffer,
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f32:	4918      	ldr	r1, [pc, #96]	@ (8002f94 <StartCommunicateTask+0x6e4>)
 8002f34:	4818      	ldr	r0, [pc, #96]	@ (8002f98 <StartCommunicateTask+0x6e8>)
 8002f36:	f005 f8b2 	bl	800809e <HAL_UART_Transmit>
 8002f3a:	e00b      	b.n	8002f54 <StartCommunicateTask+0x6a4>
			} else {
				osDelay(300);
 8002f3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f40:	f006 f9e8 	bl	8009314 <osDelay>
				HAL_UART_Transmit(&huart3, (uint8_t*) &ack, 1, 0xFFFF);
 8002f44:	f107 010f 	add.w	r1, r7, #15
 8002f48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4812      	ldr	r0, [pc, #72]	@ (8002f98 <StartCommunicateTask+0x6e8>)
 8002f50:	f005 f8a5 	bl	800809e <HAL_UART_Transmit>
			}
			flagDone = 0;
 8002f54:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <StartCommunicateTask+0x6c4>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 8002f5a:	2064      	movs	r0, #100	@ 0x64
 8002f5c:	f006 f9da 	bl	8009314 <osDelay>
		magnitude = 0;
 8002f60:	e4bb      	b.n	80028da <StartCommunicateTask+0x2a>
 8002f62:	bf00      	nop
 8002f64:	f3af 8000 	nop.w
 8002f68:	347764a4 	.word	0x347764a4
 8002f6c:	40346b9c 	.word	0x40346b9c
 8002f70:	200004c4 	.word	0x200004c4
 8002f74:	200004c0 	.word	0x200004c0
 8002f78:	200004b4 	.word	0x200004b4
 8002f7c:	20000534 	.word	0x20000534
 8002f80:	200004d8 	.word	0x200004d8
 8002f84:	200004d4 	.word	0x200004d4
 8002f88:	43bd8000 	.word	0x43bd8000
 8002f8c:	20000538 	.word	0x20000538
 8002f90:	0800ecd4 	.word	0x0800ecd4
 8002f94:	200004bc 	.word	0x200004bc
 8002f98:	20000450 	.word	0x20000450
 8002f9c:	20000520 	.word	0x20000520
 8002fa0:	20000528 	.word	0x20000528
 8002fa4:	2000051a 	.word	0x2000051a
 8002fa8:	20000524 	.word	0x20000524
 8002fac:	20000004 	.word	0x20000004

08002fb0 <StartEncoderTask>:
 * @brief Function implementing the encoderTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderTask */
	int cntR;
	int dirR = 1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
	int diffR;
	int cntL;
	int dirL = 1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
	int diffL;

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002fc0:	213c      	movs	r1, #60	@ 0x3c
 8002fc2:	4834      	ldr	r0, [pc, #208]	@ (8003094 <StartEncoderTask+0xe4>)
 8002fc4:	f003 feda 	bl	8006d7c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002fc8:	213c      	movs	r1, #60	@ 0x3c
 8002fca:	4833      	ldr	r0, [pc, #204]	@ (8003098 <StartEncoderTask+0xe8>)
 8002fcc:	f003 fed6 	bl	8006d7c <HAL_TIM_Encoder_Start>

	uint32_t tick = HAL_GetTick();
 8002fd0:	f000 ff8c 	bl	8003eec <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - tick > 10L) {
 8002fd6:	f000 ff89 	bl	8003eec <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b0a      	cmp	r3, #10
 8002fe2:	d952      	bls.n	800308a <StartEncoderTask+0xda>
			cntL = __HAL_TIM_GET_COUNTER(&htim2);
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <StartEncoderTask+0xe4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	613b      	str	r3, [r7, #16]
			cntR = __HAL_TIM_GET_COUNTER(&htim3);
 8002fec:	4b2a      	ldr	r3, [pc, #168]	@ (8003098 <StartEncoderTask+0xe8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	60fb      	str	r3, [r7, #12]
			if (cntR > 32000) {
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002ffa:	dd06      	ble.n	800300a <StartEncoderTask+0x5a>
				dirR = 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				diffR = (65536 - cntR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8003006:	623b      	str	r3, [r7, #32]
 8003008:	e004      	b.n	8003014 <StartEncoderTask+0x64>
			} else {
				dirR = -1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
				diffR = cntR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	623b      	str	r3, [r7, #32]
			}

			if (dirR == 1) {
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	d106      	bne.n	8003028 <StartEncoderTask+0x78>
				rightEncoderVal -= diffR;
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <StartEncoderTask+0xec>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <StartEncoderTask+0xec>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e005      	b.n	8003034 <StartEncoderTask+0x84>
			} else {
				rightEncoderVal += diffR;
 8003028:	4b1c      	ldr	r3, [pc, #112]	@ (800309c <StartEncoderTask+0xec>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	4413      	add	r3, r2
 8003030:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <StartEncoderTask+0xec>)
 8003032:	6013      	str	r3, [r2, #0]
			}

			if (cntL > 32000) {
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800303a:	dd06      	ble.n	800304a <StartEncoderTask+0x9a>
				dirL = 1;
 800303c:	2301      	movs	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
				diffL = (65536 - cntL);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e004      	b.n	8003054 <StartEncoderTask+0xa4>
			} else {
				dirL = -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	61fb      	str	r3, [r7, #28]
				diffL = cntL;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	61bb      	str	r3, [r7, #24]
			}
			if (dirL == 1) {
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d106      	bne.n	8003068 <StartEncoderTask+0xb8>
				leftEncoderVal += diffL;
 800305a:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <StartEncoderTask+0xf0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <StartEncoderTask+0xf0>)
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e005      	b.n	8003074 <StartEncoderTask+0xc4>
			} else {
				leftEncoderVal -= diffL;
 8003068:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <StartEncoderTask+0xf0>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	4a0b      	ldr	r2, [pc, #44]	@ (80030a0 <StartEncoderTask+0xf0>)
 8003072:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <StartEncoderTask+0xe8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <StartEncoderTask+0xe4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

			tick = HAL_GetTick();
 8003084:	f000 ff32 	bl	8003eec <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]
		}
		osDelay(50);
 800308a:	2032      	movs	r0, #50	@ 0x32
 800308c:	f006 f942 	bl	8009314 <osDelay>
		if (HAL_GetTick() - tick > 10L) {
 8003090:	e7a1      	b.n	8002fd6 <StartEncoderTask+0x26>
 8003092:	bf00      	nop
 8003094:	20000330 	.word	0x20000330
 8003098:	20000378 	.word	0x20000378
 800309c:	200004d4 	.word	0x200004d4
 80030a0:	200004d8 	.word	0x200004d8

080030a4 <StartIRTask>:
 * @brief Function implementing the IRTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartIRTask */
void StartIRTask(void *argument) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartIRTask */
	/* Infinite loop */
	for (;;) {
		if (irResumeFlag == 1) {
 80030ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <StartIRTask+0x74>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d104      	bne.n	80030be <StartIRTask+0x1a>
			vTaskSuspend(IRTaskHandle);
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <StartIRTask+0x78>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f007 f91d 	bl	800a2f8 <vTaskSuspend>
		}
		IR_Left_Read();
 80030be:	f7fe ffb7 	bl	8002030 <IR_Left_Read>
		IR_Right_Read();
 80030c2:	f7fe ffcf 	bl	8002064 <IR_Right_Read>

		if ((aRxBuffer[1] == 'L' && (iDistanceL <= irThreshold - 500)
 80030c6:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <StartIRTask+0x7c>)
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b4c      	cmp	r3, #76	@ 0x4c
 80030cc:	d10b      	bne.n	80030e6 <StartIRTask+0x42>
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <StartIRTask+0x80>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 80030d6:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <StartIRTask+0x84>)
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	4293      	cmp	r3, r2
 80030dc:	dd03      	ble.n	80030e6 <StartIRTask+0x42>
				&& irFlag == 1)
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <StartIRTask+0x88>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00f      	beq.n	8003106 <StartIRTask+0x62>
				|| (aRxBuffer[1] == 'R' && (iDistanceR <= irThreshold - 500)
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <StartIRTask+0x7c>)
 80030e8:	785b      	ldrb	r3, [r3, #1]
 80030ea:	2b52      	cmp	r3, #82	@ 0x52
 80030ec:	d110      	bne.n	8003110 <StartIRTask+0x6c>
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <StartIRTask+0x80>)
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	f2a3 13f3 	subw	r3, r3, #499	@ 0x1f3
 80030f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003130 <StartIRTask+0x8c>)
 80030f8:	8812      	ldrh	r2, [r2, #0]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	dd08      	ble.n	8003110 <StartIRTask+0x6c>
						&& irFlag == 1)) {
 80030fe:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <StartIRTask+0x88>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d104      	bne.n	8003110 <StartIRTask+0x6c>
			irFlag = 0;
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <StartIRTask+0x88>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
			moveCarStop();
 800310c:	f7fe fd4c 	bl	8001ba8 <moveCarStop>
		}

		osDelay(100);
 8003110:	2064      	movs	r0, #100	@ 0x64
 8003112:	f006 f8ff 	bl	8009314 <osDelay>
		if (irResumeFlag == 1) {
 8003116:	e7c9      	b.n	80030ac <StartIRTask+0x8>
 8003118:	20000008 	.word	0x20000008
 800311c:	200004b0 	.word	0x200004b0
 8003120:	200004b4 	.word	0x200004b4
 8003124:	20000006 	.word	0x20000006
 8003128:	2000052c 	.word	0x2000052c
 800312c:	20000530 	.word	0x20000530
 8003130:	2000052e 	.word	0x2000052e

08003134 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003138:	b672      	cpsid	i
}
 800313a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <Error_Handler+0x8>

08003140 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <HAL_MspInit+0x64>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <HAL_MspInit+0x64>)
 8003150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003154:	6453      	str	r3, [r2, #68]	@ 0x44
 8003156:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <HAL_MspInit+0x64>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_MspInit+0x64>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	4a0e      	ldr	r2, [pc, #56]	@ (80031a4 <HAL_MspInit+0x64>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	@ 0x40
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_MspInit+0x64>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	210f      	movs	r1, #15
 8003182:	f06f 0001 	mvn.w	r0, #1
 8003186:	f001 fbbc 	bl	8004902 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2005      	movs	r0, #5
 8003190:	f001 fbb7 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003194:	2005      	movs	r0, #5
 8003196:	f001 fbd0 	bl	800493a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003280 <HAL_ADC_MspInit+0xd8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d128      	bne.n	800321c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031da:	4b2a      	ldr	r3, [pc, #168]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003202:	2301      	movs	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003206:	2303      	movs	r3, #3
 8003208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	4619      	mov	r1, r3
 8003214:	481c      	ldr	r0, [pc, #112]	@ (8003288 <HAL_ADC_MspInit+0xe0>)
 8003216:	f001 fc3d 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800321a:	e02c      	b.n	8003276 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_ADC_MspInit+0xe4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d127      	bne.n	8003276 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 8003230:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003234:	6453      	str	r3, [r2, #68]	@ 0x44
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <HAL_ADC_MspInit+0xdc>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800325e:	2302      	movs	r3, #2
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003262:	2303      	movs	r3, #3
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <HAL_ADC_MspInit+0xe0>)
 8003272:	f001 fc0f 	bl	8004a94 <HAL_GPIO_Init>
}
 8003276:	bf00      	nop
 8003278:	3730      	adds	r7, #48	@ 0x30
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40012000 	.word	0x40012000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000
 800328c:	40012100 	.word	0x40012100

08003290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <HAL_I2C_MspInit+0x84>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d12c      	bne.n	800330c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a17      	ldr	r2, [pc, #92]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d4:	2312      	movs	r3, #18
 80032d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032e0:	2304      	movs	r3, #4
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	480c      	ldr	r0, [pc, #48]	@ (800331c <HAL_I2C_MspInit+0x8c>)
 80032ec:	f001 fbd2 	bl	8004a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 80032fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003300:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <HAL_I2C_MspInit+0x88>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	@ 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40005400 	.word	0x40005400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	@ 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <HAL_TIM_Base_MspInit+0xdc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d11e      	bne.n	8003380 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b2e      	ldr	r3, [pc, #184]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	4a2d      	ldr	r2, [pc, #180]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	6453      	str	r3, [r2, #68]	@ 0x44
 8003352:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2105      	movs	r1, #5
 8003362:	2018      	movs	r0, #24
 8003364:	f001 facd 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003368:	2018      	movs	r0, #24
 800336a:	f001 fae6 	bl	800493a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2105      	movs	r1, #5
 8003372:	2019      	movs	r0, #25
 8003374:	f001 fac5 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003378:	2019      	movs	r0, #25
 800337a:	f001 fade 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800337e:	e038      	b.n	80033f2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1f      	ldr	r2, [pc, #124]	@ (8003404 <HAL_TIM_Base_MspInit+0xe4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d133      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a1b      	ldr	r2, [pc, #108]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_TIM_Base_MspInit+0xe0>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80033c2:	23c0      	movs	r3, #192	@ 0xc0
 80033c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033d2:	2303      	movs	r3, #3
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4619      	mov	r1, r3
 80033dc:	480a      	ldr	r0, [pc, #40]	@ (8003408 <HAL_TIM_Base_MspInit+0xe8>)
 80033de:	f001 fb59 	bl	8004a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2105      	movs	r1, #5
 80033e6:	202d      	movs	r0, #45	@ 0x2d
 80033e8:	f001 fa8b 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80033ec:	202d      	movs	r0, #45	@ 0x2d
 80033ee:	f001 faa4 	bl	800493a <HAL_NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40023800 	.word	0x40023800
 8003404:	40010400 	.word	0x40010400
 8003408:	40020800 	.word	0x40020800

0800340c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08c      	sub	sp, #48	@ 0x30
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d14b      	bne.n	80034c6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	4b3f      	ldr	r3, [pc, #252]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a3e      	ldr	r2, [pc, #248]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6313      	str	r3, [r2, #48]	@ 0x30
 800345a:	4b35      	ldr	r3, [pc, #212]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6313      	str	r3, [r2, #48]	@ 0x30
 8003476:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8003482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003494:	2301      	movs	r3, #1
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003498:	f107 031c 	add.w	r3, r7, #28
 800349c:	4619      	mov	r1, r3
 800349e:	4825      	ldr	r0, [pc, #148]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x128>)
 80034a0:	f001 faf8 	bl	8004a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 80034a4:	2308      	movs	r3, #8
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 031c 	add.w	r3, r7, #28
 80034bc:	4619      	mov	r1, r3
 80034be:	481e      	ldr	r0, [pc, #120]	@ (8003538 <HAL_TIM_Encoder_MspInit+0x12c>)
 80034c0:	f001 fae8 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034c4:	e030      	b.n	8003528 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_TIM_Encoder_MspInit+0x130>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d12b      	bne.n	8003528 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4a15      	ldr	r2, [pc, #84]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <HAL_TIM_Encoder_MspInit+0x124>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 8003508:	23c0      	movs	r3, #192	@ 0xc0
 800350a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003518:	2302      	movs	r3, #2
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	4619      	mov	r1, r3
 8003522:	4804      	ldr	r0, [pc, #16]	@ (8003534 <HAL_TIM_Encoder_MspInit+0x128>)
 8003524:	f001 fab6 	bl	8004a94 <HAL_GPIO_Init>
}
 8003528:	bf00      	nop
 800352a:	3730      	adds	r7, #48	@ 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40000400 	.word	0x40000400

08003540 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	@ 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_TIM_IC_MspInit+0x94>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d134      	bne.n	80035cc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b1c      	ldr	r3, [pc, #112]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b19      	ldr	r3, [pc, #100]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <HAL_TIM_IC_MspInit+0x98>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800359a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800359e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035ac:	2302      	movs	r3, #2
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4619      	mov	r1, r3
 80035b6:	4809      	ldr	r0, [pc, #36]	@ (80035dc <HAL_TIM_IC_MspInit+0x9c>)
 80035b8:	f001 fa6c 	bl	8004a94 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80035bc:	2200      	movs	r2, #0
 80035be:	2105      	movs	r1, #5
 80035c0:	201e      	movs	r0, #30
 80035c2:	f001 f99e 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c6:	201e      	movs	r0, #30
 80035c8:	f001 f9b7 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035cc:	bf00      	nop
 80035ce:	3728      	adds	r7, #40	@ 0x28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020c00 	.word	0x40020c00

080035e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e8:	f107 030c 	add.w	r3, r7, #12
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a12      	ldr	r2, [pc, #72]	@ (8003648 <HAL_TIM_MspPostInit+0x68>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d11e      	bne.n	8003640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_TIM_MspPostInit+0x6c>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <HAL_TIM_MspPostInit+0x6c>)
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6313      	str	r3, [r2, #48]	@ 0x30
 8003612:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_TIM_MspPostInit+0x6c>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800361e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003630:	2301      	movs	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4619      	mov	r1, r3
 800363a:	4805      	ldr	r0, [pc, #20]	@ (8003650 <HAL_TIM_MspPostInit+0x70>)
 800363c:	f001 fa2a 	bl	8004a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40010000 	.word	0x40010000
 800364c:	40023800 	.word	0x40023800
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	@ 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <HAL_UART_MspInit+0x94>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d134      	bne.n	80036e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_UART_MspInit+0x98>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_UART_MspInit+0x98>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003684:	6413      	str	r3, [r2, #64]	@ 0x40
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_UART_MspInit+0x98>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_UART_MspInit+0x98>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <HAL_UART_MspInit+0x98>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a2:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_UART_MspInit+0x98>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80036b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036bc:	2303      	movs	r3, #3
 80036be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036c0:	2307      	movs	r3, #7
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <HAL_UART_MspInit+0x9c>)
 80036cc:	f001 f9e2 	bl	8004a94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2105      	movs	r1, #5
 80036d4:	2027      	movs	r0, #39	@ 0x27
 80036d6:	f001 f914 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036da:	2027      	movs	r0, #39	@ 0x27
 80036dc:	f001 f92d 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	@ 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40004800 	.word	0x40004800
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020800 	.word	0x40020800

080036f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <NMI_Handler+0x4>

080036fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <HardFault_Handler+0x4>

08003704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <MemManage_Handler+0x4>

0800370c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <BusFault_Handler+0x4>

08003714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <UsageFault_Handler+0x4>

0800371c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800372e:	f000 fbc9 	bl	8003ec4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003732:	f007 fb4d 	bl	800add0 <xTaskGetSchedulerState>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800373c:	f008 f944 	bl	800b9c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003758:	4802      	ldr	r0, [pc, #8]	@ (8003764 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800375a:	f003 fb9d 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200002e8 	.word	0x200002e8

08003768 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800376e:	f003 fb93 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200002e8 	.word	0x200002e8

0800377c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <TIM4_IRQHandler+0x10>)
 8003782:	f003 fb89 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200003c0 	.word	0x200003c0

08003790 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003794:	4802      	ldr	r0, [pc, #8]	@ (80037a0 <USART3_IRQHandler+0x10>)
 8003796:	f004 fd45 	bl	8008224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000450 	.word	0x20000450

080037a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80037a8:	4802      	ldr	r0, [pc, #8]	@ (80037b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80037aa:	f003 fb75 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000408 	.word	0x20000408

080037b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return 1;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_kill>:

int _kill(int pid, int sig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037d2:	f009 f99f 	bl	800cb14 <__errno>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2216      	movs	r2, #22
 80037da:	601a      	str	r2, [r3, #0]
  return -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_exit>:

void _exit (int status)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffe7 	bl	80037c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <_exit+0x12>

080037fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e00a      	b.n	8003826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003810:	f3af 8000 	nop.w
 8003814:	4601      	mov	r1, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	60ba      	str	r2, [r7, #8]
 800381c:	b2ca      	uxtb	r2, r1
 800381e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3301      	adds	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	dbf0      	blt.n	8003810 <_read+0x12>
  }

  return len;
 800382e:	687b      	ldr	r3, [r7, #4]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e009      	b.n	800385e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	60ba      	str	r2, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3301      	adds	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	dbf1      	blt.n	800384a <_write+0x12>
  }
  return len;
 8003866:	687b      	ldr	r3, [r7, #4]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_close>:

int _close(int file)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003898:	605a      	str	r2, [r3, #4]
  return 0;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_isatty>:

int _isatty(int file)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e0:	4a14      	ldr	r2, [pc, #80]	@ (8003934 <_sbrk+0x5c>)
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <_sbrk+0x60>)
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <_sbrk+0x64>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <_sbrk+0x64>)
 80038f6:	4a12      	ldr	r2, [pc, #72]	@ (8003940 <_sbrk+0x68>)
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038fa:	4b10      	ldr	r3, [pc, #64]	@ (800393c <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d207      	bcs.n	8003918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003908:	f009 f904 	bl	800cb14 <__errno>
 800390c:	4603      	mov	r3, r0
 800390e:	220c      	movs	r2, #12
 8003910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e009      	b.n	800392c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003918:	4b08      	ldr	r3, [pc, #32]	@ (800393c <_sbrk+0x64>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <_sbrk+0x64>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	4a05      	ldr	r2, [pc, #20]	@ (800393c <_sbrk+0x64>)
 8003928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800392a:	68fb      	ldr	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20020000 	.word	0x20020000
 8003938:	00000400 	.word	0x00000400
 800393c:	2000053c 	.word	0x2000053c
 8003940:	20005478 	.word	0x20005478

08003944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <SystemInit+0x20>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	4a05      	ldr	r2, [pc, #20]	@ (8003964 <SystemInit+0x20>)
 8003950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800396c:	480d      	ldr	r0, [pc, #52]	@ (80039a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800396e:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003970:	4a0e      	ldr	r2, [pc, #56]	@ (80039ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003974:	e002      	b.n	800397c <LoopCopyDataInit>

08003976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397a:	3304      	adds	r3, #4

0800397c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800397c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003980:	d3f9      	bcc.n	8003976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003982:	4a0b      	ldr	r2, [pc, #44]	@ (80039b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003984:	4c0b      	ldr	r4, [pc, #44]	@ (80039b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003988:	e001      	b.n	800398e <LoopFillZerobss>

0800398a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800398c:	3204      	adds	r2, #4

0800398e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003990:	d3fb      	bcc.n	800398a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003992:	f7ff ffd7 	bl	8003944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003996:	f009 f8c3 	bl	800cb20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399a:	f7fd fa9d 	bl	8000ed8 <main>
  bx  lr    
 800399e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80039ac:	0800fc10 	.word	0x0800fc10
  ldr r2, =_sbss
 80039b0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80039b4:	20005478 	.word	0x20005478

080039b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC_IRQHandler>
	...

080039bc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80039c2:	2300      	movs	r3, #0
 80039c4:	71fb      	strb	r3, [r7, #7]
 80039c6:	e026      	b.n	8003a16 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	3b50      	subs	r3, #80	@ 0x50
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f82b 	bl	8003a2c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80039d6:	2100      	movs	r1, #0
 80039d8:	2000      	movs	r0, #0
 80039da:	f000 f827 	bl	8003a2c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80039de:	2100      	movs	r1, #0
 80039e0:	2010      	movs	r0, #16
 80039e2:	f000 f823 	bl	8003a2c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80039e6:	2300      	movs	r3, #0
 80039e8:	71bb      	strb	r3, [r7, #6]
 80039ea:	e00d      	b.n	8003a08 <OLED_Refresh_Gram+0x4c>
 80039ec:	79ba      	ldrb	r2, [r7, #6]
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	490d      	ldr	r1, [pc, #52]	@ (8003a28 <OLED_Refresh_Gram+0x6c>)
 80039f2:	00d2      	lsls	r2, r2, #3
 80039f4:	440a      	add	r2, r1
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f815 	bl	8003a2c <OLED_WR_Byte>
 8003a02:	79bb      	ldrb	r3, [r7, #6]
 8003a04:	3301      	adds	r3, #1
 8003a06:	71bb      	strb	r3, [r7, #6]
 8003a08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	daed      	bge.n	80039ec <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	3301      	adds	r3, #1
 8003a14:	71fb      	strb	r3, [r7, #7]
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b07      	cmp	r3, #7
 8003a1a:	d9d5      	bls.n	80039c8 <OLED_Refresh_Gram+0xc>
	}   
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000540 	.word	0x20000540

08003a2c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	460a      	mov	r2, r1
 8003a36:	71fb      	strb	r3, [r7, #7]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003a3c:	79bb      	ldrb	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003a42:	2201      	movs	r2, #1
 8003a44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a48:	481c      	ldr	r0, [pc, #112]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a4a:	f001 f9bf 	bl	8004dcc <HAL_GPIO_WritePin>
 8003a4e:	e005      	b.n	8003a5c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a56:	4819      	ldr	r0, [pc, #100]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a58:	f001 f9b8 	bl	8004dcc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e01e      	b.n	8003aa0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003a62:	2200      	movs	r2, #0
 8003a64:	2120      	movs	r1, #32
 8003a66:	4815      	ldr	r0, [pc, #84]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a68:	f001 f9b0 	bl	8004dcc <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da05      	bge.n	8003a80 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003a74:	2201      	movs	r2, #1
 8003a76:	2140      	movs	r1, #64	@ 0x40
 8003a78:	4810      	ldr	r0, [pc, #64]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a7a:	f001 f9a7 	bl	8004dcc <HAL_GPIO_WritePin>
 8003a7e:	e004      	b.n	8003a8a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003a80:	2200      	movs	r2, #0
 8003a82:	2140      	movs	r1, #64	@ 0x40
 8003a84:	480d      	ldr	r0, [pc, #52]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a86:	f001 f9a1 	bl	8004dcc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	480b      	ldr	r0, [pc, #44]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003a90:	f001 f99c 	bl	8004dcc <HAL_GPIO_WritePin>
		dat<<=1;   
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b07      	cmp	r3, #7
 8003aa4:	d9dd      	bls.n	8003a62 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aac:	4803      	ldr	r0, [pc, #12]	@ (8003abc <OLED_WR_Byte+0x90>)
 8003aae:	f001 f98d 	bl	8004dcc <HAL_GPIO_WritePin>
} 
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	71fb      	strb	r3, [r7, #7]
 8003aca:	e014      	b.n	8003af6 <OLED_Clear+0x36>
 8003acc:	2300      	movs	r3, #0
 8003ace:	71bb      	strb	r3, [r7, #6]
 8003ad0:	e00a      	b.n	8003ae8 <OLED_Clear+0x28>
 8003ad2:	79ba      	ldrb	r2, [r7, #6]
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	490c      	ldr	r1, [pc, #48]	@ (8003b08 <OLED_Clear+0x48>)
 8003ad8:	00d2      	lsls	r2, r2, #3
 8003ada:	440a      	add	r2, r1
 8003adc:	4413      	add	r3, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	71bb      	strb	r3, [r7, #6]
 8003ae8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	daf0      	bge.n	8003ad2 <OLED_Clear+0x12>
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	3301      	adds	r3, #1
 8003af4:	71fb      	strb	r3, [r7, #7]
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d9e7      	bls.n	8003acc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003afc:	f7ff ff5e 	bl	80039bc <OLED_Refresh_Gram>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000540 	.word	0x20000540

08003b0c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
 8003b16:	460b      	mov	r3, r1
 8003b18:	71bb      	strb	r3, [r7, #6]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	db41      	blt.n	8003bae <OLED_DrawPoint+0xa2>
 8003b2a:	79bb      	ldrb	r3, [r7, #6]
 8003b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b2e:	d83e      	bhi.n	8003bae <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003b30:	79bb      	ldrb	r3, [r7, #6]
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f1c3 0307 	rsb	r3, r3, #7
 8003b3a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003b44:	7b7b      	ldrb	r3, [r7, #13]
 8003b46:	f1c3 0307 	rsb	r3, r3, #7
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003b52:	797b      	ldrb	r3, [r7, #5]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d012      	beq.n	8003b7e <OLED_DrawPoint+0x72>
 8003b58:	79fa      	ldrb	r2, [r7, #7]
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	4917      	ldr	r1, [pc, #92]	@ (8003bbc <OLED_DrawPoint+0xb0>)
 8003b5e:	00d2      	lsls	r2, r2, #3
 8003b60:	440a      	add	r2, r1
 8003b62:	4413      	add	r3, r2
 8003b64:	7818      	ldrb	r0, [r3, #0]
 8003b66:	79fa      	ldrb	r2, [r7, #7]
 8003b68:	7bbb      	ldrb	r3, [r7, #14]
 8003b6a:	7bf9      	ldrb	r1, [r7, #15]
 8003b6c:	4301      	orrs	r1, r0
 8003b6e:	b2c8      	uxtb	r0, r1
 8003b70:	4912      	ldr	r1, [pc, #72]	@ (8003bbc <OLED_DrawPoint+0xb0>)
 8003b72:	00d2      	lsls	r2, r2, #3
 8003b74:	440a      	add	r2, r1
 8003b76:	4413      	add	r3, r2
 8003b78:	4602      	mov	r2, r0
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e018      	b.n	8003bb0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003b7e:	79fa      	ldrb	r2, [r7, #7]
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	490e      	ldr	r1, [pc, #56]	@ (8003bbc <OLED_DrawPoint+0xb0>)
 8003b84:	00d2      	lsls	r2, r2, #3
 8003b86:	440a      	add	r2, r1
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b25a      	sxtb	r2, r3
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	4013      	ands	r3, r2
 8003b98:	b259      	sxtb	r1, r3
 8003b9a:	79fa      	ldrb	r2, [r7, #7]
 8003b9c:	7bbb      	ldrb	r3, [r7, #14]
 8003b9e:	b2c8      	uxtb	r0, r1
 8003ba0:	4906      	ldr	r1, [pc, #24]	@ (8003bbc <OLED_DrawPoint+0xb0>)
 8003ba2:	00d2      	lsls	r2, r2, #3
 8003ba4:	440a      	add	r2, r1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4602      	mov	r2, r0
 8003baa:	701a      	strb	r2, [r3, #0]
 8003bac:	e000      	b.n	8003bb0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003bae:	bf00      	nop
}
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000540 	.word	0x20000540

08003bc0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	71fb      	strb	r3, [r7, #7]
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71bb      	strb	r3, [r7, #6]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	717b      	strb	r3, [r7, #5]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003bde:	79bb      	ldrb	r3, [r7, #6]
 8003be0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003be2:	797b      	ldrb	r3, [r7, #5]
 8003be4:	3b20      	subs	r3, #32
 8003be6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	73bb      	strb	r3, [r7, #14]
 8003bec:	e04d      	b.n	8003c8a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003bee:	793b      	ldrb	r3, [r7, #4]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d10b      	bne.n	8003c0c <OLED_ShowChar+0x4c>
 8003bf4:	797a      	ldrb	r2, [r7, #5]
 8003bf6:	7bb9      	ldrb	r1, [r7, #14]
 8003bf8:	4828      	ldr	r0, [pc, #160]	@ (8003c9c <OLED_ShowChar+0xdc>)
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4403      	add	r3, r0
 8003c04:	440b      	add	r3, r1
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e007      	b.n	8003c1c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003c0c:	797a      	ldrb	r2, [r7, #5]
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	4923      	ldr	r1, [pc, #140]	@ (8003ca0 <OLED_ShowChar+0xe0>)
 8003c12:	0112      	lsls	r2, r2, #4
 8003c14:	440a      	add	r2, r1
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	737b      	strb	r3, [r7, #13]
 8003c20:	e02d      	b.n	8003c7e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da07      	bge.n	8003c3a <OLED_ShowChar+0x7a>
 8003c2a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c2e:	79b9      	ldrb	r1, [r7, #6]
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff ff6a 	bl	8003b0c <OLED_DrawPoint>
 8003c38:	e00c      	b.n	8003c54 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79b9      	ldrb	r1, [r7, #6]
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ff5c 	bl	8003b0c <OLED_DrawPoint>
			temp<<=1;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
			y++;
 8003c5a:	79bb      	ldrb	r3, [r7, #6]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003c60:	79ba      	ldrb	r2, [r7, #6]
 8003c62:	7b3b      	ldrb	r3, [r7, #12]
 8003c64:	1ad2      	subs	r2, r2, r3
 8003c66:	793b      	ldrb	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d105      	bne.n	8003c78 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003c6c:	7b3b      	ldrb	r3, [r7, #12]
 8003c6e:	71bb      	strb	r3, [r7, #6]
				x++;
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	3301      	adds	r3, #1
 8003c74:	71fb      	strb	r3, [r7, #7]
				break;
 8003c76:	e005      	b.n	8003c84 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003c78:	7b7b      	ldrb	r3, [r7, #13]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	737b      	strb	r3, [r7, #13]
 8003c7e:	7b7b      	ldrb	r3, [r7, #13]
 8003c80:	2b07      	cmp	r3, #7
 8003c82:	d9ce      	bls.n	8003c22 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003c84:	7bbb      	ldrb	r3, [r7, #14]
 8003c86:	3301      	adds	r3, #1
 8003c88:	73bb      	strb	r3, [r7, #14]
 8003c8a:	7bba      	ldrb	r2, [r7, #14]
 8003c8c:	793b      	ldrb	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3ad      	bcc.n	8003bee <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd90      	pop	{r4, r7, pc}
 8003c9c:	0800ee2c 	.word	0x0800ee2c
 8003ca0:	0800f2a0 	.word	0x0800f2a0

08003ca4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	4603      	mov	r3, r0
 8003cac:	603a      	str	r2, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003cb4:	e01f      	b.n	8003cf6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b7a      	cmp	r3, #122	@ 0x7a
 8003cba:	d904      	bls.n	8003cc6 <OLED_ShowString+0x22>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	71fb      	strb	r3, [r7, #7]
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003cc6:	79bb      	ldrb	r3, [r7, #6]
 8003cc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8003cca:	d905      	bls.n	8003cd8 <OLED_ShowString+0x34>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	71bb      	strb	r3, [r7, #6]
 8003cd4:	f7ff fef4 	bl	8003ac0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	79b9      	ldrb	r1, [r7, #6]
 8003cde:	79f8      	ldrb	r0, [r7, #7]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	f7ff ff6b 	bl	8003bc0 <OLED_ShowChar>
        x+=8;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	3308      	adds	r3, #8
 8003cee:	71fb      	strb	r3, [r7, #7]
        p++;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1db      	bne.n	8003cb6 <OLED_ShowString+0x12>
    }  
}	 
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <OLED_Init>:

void OLED_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8003d0c:	f002 f828 	bl	8005d60 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003d10:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <OLED_Init+0x110>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	4a40      	ldr	r2, [pc, #256]	@ (8003e18 <OLED_Init+0x110>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e18 <OLED_Init+0x110>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a3d      	ldr	r2, [pc, #244]	@ (8003e18 <OLED_Init+0x110>)
 8003d22:	f023 0304 	bic.w	r3, r3, #4
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003d28:	f002 f82e 	bl	8005d88 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	483a      	ldr	r0, [pc, #232]	@ (8003e1c <OLED_Init+0x114>)
 8003d32:	f001 f84b 	bl	8004dcc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003d36:	2064      	movs	r0, #100	@ 0x64
 8003d38:	f000 f8e4 	bl	8003f04 <HAL_Delay>
	OLED_RST_Set();
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	4836      	ldr	r0, [pc, #216]	@ (8003e1c <OLED_Init+0x114>)
 8003d42:	f001 f843 	bl	8004dcc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003d46:	2100      	movs	r1, #0
 8003d48:	20ae      	movs	r0, #174	@ 0xae
 8003d4a:	f7ff fe6f 	bl	8003a2c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003d4e:	2100      	movs	r1, #0
 8003d50:	20d5      	movs	r0, #213	@ 0xd5
 8003d52:	f7ff fe6b 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8003d56:	2100      	movs	r1, #0
 8003d58:	2050      	movs	r0, #80	@ 0x50
 8003d5a:	f7ff fe67 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003d5e:	2100      	movs	r1, #0
 8003d60:	20a8      	movs	r0, #168	@ 0xa8
 8003d62:	f7ff fe63 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8003d66:	2100      	movs	r1, #0
 8003d68:	203f      	movs	r0, #63	@ 0x3f
 8003d6a:	f7ff fe5f 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003d6e:	2100      	movs	r1, #0
 8003d70:	20d3      	movs	r0, #211	@ 0xd3
 8003d72:	f7ff fe5b 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff fe57 	bl	8003a2c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003d7e:	2100      	movs	r1, #0
 8003d80:	2040      	movs	r0, #64	@ 0x40
 8003d82:	f7ff fe53 	bl	8003a2c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8003d86:	2100      	movs	r1, #0
 8003d88:	208d      	movs	r0, #141	@ 0x8d
 8003d8a:	f7ff fe4f 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003d8e:	2100      	movs	r1, #0
 8003d90:	2014      	movs	r0, #20
 8003d92:	f7ff fe4b 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8003d96:	2100      	movs	r1, #0
 8003d98:	2020      	movs	r0, #32
 8003d9a:	f7ff fe47 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003d9e:	2100      	movs	r1, #0
 8003da0:	2002      	movs	r0, #2
 8003da2:	f7ff fe43 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8003da6:	2100      	movs	r1, #0
 8003da8:	20a1      	movs	r0, #161	@ 0xa1
 8003daa:	f7ff fe3f 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003dae:	2100      	movs	r1, #0
 8003db0:	20c0      	movs	r0, #192	@ 0xc0
 8003db2:	f7ff fe3b 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003db6:	2100      	movs	r1, #0
 8003db8:	20da      	movs	r0, #218	@ 0xda
 8003dba:	f7ff fe37 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	2012      	movs	r0, #18
 8003dc2:	f7ff fe33 	bl	8003a2c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2081      	movs	r0, #129	@ 0x81
 8003dca:	f7ff fe2f 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003dce:	2100      	movs	r1, #0
 8003dd0:	20ef      	movs	r0, #239	@ 0xef
 8003dd2:	f7ff fe2b 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	20d9      	movs	r0, #217	@ 0xd9
 8003dda:	f7ff fe27 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8003dde:	2100      	movs	r1, #0
 8003de0:	20f1      	movs	r0, #241	@ 0xf1
 8003de2:	f7ff fe23 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003de6:	2100      	movs	r1, #0
 8003de8:	20db      	movs	r0, #219	@ 0xdb
 8003dea:	f7ff fe1f 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8003dee:	2100      	movs	r1, #0
 8003df0:	2030      	movs	r0, #48	@ 0x30
 8003df2:	f7ff fe1b 	bl	8003a2c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003df6:	2100      	movs	r1, #0
 8003df8:	20a4      	movs	r0, #164	@ 0xa4
 8003dfa:	f7ff fe17 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8003dfe:	2100      	movs	r1, #0
 8003e00:	20a6      	movs	r0, #166	@ 0xa6
 8003e02:	f7ff fe13 	bl	8003a2c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003e06:	2100      	movs	r1, #0
 8003e08:	20af      	movs	r0, #175	@ 0xaf
 8003e0a:	f7ff fe0f 	bl	8003a2c <OLED_WR_Byte>
	OLED_Clear(); 
 8003e0e:	f7ff fe57 	bl	8003ac0 <OLED_Clear>
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40021000 	.word	0x40021000

08003e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_Init+0x40>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	@ (8003e60 <HAL_Init+0x40>)
 8003e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_Init+0x40>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_Init+0x40>)
 8003e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e3c:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <HAL_Init+0x40>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a07      	ldr	r2, [pc, #28]	@ (8003e60 <HAL_Init+0x40>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e48:	2003      	movs	r0, #3
 8003e4a:	f000 fd4f 	bl	80048ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e4e:	200f      	movs	r0, #15
 8003e50:	f000 f808 	bl	8003e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e54:	f7ff f974 	bl	8003140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023c00 	.word	0x40023c00

08003e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e6c:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <HAL_InitTick+0x54>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <HAL_InitTick+0x58>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fd67 	bl	8004956 <HAL_SYSTICK_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00e      	b.n	8003eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d80a      	bhi.n	8003eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f000 fd2f 	bl	8004902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ea4:	4a06      	ldr	r2, [pc, #24]	@ (8003ec0 <HAL_InitTick+0x5c>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	2000000c 	.word	0x2000000c
 8003ebc:	20000014 	.word	0x20000014
 8003ec0:	20000010 	.word	0x20000010

08003ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_IncTick+0x20>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000014 	.word	0x20000014
 8003ee8:	20000940 	.word	0x20000940

08003eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_GetTick+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000940 	.word	0x20000940

08003f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f0c:	f7ff ffee 	bl	8003eec <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d005      	beq.n	8003f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <HAL_Delay+0x44>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f2a:	bf00      	nop
 8003f2c:	f7ff ffde 	bl	8003eec <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d8f7      	bhi.n	8003f2c <HAL_Delay+0x28>
  {
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000014 	.word	0x20000014

08003f4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e033      	b.n	8003fca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff f91c 	bl	80031a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f92:	f023 0302 	bic.w	r3, r3, #2
 8003f96:	f043 0202 	orr.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fad8 	bl	8004554 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fba:	e001      	b.n	8003fc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Start+0x1a>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e0b2      	b.n	8004154 <HAL_ADC_Start+0x180>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b01      	cmp	r3, #1
 8004002:	d018      	beq.n	8004036 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004014:	4b52      	ldr	r3, [pc, #328]	@ (8004160 <HAL_ADC_Start+0x18c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a52      	ldr	r2, [pc, #328]	@ (8004164 <HAL_ADC_Start+0x190>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0c9a      	lsrs	r2, r3, #18
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004028:	e002      	b.n	8004030 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3b01      	subs	r3, #1
 800402e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f9      	bne.n	800402a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d17a      	bne.n	800413a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800406e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004082:	d106      	bne.n	8004092 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f023 0206 	bic.w	r2, r3, #6
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004090:	e002      	b.n	8004098 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a0:	4b31      	ldr	r3, [pc, #196]	@ (8004168 <HAL_ADC_Start+0x194>)
 80040a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80040ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d12a      	bne.n	8004110 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <HAL_ADC_Start+0x198>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d015      	beq.n	80040f0 <HAL_ADC_Start+0x11c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <HAL_ADC_Start+0x19c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d105      	bne.n	80040da <HAL_ADC_Start+0x106>
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <HAL_ADC_Start+0x194>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a25      	ldr	r2, [pc, #148]	@ (8004174 <HAL_ADC_Start+0x1a0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d136      	bne.n	8004152 <HAL_ADC_Start+0x17e>
 80040e4:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <HAL_ADC_Start+0x194>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d130      	bne.n	8004152 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d129      	bne.n	8004152 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	e020      	b.n	8004152 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_ADC_Start+0x198>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d11b      	bne.n	8004152 <HAL_ADC_Start+0x17e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d114      	bne.n	8004152 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e00b      	b.n	8004152 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	2000000c 	.word	0x2000000c
 8004164:	431bde83 	.word	0x431bde83
 8004168:	40012300 	.word	0x40012300
 800416c:	40012000 	.word	0x40012000
 8004170:	40012100 	.word	0x40012100
 8004174:	40012200 	.word	0x40012200

08004178 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_ADC_Stop+0x16>
 800418a:	2302      	movs	r3, #2
 800418c:	e021      	b.n	80041d2 <HAL_ADC_Stop+0x5a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fa:	d113      	bne.n	8004224 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420a:	d10b      	bne.n	8004224 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e063      	b.n	80042ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004224:	f7ff fe62 	bl	8003eec <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800422a:	e021      	b.n	8004270 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d01d      	beq.n	8004270 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_ADC_PollForConversion+0x6c>
 800423a:	f7ff fe57 	bl	8003eec <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d212      	bcs.n	8004270 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d00b      	beq.n	8004270 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03d      	b.n	80042ec <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d1d6      	bne.n	800422c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0212 	mvn.w	r2, #18
 8004286:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d123      	bne.n	80042ea <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11f      	bne.n	80042ea <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d111      	bne.n	80042ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1c>
 8004328:	2302      	movs	r3, #2
 800432a:	e105      	b.n	8004538 <HAL_ADC_ConfigChannel+0x228>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b09      	cmp	r3, #9
 800433a:	d925      	bls.n	8004388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	3b1e      	subs	r3, #30
 8004352:	2207      	movs	r2, #7
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43da      	mvns	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	400a      	ands	r2, r1
 8004360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4618      	mov	r0, r3
 8004374:	4603      	mov	r3, r0
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4403      	add	r3, r0
 800437a:	3b1e      	subs	r3, #30
 800437c:	409a      	lsls	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	e022      	b.n	80043ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	4613      	mov	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	2207      	movs	r2, #7
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	400a      	ands	r2, r1
 80043aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	4618      	mov	r0, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4403      	add	r3, r0
 80043c4:	409a      	lsls	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d824      	bhi.n	8004420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	3b05      	subs	r3, #5
 80043e8:	221f      	movs	r2, #31
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	400a      	ands	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	4618      	mov	r0, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	3b05      	subs	r3, #5
 8004412:	fa00 f203 	lsl.w	r2, r0, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34
 800441e:	e04c      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d824      	bhi.n	8004472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	3b23      	subs	r3, #35	@ 0x23
 800443a:	221f      	movs	r2, #31
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43da      	mvns	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	400a      	ands	r2, r1
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4618      	mov	r0, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	3b23      	subs	r3, #35	@ 0x23
 8004464:	fa00 f203 	lsl.w	r2, r0, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004470:	e023      	b.n	80044ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3b41      	subs	r3, #65	@ 0x41
 8004484:	221f      	movs	r2, #31
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	400a      	ands	r2, r1
 8004492:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	3b41      	subs	r3, #65	@ 0x41
 80044ae:	fa00 f203 	lsl.w	r2, r0, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ba:	4b22      	ldr	r3, [pc, #136]	@ (8004544 <HAL_ADC_ConfigChannel+0x234>)
 80044bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a21      	ldr	r2, [pc, #132]	@ (8004548 <HAL_ADC_ConfigChannel+0x238>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1cc>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_ADC_ConfigChannel+0x238>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d123      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d003      	beq.n	80044f6 <HAL_ADC_ConfigChannel+0x1e6>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b11      	cmp	r3, #17
 80044f4:	d11b      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b10      	cmp	r3, #16
 8004508:	d111      	bne.n	800452e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800450a:	4b10      	ldr	r3, [pc, #64]	@ (800454c <HAL_ADC_ConfigChannel+0x23c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <HAL_ADC_ConfigChannel+0x240>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	0c9a      	lsrs	r2, r3, #18
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004520:	e002      	b.n	8004528 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f9      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012300 	.word	0x40012300
 8004548:	40012000 	.word	0x40012000
 800454c:	2000000c 	.word	0x2000000c
 8004550:	431bde83 	.word	0x431bde83

08004554 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800455c:	4b79      	ldr	r3, [pc, #484]	@ (8004744 <ADC_Init+0x1f0>)
 800455e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	4a58      	ldr	r2, [pc, #352]	@ (8004748 <ADC_Init+0x1f4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800461c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	e00f      	b.n	8004652 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004650:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0202 	bic.w	r2, r2, #2
 8004660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7e1b      	ldrb	r3, [r3, #24]
 800466c:	005a      	lsls	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800469e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	3b01      	subs	r3, #1
 80046ac:	035a      	lsls	r2, r3, #13
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e007      	b.n	80046c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	051a      	lsls	r2, r3, #20
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800470a:	025a      	lsls	r2, r3, #9
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	029a      	lsls	r2, r3, #10
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012300 	.word	0x40012300
 8004748:	0f000001 	.word	0x0f000001

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477e:	4a04      	ldr	r2, [pc, #16]	@ (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	60d3      	str	r3, [r2, #12]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	@ (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4907      	ldr	r1, [pc, #28]	@ (80047e8 <__NVIC_EnableIRQ+0x38>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	@ (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	@ (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	@ 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	@ 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b8:	d301      	bcc.n	80048be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00f      	b.n	80048de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048be:	4a0a      	ldr	r2, [pc, #40]	@ (80048e8 <SysTick_Config+0x40>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c6:	210f      	movs	r1, #15
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	f7ff ff8e 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <SysTick_Config+0x40>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d6:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <SysTick_Config+0x40>)
 80048d8:	2207      	movs	r2, #7
 80048da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000e010 	.word	0xe000e010

080048ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff29 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004914:	f7ff ff3e 	bl	8004794 <__NVIC_GetPriorityGrouping>
 8004918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f7ff ff8e 	bl	8004840 <NVIC_EncodePriority>
 8004924:	4602      	mov	r2, r0
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff5d 	bl	80047ec <__NVIC_SetPriority>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff31 	bl	80047b0 <__NVIC_EnableIRQ>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ffa2 	bl	80048a8 <SysTick_Config>
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800497c:	f7ff fab6 	bl	8003eec <HAL_GetTick>
 8004980:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d008      	beq.n	80049a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2280      	movs	r2, #128	@ 0x80
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e052      	b.n	8004a46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0216 	bic.w	r2, r2, #22
 80049ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <HAL_DMA_Abort+0x62>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0208 	bic.w	r2, r2, #8
 80049de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f0:	e013      	b.n	8004a1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049f2:	f7ff fa7b 	bl	8003eec <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d90c      	bls.n	8004a1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e015      	b.n	8004a46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e4      	bne.n	80049f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	223f      	movs	r2, #63	@ 0x3f
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d004      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2280      	movs	r2, #128	@ 0x80
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e00c      	b.n	8004a86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2205      	movs	r2, #5
 8004a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	@ 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	e16b      	b.n	8004d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	f040 815a 	bne.w	8004d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d005      	beq.n	8004ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d130      	bne.n	8004b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	2203      	movs	r2, #3
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 0201 	and.w	r2, r3, #1
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d017      	beq.n	8004b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	2203      	movs	r2, #3
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d123      	bne.n	8004bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	08da      	lsrs	r2, r3, #3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3208      	adds	r2, #8
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	08da      	lsrs	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3208      	adds	r2, #8
 8004bd2:	69b9      	ldr	r1, [r7, #24]
 8004bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	2203      	movs	r2, #3
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 0203 	and.w	r2, r3, #3
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80b4 	beq.w	8004d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	4b60      	ldr	r3, [pc, #384]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	4a5f      	ldr	r2, [pc, #380]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004da0 <HAL_GPIO_Init+0x30c>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c36:	4a5b      	ldr	r2, [pc, #364]	@ (8004da4 <HAL_GPIO_Init+0x310>)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a52      	ldr	r2, [pc, #328]	@ (8004da8 <HAL_GPIO_Init+0x314>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <HAL_GPIO_Init+0x226>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a51      	ldr	r2, [pc, #324]	@ (8004dac <HAL_GPIO_Init+0x318>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d025      	beq.n	8004cb6 <HAL_GPIO_Init+0x222>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a50      	ldr	r2, [pc, #320]	@ (8004db0 <HAL_GPIO_Init+0x31c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <HAL_GPIO_Init+0x21e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4f      	ldr	r2, [pc, #316]	@ (8004db4 <HAL_GPIO_Init+0x320>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d019      	beq.n	8004cae <HAL_GPIO_Init+0x21a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004db8 <HAL_GPIO_Init+0x324>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d013      	beq.n	8004caa <HAL_GPIO_Init+0x216>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a4d      	ldr	r2, [pc, #308]	@ (8004dbc <HAL_GPIO_Init+0x328>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00d      	beq.n	8004ca6 <HAL_GPIO_Init+0x212>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004dc0 <HAL_GPIO_Init+0x32c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <HAL_GPIO_Init+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc4 <HAL_GPIO_Init+0x330>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <HAL_GPIO_Init+0x20a>
 8004c9a:	2307      	movs	r3, #7
 8004c9c:	e00e      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x228>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	@ (8004da4 <HAL_GPIO_Init+0x310>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b30      	ldr	r3, [pc, #192]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b26      	ldr	r3, [pc, #152]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a12      	ldr	r2, [pc, #72]	@ (8004dc8 <HAL_GPIO_Init+0x334>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae90 	bls.w	8004ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40021c00 	.word	0x40021c00
 8004dc8:	40013c00 	.word	0x40013c00

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4013      	ands	r3, r2
 8004e16:	041a      	lsls	r2, r3, #16
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	43d9      	mvns	r1, r3
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	400b      	ands	r3, r1
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	619a      	str	r2, [r3, #24]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e12b      	b.n	800509e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fe fa18 	bl	8003290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2224      	movs	r2, #36	@ 0x24
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e98:	f001 fbba 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4a81      	ldr	r2, [pc, #516]	@ (80050a8 <HAL_I2C_Init+0x274>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d807      	bhi.n	8004eb8 <HAL_I2C_Init+0x84>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a80      	ldr	r2, [pc, #512]	@ (80050ac <HAL_I2C_Init+0x278>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bf94      	ite	ls
 8004eb0:	2301      	movls	r3, #1
 8004eb2:	2300      	movhi	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e006      	b.n	8004ec6 <HAL_I2C_Init+0x92>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a7d      	ldr	r2, [pc, #500]	@ (80050b0 <HAL_I2C_Init+0x27c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bf94      	ite	ls
 8004ec0:	2301      	movls	r3, #1
 8004ec2:	2300      	movhi	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0e7      	b.n	800509e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a78      	ldr	r2, [pc, #480]	@ (80050b4 <HAL_I2C_Init+0x280>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	0c9b      	lsrs	r3, r3, #18
 8004ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a6a      	ldr	r2, [pc, #424]	@ (80050a8 <HAL_I2C_Init+0x274>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <HAL_I2C_Init+0xd4>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3301      	adds	r3, #1
 8004f06:	e009      	b.n	8004f1c <HAL_I2C_Init+0xe8>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	4a69      	ldr	r2, [pc, #420]	@ (80050b8 <HAL_I2C_Init+0x284>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	495c      	ldr	r1, [pc, #368]	@ (80050a8 <HAL_I2C_Init+0x274>)
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	d819      	bhi.n	8004f70 <HAL_I2C_Init+0x13c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e59      	subs	r1, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4a:	1c59      	adds	r1, r3, #1
 8004f4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f50:	400b      	ands	r3, r1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_I2C_Init+0x138>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1e59      	subs	r1, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6a:	e051      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e04f      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d111      	bne.n	8004f9c <HAL_I2C_Init+0x168>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1e58      	subs	r0, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	440b      	add	r3, r1
 8004f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e012      	b.n	8004fc2 <HAL_I2C_Init+0x18e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1e58      	subs	r0, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	0099      	lsls	r1, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_I2C_Init+0x196>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e022      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_I2C_Init+0x1bc>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1e58      	subs	r0, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	440b      	add	r3, r1
 8004fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fee:	e00f      	b.n	8005010 <HAL_I2C_Init+0x1dc>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1e58      	subs	r0, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	0099      	lsls	r1, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	fbb0 f3f3 	udiv	r3, r0, r3
 8005006:	3301      	adds	r3, #1
 8005008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	6809      	ldr	r1, [r1, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800503e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6911      	ldr	r1, [r2, #16]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68d2      	ldr	r2, [r2, #12]
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	430b      	orrs	r3, r1
 8005052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	000186a0 	.word	0x000186a0
 80050ac:	001e847f 	.word	0x001e847f
 80050b0:	003d08ff 	.word	0x003d08ff
 80050b4:	431bde83 	.word	0x431bde83
 80050b8:	10624dd3 	.word	0x10624dd3

080050bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	461a      	mov	r2, r3
 80050c8:	460b      	mov	r3, r1
 80050ca:	817b      	strh	r3, [r7, #10]
 80050cc:	4613      	mov	r3, r2
 80050ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d0:	f7fe ff0c 	bl	8003eec <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b20      	cmp	r3, #32
 80050e0:	f040 80e0 	bne.w	80052a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2319      	movs	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	4970      	ldr	r1, [pc, #448]	@ (80052b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fc58 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0d3      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_I2C_Master_Transmit+0x50>
 8005108:	2302      	movs	r3, #2
 800510a:	e0cc      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d007      	beq.n	8005132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2221      	movs	r2, #33	@ 0x21
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2210      	movs	r2, #16
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	893a      	ldrh	r2, [r7, #8]
 8005162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a50      	ldr	r2, [pc, #320]	@ (80052b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005172:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005174:	8979      	ldrh	r1, [r7, #10]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fac2 	bl	8005704 <I2C_MasterRequestWrite>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e08d      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051a0:	e066      	b.n	8005270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fcd2 	bl	8005b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d107      	bne.n	80051ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e06b      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d11b      	bne.n	8005244 <HAL_I2C_Master_Transmit+0x188>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d017      	beq.n	8005244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	6a39      	ldr	r1, [r7, #32]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fcc2 	bl	8005bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00d      	beq.n	8005270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005258:	2b04      	cmp	r3, #4
 800525a:	d107      	bne.n	800526c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e01a      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	d194      	bne.n	80051a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	00100002 	.word	0x00100002
 80052b4:	ffff0000 	.word	0xffff0000

080052b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08c      	sub	sp, #48	@ 0x30
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	461a      	mov	r2, r3
 80052c4:	460b      	mov	r3, r1
 80052c6:	817b      	strh	r3, [r7, #10]
 80052c8:	4613      	mov	r3, r2
 80052ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052cc:	f7fe fe0e 	bl	8003eec <HAL_GetTick>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	f040 820b 	bne.w	80056f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2319      	movs	r3, #25
 80052e6:	2201      	movs	r2, #1
 80052e8:	497c      	ldr	r1, [pc, #496]	@ (80054dc <HAL_I2C_Master_Receive+0x224>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fb5a 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e1fe      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_I2C_Master_Receive+0x50>
 8005304:	2302      	movs	r3, #2
 8005306:	e1f7      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800533c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2222      	movs	r2, #34	@ 0x22
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2210      	movs	r2, #16
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	893a      	ldrh	r2, [r7, #8]
 800535e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a5c      	ldr	r2, [pc, #368]	@ (80054e0 <HAL_I2C_Master_Receive+0x228>)
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005370:	8979      	ldrh	r1, [r7, #10]
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa46 	bl	8005808 <I2C_MasterRequestRead>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e1b8      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d113      	bne.n	80053b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e18c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11b      	bne.n	80053f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e16c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d11b      	bne.n	8005436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	e14c      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800545c:	e138      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005462:	2b03      	cmp	r3, #3
 8005464:	f200 80f1 	bhi.w	800564a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546c:	2b01      	cmp	r3, #1
 800546e:	d123      	bne.n	80054b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005472:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 fbed 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e139      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054b6:	e10b      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d14e      	bne.n	800555e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	2200      	movs	r2, #0
 80054c8:	4906      	ldr	r1, [pc, #24]	@ (80054e4 <HAL_I2C_Master_Receive+0x22c>)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fa6a 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e10e      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
 80054da:	bf00      	nop
 80054dc:	00100002 	.word	0x00100002
 80054e0:	ffff0000 	.word	0xffff0000
 80054e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800555c:	e0b8      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	4966      	ldr	r1, [pc, #408]	@ (8005700 <HAL_I2C_Master_Receive+0x448>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa1b 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0bf      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	494f      	ldr	r1, [pc, #316]	@ (8005700 <HAL_I2C_Master_Receive+0x448>)
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f9ed 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e091      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005648:	e042      	b.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fb00 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e04c      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d118      	bne.n	80056d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f aec2 	bne.w	800545e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	@ 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010004 	.word	0x00010004

08005704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	460b      	mov	r3, r1
 8005712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d006      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d003      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800572c:	d108      	bne.n	8005740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e00b      	b.n	8005758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005744:	2b12      	cmp	r3, #18
 8005746:	d107      	bne.n	8005758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f91d 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577e:	d103      	bne.n	8005788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e035      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005794:	d108      	bne.n	80057a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	e01b      	b.n	80057e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	11db      	asrs	r3, r3, #7
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f063 030f 	orn	r3, r3, #15
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	490e      	ldr	r1, [pc, #56]	@ (8005800 <I2C_MasterRequestWrite+0xfc>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f943 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e010      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4907      	ldr	r1, [pc, #28]	@ (8005804 <I2C_MasterRequestWrite+0x100>)
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f933 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	00010008 	.word	0x00010008
 8005804:	00010002 	.word	0x00010002

08005808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800582c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d006      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d003      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e00b      	b.n	800586c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	2b11      	cmp	r3, #17
 800585a:	d107      	bne.n	800586c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800586a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f893 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005892:	d103      	bne.n	800589c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e079      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e05f      	b.n	800597c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030f 	orn	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4930      	ldr	r1, [pc, #192]	@ (800599c <I2C_MasterRequestRead+0x194>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8b9 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e054      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4929      	ldr	r1, [pc, #164]	@ (80059a0 <I2C_MasterRequestRead+0x198>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8a9 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e044      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800592e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f831 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005956:	d103      	bne.n	8005960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e017      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f063 030e 	orn	r3, r3, #14
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4907      	ldr	r1, [pc, #28]	@ (80059a0 <I2C_MasterRequestRead+0x198>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f865 	bl	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	00010008 	.word	0x00010008
 80059a0:	00010002 	.word	0x00010002

080059a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b4:	e025      	b.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d021      	beq.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fe fa95 	bl	8003eec <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	f043 0220 	orr.w	r2, r3, #32
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e023      	b.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10d      	bne.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	43da      	mvns	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2301      	moveq	r3, #1
 8005a20:	2300      	movne	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	e00c      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d0b6      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a60:	e051      	b.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a70:	d123      	bne.n	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	f043 0204 	orr.w	r2, r3, #4
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e046      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fe fa13 	bl	8003eec <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e020      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10c      	bne.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf14      	ite	ne
 8005b22:	2301      	movne	r3, #1
 8005b24:	2300      	moveq	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	e00b      	b.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	43da      	mvns	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d18d      	bne.n	8005a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b5c:	e02d      	b.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8ce 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e02d      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d021      	beq.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fe f9b9 	bl	8003eec <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d116      	bne.n	8005bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba6:	f043 0220 	orr.w	r2, r3, #32
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e007      	b.n	8005bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b80      	cmp	r3, #128	@ 0x80
 8005bc6:	d1ca      	bne.n	8005b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bde:	e02d      	b.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f88d 	bl	8005d00 <I2C_IsAcknowledgeFailed>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02d      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d021      	beq.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf8:	f7fe f978 	bl	8003eec <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d302      	bcc.n	8005c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e007      	b.n	8005c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d1ca      	bne.n	8005be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c60:	e042      	b.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d119      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e029      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fe f922 	bl	8003eec <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e007      	b.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d1b5      	bne.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d16:	d11b      	bne.n	8005d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	f043 0204 	orr.w	r2, r3, #4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d72:	687b      	ldr	r3, [r7, #4]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	420e0020 	.word	0x420e0020
 8005d84:	40007000 	.word	0x40007000

08005d88 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d94:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <HAL_PWR_DisableBkUpAccess+0x24>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005d9a:	687b      	ldr	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	420e0020 	.word	0x420e0020
 8005dac:	40007000 	.word	0x40007000

08005db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e267      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d075      	beq.n	8005eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dce:	4b88      	ldr	r3, [pc, #544]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d00c      	beq.n	8005df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dda:	4b85      	ldr	r3, [pc, #532]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d112      	bne.n	8005e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de6:	4b82      	ldr	r3, [pc, #520]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005df2:	d10b      	bne.n	8005e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d05b      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x108>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d157      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e242      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e14:	d106      	bne.n	8005e24 <HAL_RCC_OscConfig+0x74>
 8005e16:	4b76      	ldr	r3, [pc, #472]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a75      	ldr	r2, [pc, #468]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e01d      	b.n	8005e60 <HAL_RCC_OscConfig+0xb0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x98>
 8005e2e:	4b70      	ldr	r3, [pc, #448]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a6f      	ldr	r2, [pc, #444]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0xb0>
 8005e48:	4b69      	ldr	r3, [pc, #420]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a68      	ldr	r2, [pc, #416]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	4b66      	ldr	r3, [pc, #408]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a65      	ldr	r2, [pc, #404]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d013      	beq.n	8005e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fe f840 	bl	8003eec <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e70:	f7fe f83c 	bl	8003eec <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	@ 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e207      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	4b5b      	ldr	r3, [pc, #364]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0xc0>
 8005e8e:	e014      	b.n	8005eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fe f82c 	bl	8003eec <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fe f828 	bl	8003eec <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	@ 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1f3      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eaa:	4b51      	ldr	r3, [pc, #324]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0xe8>
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d063      	beq.n	8005f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ed2:	4b47      	ldr	r3, [pc, #284]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d11c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ede:	4b44      	ldr	r3, [pc, #272]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d116      	bne.n	8005f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eea:	4b41      	ldr	r3, [pc, #260]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_RCC_OscConfig+0x152>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e1c7      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4937      	ldr	r1, [pc, #220]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f16:	e03a      	b.n	8005f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d020      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f20:	4b34      	ldr	r3, [pc, #208]	@ (8005ff4 <HAL_RCC_OscConfig+0x244>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fd ffe1 	bl	8003eec <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2e:	f7fd ffdd 	bl	8003eec <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e1a8      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f40:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4925      	ldr	r1, [pc, #148]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]
 8005f60:	e015      	b.n	8005f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f62:	4b24      	ldr	r3, [pc, #144]	@ (8005ff4 <HAL_RCC_OscConfig+0x244>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fd ffc0 	bl	8003eec <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f70:	f7fd ffbc 	bl	8003eec <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e187      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d036      	beq.n	8006008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa2:	4b15      	ldr	r3, [pc, #84]	@ (8005ff8 <HAL_RCC_OscConfig+0x248>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa8:	f7fd ffa0 	bl	8003eec <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb0:	f7fd ff9c 	bl	8003eec <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e167      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x200>
 8005fce:	e01b      	b.n	8006008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd0:	4b09      	ldr	r3, [pc, #36]	@ (8005ff8 <HAL_RCC_OscConfig+0x248>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd6:	f7fd ff89 	bl	8003eec <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	e00e      	b.n	8005ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fde:	f7fd ff85 	bl	8003eec <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d907      	bls.n	8005ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e150      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	42470000 	.word	0x42470000
 8005ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffc:	4b88      	ldr	r3, [pc, #544]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8005ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1ea      	bne.n	8005fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8097 	beq.w	8006144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800601a:	4b81      	ldr	r3, [pc, #516]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10f      	bne.n	8006046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	4b7d      	ldr	r3, [pc, #500]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	4a7c      	ldr	r2, [pc, #496]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006034:	6413      	str	r3, [r2, #64]	@ 0x40
 8006036:	4b7a      	ldr	r3, [pc, #488]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006042:	2301      	movs	r3, #1
 8006044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006046:	4b77      	ldr	r3, [pc, #476]	@ (8006224 <HAL_RCC_OscConfig+0x474>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d118      	bne.n	8006084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006052:	4b74      	ldr	r3, [pc, #464]	@ (8006224 <HAL_RCC_OscConfig+0x474>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a73      	ldr	r2, [pc, #460]	@ (8006224 <HAL_RCC_OscConfig+0x474>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800605e:	f7fd ff45 	bl	8003eec <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006066:	f7fd ff41 	bl	8003eec <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e10c      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006078:	4b6a      	ldr	r3, [pc, #424]	@ (8006224 <HAL_RCC_OscConfig+0x474>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d106      	bne.n	800609a <HAL_RCC_OscConfig+0x2ea>
 800608c:	4b64      	ldr	r3, [pc, #400]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006090:	4a63      	ldr	r2, [pc, #396]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6713      	str	r3, [r2, #112]	@ 0x70
 8006098:	e01c      	b.n	80060d4 <HAL_RCC_OscConfig+0x324>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d10c      	bne.n	80060bc <HAL_RCC_OscConfig+0x30c>
 80060a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a6:	4a5e      	ldr	r2, [pc, #376]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060a8:	f043 0304 	orr.w	r3, r3, #4
 80060ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ba:	e00b      	b.n	80060d4 <HAL_RCC_OscConfig+0x324>
 80060bc:	4b58      	ldr	r3, [pc, #352]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c0:	4a57      	ldr	r2, [pc, #348]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80060c8:	4b55      	ldr	r3, [pc, #340]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060cc:	4a54      	ldr	r2, [pc, #336]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060ce:	f023 0304 	bic.w	r3, r3, #4
 80060d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d015      	beq.n	8006108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fd ff06 	bl	8003eec <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e2:	e00a      	b.n	80060fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060e4:	f7fd ff02 	bl	8003eec <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0cb      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fa:	4b49      	ldr	r3, [pc, #292]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0ee      	beq.n	80060e4 <HAL_RCC_OscConfig+0x334>
 8006106:	e014      	b.n	8006132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006108:	f7fd fef0 	bl	8003eec <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610e:	e00a      	b.n	8006126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006110:	f7fd feec 	bl	8003eec <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e0b5      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006126:	4b3e      	ldr	r3, [pc, #248]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1ee      	bne.n	8006110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006138:	4b39      	ldr	r3, [pc, #228]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	4a38      	ldr	r2, [pc, #224]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 800613e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80a1 	beq.w	8006290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800614e:	4b34      	ldr	r3, [pc, #208]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	2b08      	cmp	r3, #8
 8006158:	d05c      	beq.n	8006214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d141      	bne.n	80061e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_RCC_OscConfig+0x478>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006168:	f7fd fec0 	bl	8003eec <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006170:	f7fd febc 	bl	8003eec <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e087      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006182:	4b27      	ldr	r3, [pc, #156]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	019b      	lsls	r3, r3, #6
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	3b01      	subs	r3, #1
 80061a8:	041b      	lsls	r3, r3, #16
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	061b      	lsls	r3, r3, #24
 80061b2:	491b      	ldr	r1, [pc, #108]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <HAL_RCC_OscConfig+0x478>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061be:	f7fd fe95 	bl	8003eec <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c6:	f7fd fe91 	bl	8003eec <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e05c      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d8:	4b11      	ldr	r3, [pc, #68]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0x416>
 80061e4:	e054      	b.n	8006290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e6:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <HAL_RCC_OscConfig+0x478>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fd fe7e 	bl	8003eec <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fd fe7a 	bl	8003eec <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e045      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006206:	4b06      	ldr	r3, [pc, #24]	@ (8006220 <HAL_RCC_OscConfig+0x470>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x444>
 8006212:	e03d      	b.n	8006290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d107      	bne.n	800622c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e038      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
 8006220:	40023800 	.word	0x40023800
 8006224:	40007000 	.word	0x40007000
 8006228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800622c:	4b1b      	ldr	r3, [pc, #108]	@ (800629c <HAL_RCC_OscConfig+0x4ec>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d028      	beq.n	800628c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d121      	bne.n	800628c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d11a      	bne.n	800628c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800625c:	4013      	ands	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006264:	4293      	cmp	r3, r2
 8006266:	d111      	bne.n	800628c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	085b      	lsrs	r3, r3, #1
 8006274:	3b01      	subs	r3, #1
 8006276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006278:	429a      	cmp	r2, r3
 800627a:	d107      	bne.n	800628c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006288:	429a      	cmp	r2, r3
 800628a:	d001      	beq.n	8006290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e000      	b.n	8006292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800

080062a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0cc      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062b4:	4b68      	ldr	r3, [pc, #416]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d90c      	bls.n	80062dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c2:	4b65      	ldr	r3, [pc, #404]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ca:	4b63      	ldr	r3, [pc, #396]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d001      	beq.n	80062dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0b8      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d020      	beq.n	800632a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f4:	4b59      	ldr	r3, [pc, #356]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4a58      	ldr	r2, [pc, #352]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 80062fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800630c:	4b53      	ldr	r3, [pc, #332]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4a52      	ldr	r2, [pc, #328]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006318:	4b50      	ldr	r3, [pc, #320]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	494d      	ldr	r1, [pc, #308]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	4313      	orrs	r3, r2
 8006328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d044      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d107      	bne.n	800634e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	4b47      	ldr	r3, [pc, #284]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d119      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e07f      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d003      	beq.n	800635e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800635a:	2b03      	cmp	r3, #3
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635e:	4b3f      	ldr	r3, [pc, #252]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e06f      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636e:	4b3b      	ldr	r3, [pc, #236]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e067      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800637e:	4b37      	ldr	r3, [pc, #220]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f023 0203 	bic.w	r2, r3, #3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4934      	ldr	r1, [pc, #208]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	4313      	orrs	r3, r2
 800638e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006390:	f7fd fdac 	bl	8003eec <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006396:	e00a      	b.n	80063ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006398:	f7fd fda8 	bl	8003eec <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e04f      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	4b2b      	ldr	r3, [pc, #172]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 020c 	and.w	r2, r3, #12
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	429a      	cmp	r2, r3
 80063be:	d1eb      	bne.n	8006398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063c0:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d20c      	bcs.n	80063e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	4b22      	ldr	r3, [pc, #136]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d6:	4b20      	ldr	r3, [pc, #128]	@ (8006458 <HAL_RCC_ClockConfig+0x1b8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d001      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e032      	b.n	800644e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f4:	4b19      	ldr	r3, [pc, #100]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4916      	ldr	r1, [pc, #88]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006412:	4b12      	ldr	r3, [pc, #72]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	490e      	ldr	r1, [pc, #56]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006426:	f000 f821 	bl	800646c <HAL_RCC_GetSysClockFreq>
 800642a:	4602      	mov	r2, r0
 800642c:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	490a      	ldr	r1, [pc, #40]	@ (8006460 <HAL_RCC_ClockConfig+0x1c0>)
 8006438:	5ccb      	ldrb	r3, [r1, r3]
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	4a09      	ldr	r2, [pc, #36]	@ (8006464 <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <HAL_RCC_ClockConfig+0x1c8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fd0c 	bl	8003e64 <HAL_InitTick>

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40023c00 	.word	0x40023c00
 800645c:	40023800 	.word	0x40023800
 8006460:	0800ee14 	.word	0x0800ee14
 8006464:	2000000c 	.word	0x2000000c
 8006468:	20000010 	.word	0x20000010

0800646c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800646c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006470:	b090      	sub	sp, #64	@ 0x40
 8006472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
 8006478:	2300      	movs	r3, #0
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800647c:	2300      	movs	r3, #0
 800647e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006484:	4b59      	ldr	r3, [pc, #356]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 030c 	and.w	r3, r3, #12
 800648c:	2b08      	cmp	r3, #8
 800648e:	d00d      	beq.n	80064ac <HAL_RCC_GetSysClockFreq+0x40>
 8006490:	2b08      	cmp	r3, #8
 8006492:	f200 80a1 	bhi.w	80065d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0x34>
 800649a:	2b04      	cmp	r3, #4
 800649c:	d003      	beq.n	80064a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800649e:	e09b      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064a0:	4b53      	ldr	r3, [pc, #332]	@ (80065f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80064a2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80064a4:	e09b      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064a6:	4b53      	ldr	r3, [pc, #332]	@ (80065f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064aa:	e098      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064ac:	4b4f      	ldr	r3, [pc, #316]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064b6:	4b4d      	ldr	r3, [pc, #308]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d028      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c2:	4b4a      	ldr	r3, [pc, #296]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	099b      	lsrs	r3, r3, #6
 80064c8:	2200      	movs	r2, #0
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80064d4:	2100      	movs	r1, #0
 80064d6:	4b47      	ldr	r3, [pc, #284]	@ (80065f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80064d8:	fb03 f201 	mul.w	r2, r3, r1
 80064dc:	2300      	movs	r3, #0
 80064de:	fb00 f303 	mul.w	r3, r0, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	4a43      	ldr	r2, [pc, #268]	@ (80065f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80064e6:	fba0 1202 	umull	r1, r2, r0, r2
 80064ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064ec:	460a      	mov	r2, r1
 80064ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f2:	4413      	add	r3, r2
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	2200      	movs	r2, #0
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	61fa      	str	r2, [r7, #28]
 80064fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006502:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006506:	f7fa fb6f 	bl	8000be8 <__aeabi_uldivmod>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4613      	mov	r3, r2
 8006510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006512:	e053      	b.n	80065bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006514:	4b35      	ldr	r3, [pc, #212]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	099b      	lsrs	r3, r3, #6
 800651a:	2200      	movs	r2, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	617a      	str	r2, [r7, #20]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006526:	f04f 0b00 	mov.w	fp, #0
 800652a:	4652      	mov	r2, sl
 800652c:	465b      	mov	r3, fp
 800652e:	f04f 0000 	mov.w	r0, #0
 8006532:	f04f 0100 	mov.w	r1, #0
 8006536:	0159      	lsls	r1, r3, #5
 8006538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800653c:	0150      	lsls	r0, r2, #5
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	ebb2 080a 	subs.w	r8, r2, sl
 8006546:	eb63 090b 	sbc.w	r9, r3, fp
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006556:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800655a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800655e:	ebb2 0408 	subs.w	r4, r2, r8
 8006562:	eb63 0509 	sbc.w	r5, r3, r9
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	00eb      	lsls	r3, r5, #3
 8006570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006574:	00e2      	lsls	r2, r4, #3
 8006576:	4614      	mov	r4, r2
 8006578:	461d      	mov	r5, r3
 800657a:	eb14 030a 	adds.w	r3, r4, sl
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	eb45 030b 	adc.w	r3, r5, fp
 8006584:	607b      	str	r3, [r7, #4]
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006592:	4629      	mov	r1, r5
 8006594:	028b      	lsls	r3, r1, #10
 8006596:	4621      	mov	r1, r4
 8006598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800659c:	4621      	mov	r1, r4
 800659e:	028a      	lsls	r2, r1, #10
 80065a0:	4610      	mov	r0, r2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a6:	2200      	movs	r2, #0
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	60fa      	str	r2, [r7, #12]
 80065ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065b0:	f7fa fb1a 	bl	8000be8 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4613      	mov	r3, r2
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065bc:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <HAL_RCC_GetSysClockFreq+0x180>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	3301      	adds	r3, #1
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80065cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065d6:	e002      	b.n	80065de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80065da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80065dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3740      	adds	r7, #64	@ 0x40
 80065e4:	46bd      	mov	sp, r7
 80065e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ea:	bf00      	nop
 80065ec:	40023800 	.word	0x40023800
 80065f0:	00f42400 	.word	0x00f42400
 80065f4:	017d7840 	.word	0x017d7840

080065f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065fc:	4b03      	ldr	r3, [pc, #12]	@ (800660c <HAL_RCC_GetHCLKFreq+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	2000000c 	.word	0x2000000c

08006610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006614:	f7ff fff0 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b05      	ldr	r3, [pc, #20]	@ (8006630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0a9b      	lsrs	r3, r3, #10
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	4903      	ldr	r1, [pc, #12]	@ (8006634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40023800 	.word	0x40023800
 8006634:	0800ee24 	.word	0x0800ee24

08006638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800663c:	f7ff ffdc 	bl	80065f8 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0b5b      	lsrs	r3, r3, #13
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4903      	ldr	r1, [pc, #12]	@ (800665c <HAL_RCC_GetPCLK2Freq+0x24>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40023800 	.word	0x40023800
 800665c:	0800ee24 	.word	0x0800ee24

08006660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e041      	b.n	80066f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc fe4a 	bl	8003320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f000 ff94 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e041      	b.n	8006794 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f839 	bl	800679c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	4619      	mov	r1, r3
 800673c:	4610      	mov	r0, r2
 800673e:	f000 ff45 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <HAL_TIM_PWM_Start+0x24>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e022      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d109      	bne.n	80067ee <HAL_TIM_PWM_Start+0x3e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	bf14      	ite	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	2300      	moveq	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e015      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d109      	bne.n	8006808 <HAL_TIM_PWM_Start+0x58>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e008      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07c      	b.n	800691c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start+0x82>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006830:	e013      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start+0x92>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006840:	e00b      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006850:	e003      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2201      	movs	r2, #1
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f001 fac6 	bl	8007df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2d      	ldr	r2, [pc, #180]	@ (8006924 <HAL_TIM_PWM_Start+0x174>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIM_PWM_Start+0xcc>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2c      	ldr	r2, [pc, #176]	@ (8006928 <HAL_TIM_PWM_Start+0x178>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_TIM_PWM_Start+0xd0>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_TIM_PWM_Start+0xd2>
 8006880:	2300      	movs	r3, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006894:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a22      	ldr	r2, [pc, #136]	@ (8006924 <HAL_TIM_PWM_Start+0x174>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d022      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a8:	d01d      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <HAL_TIM_PWM_Start+0x17c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d018      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006930 <HAL_TIM_PWM_Start+0x180>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <HAL_TIM_PWM_Start+0x184>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a16      	ldr	r2, [pc, #88]	@ (8006928 <HAL_TIM_PWM_Start+0x178>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <HAL_TIM_PWM_Start+0x188>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a16      	ldr	r2, [pc, #88]	@ (800693c <HAL_TIM_PWM_Start+0x18c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d111      	bne.n	800690a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d010      	beq.n	800691a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	e007      	b.n	800691a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40014000 	.word	0x40014000
 800693c:	40001800 	.word	0x40001800

08006940 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc fdea 	bl	8003540 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 fe24 	bl	80075cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_IC_Start_IT+0x1e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	e013      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x46>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_IC_Start_IT+0x2e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	e00b      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x46>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_IC_Start_IT+0x3e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e003      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x46>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_TIM_IC_Start_IT+0x58>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	e013      	b.n	8006a60 <HAL_TIM_IC_Start_IT+0x80>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d104      	bne.n	8006a48 <HAL_TIM_IC_Start_IT+0x68>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	e00b      	b.n	8006a60 <HAL_TIM_IC_Start_IT+0x80>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d104      	bne.n	8006a58 <HAL_TIM_IC_Start_IT+0x78>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e003      	b.n	8006a60 <HAL_TIM_IC_Start_IT+0x80>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a68:	7b7b      	ldrb	r3, [r7, #13]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d001      	beq.n	8006a72 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0cc      	b.n	8006c0c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_TIM_IC_Start_IT+0xa2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a80:	e013      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0xca>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_IC_Start_IT+0xb2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a90:	e00b      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0xca>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_IC_Start_IT+0xc2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006aa0:	e003      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0xca>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d104      	bne.n	8006aba <HAL_TIM_IC_Start_IT+0xda>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ab8:	e013      	b.n	8006ae2 <HAL_TIM_IC_Start_IT+0x102>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d104      	bne.n	8006aca <HAL_TIM_IC_Start_IT+0xea>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ac8:	e00b      	b.n	8006ae2 <HAL_TIM_IC_Start_IT+0x102>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d104      	bne.n	8006ada <HAL_TIM_IC_Start_IT+0xfa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad8:	e003      	b.n	8006ae2 <HAL_TIM_IC_Start_IT+0x102>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b0c      	cmp	r3, #12
 8006ae6:	d841      	bhi.n	8006b6c <HAL_TIM_IC_Start_IT+0x18c>
 8006ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <HAL_TIM_IC_Start_IT+0x110>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b25 	.word	0x08006b25
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006b6d 	.word	0x08006b6d
 8006afc:	08006b6d 	.word	0x08006b6d
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006b6d 	.word	0x08006b6d
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	08006b49 	.word	0x08006b49
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006b5b 	.word	0x08006b5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0202 	orr.w	r2, r2, #2
 8006b32:	60da      	str	r2, [r3, #12]
      break;
 8006b34:	e01d      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0204 	orr.w	r2, r2, #4
 8006b44:	60da      	str	r2, [r3, #12]
      break;
 8006b46:	e014      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	60da      	str	r2, [r3, #12]
      break;
 8006b58:	e00b      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0210 	orr.w	r2, r2, #16
 8006b68:	60da      	str	r2, [r3, #12]
      break;
 8006b6a:	e002      	b.n	8006b72 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d148      	bne.n	8006c0a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f937 	bl	8007df4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a22      	ldr	r2, [pc, #136]	@ (8006c14 <HAL_TIM_IC_Start_IT+0x234>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d022      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b98:	d01d      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006c18 <HAL_TIM_IC_Start_IT+0x238>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d018      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c1c <HAL_TIM_IC_Start_IT+0x23c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d013      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <HAL_TIM_IC_Start_IT+0x240>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a19      	ldr	r2, [pc, #100]	@ (8006c24 <HAL_TIM_IC_Start_IT+0x244>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	@ (8006c28 <HAL_TIM_IC_Start_IT+0x248>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a16      	ldr	r2, [pc, #88]	@ (8006c2c <HAL_TIM_IC_Start_IT+0x24c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d111      	bne.n	8006bfa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	d010      	beq.n	8006c0a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf8:	e007      	b.n	8006c0a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40000400 	.word	0x40000400
 8006c1c:	40000800 	.word	0x40000800
 8006c20:	40000c00 	.word	0x40000c00
 8006c24:	40010400 	.word	0x40010400
 8006c28:	40014000 	.word	0x40014000
 8006c2c:	40001800 	.word	0x40001800

08006c30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e097      	b.n	8006d74 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fc fbd7 	bl	800340c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c74:	f023 0307 	bic.w	r3, r3, #7
 8006c78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 fca1 	bl	80075cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006cd0:	f023 030c 	bic.w	r3, r3, #12
 8006cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006cdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	4313      	orrs	r3, r2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	011a      	lsls	r2, r3, #4
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	031b      	lsls	r3, r3, #12
 8006d00:	4313      	orrs	r3, r2
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	4313      	orrs	r3, r2
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006da4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d110      	bne.n	8006dce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d102      	bne.n	8006db8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006db2:	7b7b      	ldrb	r3, [r7, #13]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d001      	beq.n	8006dbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e069      	b.n	8006e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dcc:	e031      	b.n	8006e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d110      	bne.n	8006df6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d102      	bne.n	8006de0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dda:	7b3b      	ldrb	r3, [r7, #12]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d001      	beq.n	8006de4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e055      	b.n	8006e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006df4:	e01d      	b.n	8006e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d108      	bne.n	8006e0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d105      	bne.n	8006e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d102      	bne.n	8006e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e08:	7b3b      	ldrb	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e03e      	b.n	8006e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_TIM_Encoder_Start+0xc4>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d008      	beq.n	8006e50 <HAL_TIM_Encoder_Start+0xd4>
 8006e3e:	e00f      	b.n	8006e60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 ffd3 	bl	8007df4 <TIM_CCxChannelCmd>
      break;
 8006e4e:	e016      	b.n	8006e7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2201      	movs	r2, #1
 8006e56:	2104      	movs	r1, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 ffcb 	bl	8007df4 <TIM_CCxChannelCmd>
      break;
 8006e5e:	e00e      	b.n	8006e7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ffc3 	bl	8007df4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	2104      	movs	r1, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 ffbc 	bl	8007df4 <TIM_CCxChannelCmd>
      break;
 8006e7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d122      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d11b      	bne.n	8006ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fa fd30 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 8006ee0:	e005      	b.n	8006eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb54 	bl	8007590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb5b 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0204 	mvn.w	r2, #4
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fd06 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb2a 	bl	8007590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fb31 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d122      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0208 	mvn.w	r2, #8
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2204      	movs	r2, #4
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fa fcdc 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb00 	bl	8007590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb07 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d122      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0210 	mvn.w	r2, #16
 8006fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fa fcb2 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fad6 	bl	8007590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fadd 	bl	80075a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d10e      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0201 	mvn.w	r2, #1
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fab0 	bl	800757c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007026:	2b80      	cmp	r3, #128	@ 0x80
 8007028:	d10e      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b80      	cmp	r3, #128	@ 0x80
 8007036:	d107      	bne.n	8007048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 ffd4 	bl	8007ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007052:	2b40      	cmp	r3, #64	@ 0x40
 8007054:	d10e      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d107      	bne.n	8007074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 faa2 	bl	80075b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d10e      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b20      	cmp	r3, #32
 800708e:	d107      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0220 	mvn.w	r2, #32
 8007098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 ff9e 	bl	8007fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e088      	b.n	80071d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6819      	ldr	r1, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f000 fcc2 	bl	8007a6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020c 	bic.w	r2, r2, #12
 80070f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6999      	ldr	r1, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	619a      	str	r2, [r3, #24]
 800710a:	e060      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d11c      	bne.n	800714c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f000 fd46 	bl	8007bb2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007134:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6999      	ldr	r1, [r3, #24]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	021a      	lsls	r2, r3, #8
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	619a      	str	r2, [r3, #24]
 800714a:	e040      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b08      	cmp	r3, #8
 8007150:	d11b      	bne.n	800718a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f000 fd93 	bl	8007c8c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 020c 	bic.w	r2, r2, #12
 8007174:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69d9      	ldr	r1, [r3, #28]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	61da      	str	r2, [r3, #28]
 8007188:	e021      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b0c      	cmp	r3, #12
 800718e:	d11c      	bne.n	80071ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6819      	ldr	r1, [r3, #0]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 fdb0 	bl	8007d04 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80071b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69d9      	ldr	r1, [r3, #28]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	021a      	lsls	r2, r3, #8
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	61da      	str	r2, [r3, #28]
 80071c8:	e001      	b.n	80071ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e0ae      	b.n	800735c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b0c      	cmp	r3, #12
 800720a:	f200 809f 	bhi.w	800734c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800720e:	a201      	add	r2, pc, #4	@ (adr r2, 8007214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007249 	.word	0x08007249
 8007218:	0800734d 	.word	0x0800734d
 800721c:	0800734d 	.word	0x0800734d
 8007220:	0800734d 	.word	0x0800734d
 8007224:	08007289 	.word	0x08007289
 8007228:	0800734d 	.word	0x0800734d
 800722c:	0800734d 	.word	0x0800734d
 8007230:	0800734d 	.word	0x0800734d
 8007234:	080072cb 	.word	0x080072cb
 8007238:	0800734d 	.word	0x0800734d
 800723c:	0800734d 	.word	0x0800734d
 8007240:	0800734d 	.word	0x0800734d
 8007244:	0800730b 	.word	0x0800730b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fa5c 	bl	800770c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e064      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 faac 	bl	80077ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6999      	ldr	r1, [r3, #24]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
      break;
 80072c8:	e043      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb01 	bl	80078d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0204 	bic.w	r2, r2, #4
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	61da      	str	r2, [r3, #28]
      break;
 8007308:	e023      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fb55 	bl	80079c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69d9      	ldr	r1, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	61da      	str	r2, [r3, #28]
      break;
 800734a:	e002      	b.n	8007352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
      break;
 8007350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0b4      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x186>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800739e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b8:	d03e      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0xd4>
 80073ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073be:	f200 8087 	bhi.w	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c6:	f000 8086 	beq.w	80074d6 <HAL_TIM_ConfigClockSource+0x172>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ce:	d87f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b70      	cmp	r3, #112	@ 0x70
 80073d2:	d01a      	beq.n	800740a <HAL_TIM_ConfigClockSource+0xa6>
 80073d4:	2b70      	cmp	r3, #112	@ 0x70
 80073d6:	d87b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b60      	cmp	r3, #96	@ 0x60
 80073da:	d050      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x11a>
 80073dc:	2b60      	cmp	r3, #96	@ 0x60
 80073de:	d877      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b50      	cmp	r3, #80	@ 0x50
 80073e2:	d03c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0xfa>
 80073e4:	2b50      	cmp	r3, #80	@ 0x50
 80073e6:	d873      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b40      	cmp	r3, #64	@ 0x40
 80073ea:	d058      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x13a>
 80073ec:	2b40      	cmp	r3, #64	@ 0x40
 80073ee:	d86f      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b30      	cmp	r3, #48	@ 0x30
 80073f2:	d064      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073f4:	2b30      	cmp	r3, #48	@ 0x30
 80073f6:	d86b      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d060      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d867      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d05c      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b10      	cmp	r3, #16
 8007406:	d05a      	beq.n	80074be <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	e062      	b.n	80074d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f000 fccb 	bl	8007db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800742c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	609a      	str	r2, [r3, #8]
      break;
 8007436:	e04f      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f000 fcb4 	bl	8007db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800745a:	609a      	str	r2, [r3, #8]
      break;
 800745c:	e03c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	f000 fb72 	bl	8007b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2150      	movs	r1, #80	@ 0x50
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fc81 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 800747c:	e02c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	6859      	ldr	r1, [r3, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	461a      	mov	r2, r3
 800748c:	f000 fbce 	bl	8007c2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2160      	movs	r1, #96	@ 0x60
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fc71 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 800749c:	e01c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f000 fb52 	bl	8007b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2140      	movs	r1, #64	@ 0x40
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fc61 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4619      	mov	r1, r3
 80074c8:	4610      	mov	r0, r2
 80074ca:	f000 fc58 	bl	8007d7e <TIM_ITRx_SetConfig>
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d831      	bhi.n	800756c <HAL_TIM_ReadCapturedValue+0x78>
 8007508:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <HAL_TIM_ReadCapturedValue+0x1c>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007545 	.word	0x08007545
 8007514:	0800756d 	.word	0x0800756d
 8007518:	0800756d 	.word	0x0800756d
 800751c:	0800756d 	.word	0x0800756d
 8007520:	0800754f 	.word	0x0800754f
 8007524:	0800756d 	.word	0x0800756d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800756d 	.word	0x0800756d
 8007530:	08007559 	.word	0x08007559
 8007534:	0800756d 	.word	0x0800756d
 8007538:	0800756d 	.word	0x0800756d
 800753c:	0800756d 	.word	0x0800756d
 8007540:	08007563 	.word	0x08007563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754a:	60fb      	str	r3, [r7, #12]

      break;
 800754c:	e00f      	b.n	800756e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	60fb      	str	r3, [r7, #12]

      break;
 8007556:	e00a      	b.n	800756e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755e:	60fb      	str	r3, [r7, #12]

      break;
 8007560:	e005      	b.n	800756e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007568:	60fb      	str	r3, [r7, #12]

      break;
 800756a:	e000      	b.n	800756e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800756c:	bf00      	nop
  }

  return tmpreg;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a40      	ldr	r2, [pc, #256]	@ (80076e0 <TIM_Base_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ea:	d00f      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a3d      	ldr	r2, [pc, #244]	@ (80076e4 <TIM_Base_SetConfig+0x118>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a3c      	ldr	r2, [pc, #240]	@ (80076e8 <TIM_Base_SetConfig+0x11c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a3b      	ldr	r2, [pc, #236]	@ (80076ec <TIM_Base_SetConfig+0x120>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x40>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a3a      	ldr	r2, [pc, #232]	@ (80076f0 <TIM_Base_SetConfig+0x124>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a2f      	ldr	r2, [pc, #188]	@ (80076e0 <TIM_Base_SetConfig+0x114>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d02b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762c:	d027      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a2c      	ldr	r2, [pc, #176]	@ (80076e4 <TIM_Base_SetConfig+0x118>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d023      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a2b      	ldr	r2, [pc, #172]	@ (80076e8 <TIM_Base_SetConfig+0x11c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01f      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a2a      	ldr	r2, [pc, #168]	@ (80076ec <TIM_Base_SetConfig+0x120>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a29      	ldr	r2, [pc, #164]	@ (80076f0 <TIM_Base_SetConfig+0x124>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d017      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a28      	ldr	r2, [pc, #160]	@ (80076f4 <TIM_Base_SetConfig+0x128>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a27      	ldr	r2, [pc, #156]	@ (80076f8 <TIM_Base_SetConfig+0x12c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00f      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a26      	ldr	r2, [pc, #152]	@ (80076fc <TIM_Base_SetConfig+0x130>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a25      	ldr	r2, [pc, #148]	@ (8007700 <TIM_Base_SetConfig+0x134>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a24      	ldr	r2, [pc, #144]	@ (8007704 <TIM_Base_SetConfig+0x138>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_Base_SetConfig+0xb2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a23      	ldr	r2, [pc, #140]	@ (8007708 <TIM_Base_SetConfig+0x13c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d108      	bne.n	8007690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a0a      	ldr	r2, [pc, #40]	@ (80076e0 <TIM_Base_SetConfig+0x114>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_Base_SetConfig+0xf8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <TIM_Base_SetConfig+0x124>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d103      	bne.n	80076cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	615a      	str	r2, [r3, #20]
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	40010000 	.word	0x40010000
 80076e4:	40000400 	.word	0x40000400
 80076e8:	40000800 	.word	0x40000800
 80076ec:	40000c00 	.word	0x40000c00
 80076f0:	40010400 	.word	0x40010400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800
 8007700:	40001800 	.word	0x40001800
 8007704:	40001c00 	.word	0x40001c00
 8007708:	40002000 	.word	0x40002000

0800770c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f023 0201 	bic.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0303 	bic.w	r3, r3, #3
 8007742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f023 0302 	bic.w	r3, r3, #2
 8007754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a20      	ldr	r2, [pc, #128]	@ (80077e4 <TIM_OC1_SetConfig+0xd8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_OC1_SetConfig+0x64>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <TIM_OC1_SetConfig+0xdc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10c      	bne.n	800778a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0308 	bic.w	r3, r3, #8
 8007776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 0304 	bic.w	r3, r3, #4
 8007788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a15      	ldr	r2, [pc, #84]	@ (80077e4 <TIM_OC1_SetConfig+0xd8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d003      	beq.n	800779a <TIM_OC1_SetConfig+0x8e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a14      	ldr	r2, [pc, #80]	@ (80077e8 <TIM_OC1_SetConfig+0xdc>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d111      	bne.n	80077be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40010400 	.word	0x40010400

080077ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f023 0210 	bic.w	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f023 0320 	bic.w	r3, r3, #32
 8007836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a22      	ldr	r2, [pc, #136]	@ (80078d0 <TIM_OC2_SetConfig+0xe4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC2_SetConfig+0x68>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a21      	ldr	r2, [pc, #132]	@ (80078d4 <TIM_OC2_SetConfig+0xe8>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10d      	bne.n	8007870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800786e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a17      	ldr	r2, [pc, #92]	@ (80078d0 <TIM_OC2_SetConfig+0xe4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_OC2_SetConfig+0x94>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a16      	ldr	r2, [pc, #88]	@ (80078d4 <TIM_OC2_SetConfig+0xe8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d113      	bne.n	80078a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800788e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40010400 	.word	0x40010400

080078d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0303 	bic.w	r3, r3, #3
 800790e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a21      	ldr	r2, [pc, #132]	@ (80079b8 <TIM_OC3_SetConfig+0xe0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d003      	beq.n	800793e <TIM_OC3_SetConfig+0x66>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a20      	ldr	r2, [pc, #128]	@ (80079bc <TIM_OC3_SetConfig+0xe4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d10d      	bne.n	800795a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a16      	ldr	r2, [pc, #88]	@ (80079b8 <TIM_OC3_SetConfig+0xe0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_OC3_SetConfig+0x92>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <TIM_OC3_SetConfig+0xe4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d113      	bne.n	8007992 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400

080079c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	031b      	lsls	r3, r3, #12
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a12      	ldr	r2, [pc, #72]	@ (8007a64 <TIM_OC4_SetConfig+0xa4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC4_SetConfig+0x68>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a11      	ldr	r2, [pc, #68]	@ (8007a68 <TIM_OC4_SetConfig+0xa8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d109      	bne.n	8007a3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	019b      	lsls	r3, r3, #6
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0201 	bic.w	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a28      	ldr	r2, [pc, #160]	@ (8007b38 <TIM_TI1_SetConfig+0xcc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01b      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa0:	d017      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a25      	ldr	r2, [pc, #148]	@ (8007b3c <TIM_TI1_SetConfig+0xd0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4a24      	ldr	r2, [pc, #144]	@ (8007b40 <TIM_TI1_SetConfig+0xd4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	@ (8007b44 <TIM_TI1_SetConfig+0xd8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a22      	ldr	r2, [pc, #136]	@ (8007b48 <TIM_TI1_SetConfig+0xdc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4a21      	ldr	r2, [pc, #132]	@ (8007b4c <TIM_TI1_SetConfig+0xe0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_TI1_SetConfig+0x66>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a20      	ldr	r2, [pc, #128]	@ (8007b50 <TIM_TI1_SetConfig+0xe4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d101      	bne.n	8007ad6 <TIM_TI1_SetConfig+0x6a>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <TIM_TI1_SetConfig+0x6c>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	e003      	b.n	8007af6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f023 030a 	bic.w	r3, r3, #10
 8007b10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f003 030a 	and.w	r3, r3, #10
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40010000 	.word	0x40010000
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40010400 	.word	0x40010400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40001800 	.word	0x40001800

08007b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0201 	bic.w	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 030a 	bic.w	r3, r3, #10
 8007b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	621a      	str	r2, [r3, #32]
}
 8007ba6:	bf00      	nop
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b087      	sub	sp, #28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	607a      	str	r2, [r7, #4]
 8007bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f023 0210 	bic.w	r2, r3, #16
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	031b      	lsls	r3, r3, #12
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	621a      	str	r2, [r3, #32]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	f023 0210 	bic.w	r2, r3, #16
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	031b      	lsls	r3, r3, #12
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f023 0303 	bic.w	r3, r3, #3
 8007cb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007cdc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	031b      	lsls	r3, r3, #12
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007d56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	031b      	lsls	r3, r3, #12
 8007d5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f043 0307 	orr.w	r3, r3, #7
 8007da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	609a      	str	r2, [r3, #8]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	021a      	lsls	r2, r3, #8
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	609a      	str	r2, [r3, #8]
}
 8007de8:	bf00      	nop
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 031f 	and.w	r3, r3, #31
 8007e06:	2201      	movs	r2, #1
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1a      	ldr	r2, [r3, #32]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	43db      	mvns	r3, r3
 8007e16:	401a      	ands	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1a      	ldr	r2, [r3, #32]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	621a      	str	r2, [r3, #32]
}
 8007e32:	bf00      	nop
 8007e34:	371c      	adds	r7, #28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e05a      	b.n	8007f0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a21      	ldr	r2, [pc, #132]	@ (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d022      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ea4:	d01d      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d018      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00e      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a18      	ldr	r2, [pc, #96]	@ (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d009      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	@ (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d004      	beq.n	8007ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a15      	ldr	r2, [pc, #84]	@ (8007f34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10c      	bne.n	8007efc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40001800 	.word	0x40001800

08007f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e03d      	b.n	8007fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e03f      	b.n	8008096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fb fb12 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2224      	movs	r2, #36	@ 0x24
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fddf 	bl	8008c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800805c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800806c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800807c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b08a      	sub	sp, #40	@ 0x28
 80080a2:	af02      	add	r7, sp, #8
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d17c      	bne.n	80081b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_UART_Transmit+0x2c>
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e075      	b.n	80081ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d101      	bne.n	80080dc <HAL_UART_Transmit+0x3e>
 80080d8:	2302      	movs	r3, #2
 80080da:	e06e      	b.n	80081ba <HAL_UART_Transmit+0x11c>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2221      	movs	r2, #33	@ 0x21
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080f2:	f7fb fefb 	bl	8003eec <HAL_GetTick>
 80080f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88fa      	ldrh	r2, [r7, #6]
 80080fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	88fa      	ldrh	r2, [r7, #6]
 8008102:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810c:	d108      	bne.n	8008120 <HAL_UART_Transmit+0x82>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	e003      	b.n	8008128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008130:	e02a      	b.n	8008188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2200      	movs	r2, #0
 800813a:	2180      	movs	r1, #128	@ 0x80
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fb1f 	bl	8008780 <UART_WaitOnFlagUntilTimeout>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e036      	b.n	80081ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	3302      	adds	r3, #2
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	e007      	b.n	800817a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	3301      	adds	r3, #1
 8008178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1cf      	bne.n	8008132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	2140      	movs	r1, #64	@ 0x40
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 faef 	bl	8008780 <UART_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3720      	adds	r7, #32
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	4613      	mov	r3, r2
 80081ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d11d      	bne.n	8008218 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <HAL_UART_Receive_IT+0x26>
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e016      	b.n	800821a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_UART_Receive_IT+0x38>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e00f      	b.n	800821a <HAL_UART_Receive_IT+0x58>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	461a      	mov	r2, r3
 800820c:	68b9      	ldr	r1, [r7, #8]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 fb24 	bl	800885c <UART_Start_Receive_IT>
 8008214:	4603      	mov	r3, r0
 8008216:	e000      	b.n	800821a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b0ba      	sub	sp, #232	@ 0xe8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800824a:	2300      	movs	r3, #0
 800824c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008250:	2300      	movs	r3, #0
 8008252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10f      	bne.n	800828a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <HAL_UART_IRQHandler+0x66>
 8008276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc07 	bl	8008a96 <UART_Receive_IT>
      return;
 8008288:	e256      	b.n	8008738 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800828a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80de 	beq.w	8008450 <HAL_UART_IRQHandler+0x22c>
 8008294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80d1 	beq.w	8008450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00b      	beq.n	80082d2 <HAL_UART_IRQHandler+0xae>
 80082ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	f043 0201 	orr.w	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <HAL_UART_IRQHandler+0xd2>
 80082de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ee:	f043 0202 	orr.w	r2, r3, #2
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <HAL_UART_IRQHandler+0xf6>
 8008302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008312:	f043 0204 	orr.w	r2, r3, #4
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d011      	beq.n	800834a <HAL_UART_IRQHandler+0x126>
 8008326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	f043 0208 	orr.w	r2, r3, #8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 81ed 	beq.w	800872e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d008      	beq.n	8008372 <HAL_UART_IRQHandler+0x14e>
 8008360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb92 	bl	8008a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	bf0c      	ite	eq
 8008380:	2301      	moveq	r3, #1
 8008382:	2300      	movne	r3, #0
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <HAL_UART_IRQHandler+0x17a>
 8008396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d04f      	beq.n	800843e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa9a 	bl	80088d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ae:	2b40      	cmp	r3, #64	@ 0x40
 80083b0:	d141      	bne.n	8008436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3314      	adds	r3, #20
 80083b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3314      	adds	r3, #20
 80083da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1d9      	bne.n	80083b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	4a7d      	ldr	r2, [pc, #500]	@ (8008600 <HAL_UART_IRQHandler+0x3dc>)
 800840c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	4618      	mov	r0, r3
 8008414:	f7fc fb1b 	bl	8004a4e <HAL_DMA_Abort_IT>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d016      	beq.n	800844c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842c:	e00e      	b.n	800844c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f990 	bl	8008754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	e00a      	b.n	800844c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f98c 	bl	8008754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	e006      	b.n	800844c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f988 	bl	8008754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800844a:	e170      	b.n	800872e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844c:	bf00      	nop
    return;
 800844e:	e16e      	b.n	800872e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	2b01      	cmp	r3, #1
 8008456:	f040 814a 	bne.w	80086ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845e:	f003 0310 	and.w	r3, r3, #16
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8143 	beq.w	80086ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 813c 	beq.w	80086ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	f040 80b4 	bne.w	8008604 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8140 	beq.w	8008732 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084ba:	429a      	cmp	r2, r3
 80084bc:	f080 8139 	bcs.w	8008732 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d2:	f000 8088 	beq.w	80085e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330c      	adds	r3, #12
 80084dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	330c      	adds	r3, #12
 80084fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008502:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800850e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800851a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1d9      	bne.n	80084d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3314      	adds	r3, #20
 8008528:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008534:	f023 0301 	bic.w	r3, r3, #1
 8008538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3314      	adds	r3, #20
 8008542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008546:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800854a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800854e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e1      	bne.n	8008522 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3314      	adds	r3, #20
 8008564:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800856e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3314      	adds	r3, #20
 800857e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008582:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008584:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008588:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e3      	bne.n	800855e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b6:	f023 0310 	bic.w	r3, r3, #16
 80085ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	330c      	adds	r3, #12
 80085c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80085c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80085ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e3      	bne.n	80085a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fc f9c4 	bl	800496e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f8b6 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085fc:	e099      	b.n	8008732 <HAL_UART_IRQHandler+0x50e>
 80085fe:	bf00      	nop
 8008600:	0800899f 	.word	0x0800899f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800860c:	b29b      	uxth	r3, r3
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 808b 	beq.w	8008736 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8086 	beq.w	8008736 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800863a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800864e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e3      	bne.n	800862a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3314      	adds	r3, #20
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	623b      	str	r3, [r7, #32]
   return(result);
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3314      	adds	r3, #20
 8008682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008686:	633a      	str	r2, [r7, #48]	@ 0x30
 8008688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800868c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e3      	bne.n	8008662 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0310 	bic.w	r3, r3, #16
 80086be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	330c      	adds	r3, #12
 80086c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80086cc:	61fa      	str	r2, [r7, #28]
 80086ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	69b9      	ldr	r1, [r7, #24]
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	617b      	str	r3, [r7, #20]
   return(result);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e3      	bne.n	80086a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f83e 	bl	8008768 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ec:	e023      	b.n	8008736 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <HAL_UART_IRQHandler+0x4ea>
 80086fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f95d 	bl	80089c6 <UART_Transmit_IT>
    return;
 800870c:	e014      	b.n	8008738 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00e      	beq.n	8008738 <HAL_UART_IRQHandler+0x514>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f99d 	bl	8008a66 <UART_EndTransmit_IT>
    return;
 800872c:	e004      	b.n	8008738 <HAL_UART_IRQHandler+0x514>
    return;
 800872e:	bf00      	nop
 8008730:	e002      	b.n	8008738 <HAL_UART_IRQHandler+0x514>
      return;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <HAL_UART_IRQHandler+0x514>
      return;
 8008736:	bf00      	nop
  }
}
 8008738:	37e8      	adds	r7, #232	@ 0xe8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop

08008740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b090      	sub	sp, #64	@ 0x40
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008790:	e050      	b.n	8008834 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d04c      	beq.n	8008834 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800879a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80087a0:	f7fb fba4 	bl	8003eec <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d241      	bcs.n	8008834 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	330c      	adds	r3, #12
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80087d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80087d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80087de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e5      	bne.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3314      	adds	r3, #20
 80087ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	613b      	str	r3, [r7, #16]
   return(result);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3314      	adds	r3, #20
 8008802:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008804:	623a      	str	r2, [r7, #32]
 8008806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	69f9      	ldr	r1, [r7, #28]
 800880a:	6a3a      	ldr	r2, [r7, #32]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	61bb      	str	r3, [r7, #24]
   return(result);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e00f      	b.n	8008854 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4013      	ands	r3, r2
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	429a      	cmp	r2, r3
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	429a      	cmp	r2, r3
 8008850:	d09f      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3740      	adds	r7, #64	@ 0x40
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	88fa      	ldrh	r2, [r7, #6]
 800887a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2222      	movs	r2, #34	@ 0x22
 8008886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695a      	ldr	r2, [r3, #20]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0220 	orr.w	r2, r2, #32
 80088c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b095      	sub	sp, #84	@ 0x54
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008900:	643a      	str	r2, [r7, #64]	@ 0x40
 8008902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008906:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e5      	bne.n	80088e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3314      	adds	r3, #20
 800891a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	61fb      	str	r3, [r7, #28]
   return(result);
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3314      	adds	r3, #20
 8008932:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008936:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800893a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e5      	bne.n	8008914 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894c:	2b01      	cmp	r3, #1
 800894e:	d119      	bne.n	8008984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0310 	bic.w	r3, r3, #16
 8008966:	647b      	str	r3, [r7, #68]	@ 0x44
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	330c      	adds	r3, #12
 800896e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008970:	61ba      	str	r2, [r7, #24]
 8008972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6979      	ldr	r1, [r7, #20]
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	613b      	str	r3, [r7, #16]
   return(result);
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e5      	bne.n	8008950 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008992:	bf00      	nop
 8008994:	3754      	adds	r7, #84	@ 0x54
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f7ff fecb 	bl	8008754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089be:	bf00      	nop
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b21      	cmp	r3, #33	@ 0x21
 80089d8:	d13e      	bne.n	8008a58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089e2:	d114      	bne.n	8008a0e <UART_Transmit_IT+0x48>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d110      	bne.n	8008a0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	1c9a      	adds	r2, r3, #2
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]
 8008a0c:	e008      	b.n	8008a20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	1c59      	adds	r1, r3, #1
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6211      	str	r1, [r2, #32]
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10f      	bne.n	8008a54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	e000      	b.n	8008a5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a58:	2302      	movs	r3, #2
  }
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fe5a 	bl	8008740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b08c      	sub	sp, #48	@ 0x30
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b22      	cmp	r3, #34	@ 0x22
 8008aa8:	f040 80ab 	bne.w	8008c02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab4:	d117      	bne.n	8008ae6 <UART_Receive_IT+0x50>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d113      	bne.n	8008ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	1c9a      	adds	r2, r3, #2
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ae4:	e026      	b.n	8008b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af8:	d007      	beq.n	8008b0a <UART_Receive_IT+0x74>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <UART_Receive_IT+0x82>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	e008      	b.n	8008b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b24:	b2da      	uxtb	r2, r3
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4619      	mov	r1, r3
 8008b42:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d15a      	bne.n	8008bfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0220 	bic.w	r2, r2, #32
 8008b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d135      	bne.n	8008bf4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	330c      	adds	r3, #12
 8008bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bae:	623a      	str	r2, [r7, #32]
 8008bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	69f9      	ldr	r1, [r7, #28]
 8008bb4:	6a3a      	ldr	r2, [r7, #32]
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e5      	bne.n	8008b8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d10a      	bne.n	8008be6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff fdbb 	bl	8008768 <HAL_UARTEx_RxEventCallback>
 8008bf2:	e002      	b.n	8008bfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7f8 fe77 	bl	80018e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e002      	b.n	8008c04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e000      	b.n	8008c04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c02:	2302      	movs	r3, #2
  }
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3730      	adds	r7, #48	@ 0x30
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c10:	b0c0      	sub	sp, #256	@ 0x100
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c28:	68d9      	ldr	r1, [r3, #12]
 8008c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	ea40 0301 	orr.w	r3, r0, r1
 8008c34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c64:	f021 010c 	bic.w	r1, r1, #12
 8008c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c72:	430b      	orrs	r3, r1
 8008c74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c86:	6999      	ldr	r1, [r3, #24]
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	ea40 0301 	orr.w	r3, r0, r1
 8008c92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8008ed8 <UART_SetConfig+0x2cc>)
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d005      	beq.n	8008cac <UART_SetConfig+0xa0>
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8008edc <UART_SetConfig+0x2d0>)
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d104      	bne.n	8008cb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008cac:	f7fd fcc4 	bl	8006638 <HAL_RCC_GetPCLK2Freq>
 8008cb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008cb4:	e003      	b.n	8008cbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cb6:	f7fd fcab 	bl	8006610 <HAL_RCC_GetPCLK1Freq>
 8008cba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cc8:	f040 810c 	bne.w	8008ee4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008cda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008cde:	4622      	mov	r2, r4
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	1891      	adds	r1, r2, r2
 8008ce4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ce6:	415b      	adcs	r3, r3
 8008ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cee:	4621      	mov	r1, r4
 8008cf0:	eb12 0801 	adds.w	r8, r2, r1
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	eb43 0901 	adc.w	r9, r3, r1
 8008cfa:	f04f 0200 	mov.w	r2, #0
 8008cfe:	f04f 0300 	mov.w	r3, #0
 8008d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d0e:	4690      	mov	r8, r2
 8008d10:	4699      	mov	r9, r3
 8008d12:	4623      	mov	r3, r4
 8008d14:	eb18 0303 	adds.w	r3, r8, r3
 8008d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	eb49 0303 	adc.w	r3, r9, r3
 8008d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	18db      	adds	r3, r3, r3
 8008d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d40:	4613      	mov	r3, r2
 8008d42:	eb42 0303 	adc.w	r3, r2, r3
 8008d46:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d50:	f7f7 ff4a 	bl	8000be8 <__aeabi_uldivmod>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4b61      	ldr	r3, [pc, #388]	@ (8008ee0 <UART_SetConfig+0x2d4>)
 8008d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	011c      	lsls	r4, r3, #4
 8008d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d74:	4642      	mov	r2, r8
 8008d76:	464b      	mov	r3, r9
 8008d78:	1891      	adds	r1, r2, r2
 8008d7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d7c:	415b      	adcs	r3, r3
 8008d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d84:	4641      	mov	r1, r8
 8008d86:	eb12 0a01 	adds.w	sl, r2, r1
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008da0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008da4:	4692      	mov	sl, r2
 8008da6:	469b      	mov	fp, r3
 8008da8:	4643      	mov	r3, r8
 8008daa:	eb1a 0303 	adds.w	r3, sl, r3
 8008dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008db2:	464b      	mov	r3, r9
 8008db4:	eb4b 0303 	adc.w	r3, fp, r3
 8008db8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008dc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008dcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	18db      	adds	r3, r3, r3
 8008dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	eb42 0303 	adc.w	r3, r2, r3
 8008ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008de2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008de6:	f7f7 feff 	bl	8000be8 <__aeabi_uldivmod>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ee0 <UART_SetConfig+0x2d4>)
 8008df2:	fba3 2301 	umull	r2, r3, r3, r1
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	2264      	movs	r2, #100	@ 0x64
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
 8008dfe:	1acb      	subs	r3, r1, r3
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e06:	4b36      	ldr	r3, [pc, #216]	@ (8008ee0 <UART_SetConfig+0x2d4>)
 8008e08:	fba3 2302 	umull	r2, r3, r3, r2
 8008e0c:	095b      	lsrs	r3, r3, #5
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e14:	441c      	add	r4, r3
 8008e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	1891      	adds	r1, r2, r2
 8008e2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e30:	415b      	adcs	r3, r3
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e38:	4641      	mov	r1, r8
 8008e3a:	1851      	adds	r1, r2, r1
 8008e3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e3e:	4649      	mov	r1, r9
 8008e40:	414b      	adcs	r3, r1
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e50:	4659      	mov	r1, fp
 8008e52:	00cb      	lsls	r3, r1, #3
 8008e54:	4651      	mov	r1, sl
 8008e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e5a:	4651      	mov	r1, sl
 8008e5c:	00ca      	lsls	r2, r1, #3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4619      	mov	r1, r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	4642      	mov	r2, r8
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	460a      	mov	r2, r1
 8008e70:	eb42 0303 	adc.w	r3, r2, r3
 8008e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	18db      	adds	r3, r3, r3
 8008e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e92:	4613      	mov	r3, r2
 8008e94:	eb42 0303 	adc.w	r3, r2, r3
 8008e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008ea2:	f7f7 fea1 	bl	8000be8 <__aeabi_uldivmod>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <UART_SetConfig+0x2d4>)
 8008eac:	fba3 1302 	umull	r1, r3, r3, r2
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	2164      	movs	r1, #100	@ 0x64
 8008eb4:	fb01 f303 	mul.w	r3, r1, r3
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	3332      	adds	r3, #50	@ 0x32
 8008ebe:	4a08      	ldr	r2, [pc, #32]	@ (8008ee0 <UART_SetConfig+0x2d4>)
 8008ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec4:	095b      	lsrs	r3, r3, #5
 8008ec6:	f003 0207 	and.w	r2, r3, #7
 8008eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4422      	add	r2, r4
 8008ed2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ed4:	e106      	b.n	80090e4 <UART_SetConfig+0x4d8>
 8008ed6:	bf00      	nop
 8008ed8:	40011000 	.word	0x40011000
 8008edc:	40011400 	.word	0x40011400
 8008ee0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ee4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008eee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ef2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	464b      	mov	r3, r9
 8008efa:	1891      	adds	r1, r2, r2
 8008efc:	6239      	str	r1, [r7, #32]
 8008efe:	415b      	adcs	r3, r3
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f06:	4641      	mov	r1, r8
 8008f08:	1854      	adds	r4, r2, r1
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	eb43 0501 	adc.w	r5, r3, r1
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	00eb      	lsls	r3, r5, #3
 8008f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f1e:	00e2      	lsls	r2, r4, #3
 8008f20:	4614      	mov	r4, r2
 8008f22:	461d      	mov	r5, r3
 8008f24:	4643      	mov	r3, r8
 8008f26:	18e3      	adds	r3, r4, r3
 8008f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	eb45 0303 	adc.w	r3, r5, r3
 8008f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f52:	4629      	mov	r1, r5
 8008f54:	008b      	lsls	r3, r1, #2
 8008f56:	4621      	mov	r1, r4
 8008f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	008a      	lsls	r2, r1, #2
 8008f60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f64:	f7f7 fe40 	bl	8000be8 <__aeabi_uldivmod>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4b60      	ldr	r3, [pc, #384]	@ (80090f0 <UART_SetConfig+0x4e4>)
 8008f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	011c      	lsls	r4, r3, #4
 8008f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f88:	4642      	mov	r2, r8
 8008f8a:	464b      	mov	r3, r9
 8008f8c:	1891      	adds	r1, r2, r2
 8008f8e:	61b9      	str	r1, [r7, #24]
 8008f90:	415b      	adcs	r3, r3
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f98:	4641      	mov	r1, r8
 8008f9a:	1851      	adds	r1, r2, r1
 8008f9c:	6139      	str	r1, [r7, #16]
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	414b      	adcs	r3, r1
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	00cb      	lsls	r3, r1, #3
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fba:	4651      	mov	r1, sl
 8008fbc:	00ca      	lsls	r2, r1, #3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	189b      	adds	r3, r3, r2
 8008fc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fcc:	464b      	mov	r3, r9
 8008fce:	460a      	mov	r2, r1
 8008fd0:	eb42 0303 	adc.w	r3, r2, r3
 8008fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fe2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	008b      	lsls	r3, r1, #2
 8008ff4:	4641      	mov	r1, r8
 8008ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	008a      	lsls	r2, r1, #2
 8008ffe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009002:	f7f7 fdf1 	bl	8000be8 <__aeabi_uldivmod>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4611      	mov	r1, r2
 800900c:	4b38      	ldr	r3, [pc, #224]	@ (80090f0 <UART_SetConfig+0x4e4>)
 800900e:	fba3 2301 	umull	r2, r3, r3, r1
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	2264      	movs	r2, #100	@ 0x64
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	1acb      	subs	r3, r1, r3
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	3332      	adds	r3, #50	@ 0x32
 8009020:	4a33      	ldr	r2, [pc, #204]	@ (80090f0 <UART_SetConfig+0x4e4>)
 8009022:	fba2 2303 	umull	r2, r3, r2, r3
 8009026:	095b      	lsrs	r3, r3, #5
 8009028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800902c:	441c      	add	r4, r3
 800902e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009032:	2200      	movs	r2, #0
 8009034:	673b      	str	r3, [r7, #112]	@ 0x70
 8009036:	677a      	str	r2, [r7, #116]	@ 0x74
 8009038:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800903c:	4642      	mov	r2, r8
 800903e:	464b      	mov	r3, r9
 8009040:	1891      	adds	r1, r2, r2
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	415b      	adcs	r3, r3
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800904c:	4641      	mov	r1, r8
 800904e:	1851      	adds	r1, r2, r1
 8009050:	6039      	str	r1, [r7, #0]
 8009052:	4649      	mov	r1, r9
 8009054:	414b      	adcs	r3, r1
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009064:	4659      	mov	r1, fp
 8009066:	00cb      	lsls	r3, r1, #3
 8009068:	4651      	mov	r1, sl
 800906a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800906e:	4651      	mov	r1, sl
 8009070:	00ca      	lsls	r2, r1, #3
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	4603      	mov	r3, r0
 8009078:	4642      	mov	r2, r8
 800907a:	189b      	adds	r3, r3, r2
 800907c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800907e:	464b      	mov	r3, r9
 8009080:	460a      	mov	r2, r1
 8009082:	eb42 0303 	adc.w	r3, r2, r3
 8009086:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	663b      	str	r3, [r7, #96]	@ 0x60
 8009092:	667a      	str	r2, [r7, #100]	@ 0x64
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090a0:	4649      	mov	r1, r9
 80090a2:	008b      	lsls	r3, r1, #2
 80090a4:	4641      	mov	r1, r8
 80090a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090aa:	4641      	mov	r1, r8
 80090ac:	008a      	lsls	r2, r1, #2
 80090ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090b2:	f7f7 fd99 	bl	8000be8 <__aeabi_uldivmod>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <UART_SetConfig+0x4e4>)
 80090bc:	fba3 1302 	umull	r1, r3, r3, r2
 80090c0:	095b      	lsrs	r3, r3, #5
 80090c2:	2164      	movs	r1, #100	@ 0x64
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	3332      	adds	r3, #50	@ 0x32
 80090ce:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <UART_SetConfig+0x4e4>)
 80090d0:	fba2 2303 	umull	r2, r3, r2, r3
 80090d4:	095b      	lsrs	r3, r3, #5
 80090d6:	f003 020f 	and.w	r2, r3, #15
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4422      	add	r2, r4
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80090ea:	46bd      	mov	sp, r7
 80090ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090f0:	51eb851f 	.word	0x51eb851f

080090f4 <__NVIC_SetPriority>:
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009104:	2b00      	cmp	r3, #0
 8009106:	db0a      	blt.n	800911e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	b2da      	uxtb	r2, r3
 800910c:	490c      	ldr	r1, [pc, #48]	@ (8009140 <__NVIC_SetPriority+0x4c>)
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	0112      	lsls	r2, r2, #4
 8009114:	b2d2      	uxtb	r2, r2
 8009116:	440b      	add	r3, r1
 8009118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800911c:	e00a      	b.n	8009134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	4908      	ldr	r1, [pc, #32]	@ (8009144 <__NVIC_SetPriority+0x50>)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	3b04      	subs	r3, #4
 800912c:	0112      	lsls	r2, r2, #4
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	440b      	add	r3, r1
 8009132:	761a      	strb	r2, [r3, #24]
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	e000e100 	.word	0xe000e100
 8009144:	e000ed00 	.word	0xe000ed00

08009148 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800914c:	2100      	movs	r1, #0
 800914e:	f06f 0004 	mvn.w	r0, #4
 8009152:	f7ff ffcf 	bl	80090f4 <__NVIC_SetPriority>
#endif
}
 8009156:	bf00      	nop
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	603b      	str	r3, [r7, #0]
  return(result);
 8009168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800916e:	f06f 0305 	mvn.w	r3, #5
 8009172:	607b      	str	r3, [r7, #4]
 8009174:	e00c      	b.n	8009190 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009176:	4b0a      	ldr	r3, [pc, #40]	@ (80091a0 <osKernelInitialize+0x44>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800917e:	4b08      	ldr	r3, [pc, #32]	@ (80091a0 <osKernelInitialize+0x44>)
 8009180:	2201      	movs	r2, #1
 8009182:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009184:	2300      	movs	r3, #0
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	e002      	b.n	8009190 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800918a:	f04f 33ff 	mov.w	r3, #4294967295
 800918e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009190:	687b      	ldr	r3, [r7, #4]
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20000944 	.word	0x20000944

080091a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091aa:	f3ef 8305 	mrs	r3, IPSR
 80091ae:	603b      	str	r3, [r7, #0]
  return(result);
 80091b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <osKernelStart+0x1a>
    stat = osErrorISR;
 80091b6:	f06f 0305 	mvn.w	r3, #5
 80091ba:	607b      	str	r3, [r7, #4]
 80091bc:	e010      	b.n	80091e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80091be:	4b0b      	ldr	r3, [pc, #44]	@ (80091ec <osKernelStart+0x48>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d109      	bne.n	80091da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80091c6:	f7ff ffbf 	bl	8009148 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80091ca:	4b08      	ldr	r3, [pc, #32]	@ (80091ec <osKernelStart+0x48>)
 80091cc:	2202      	movs	r2, #2
 80091ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80091d0:	f001 f99a 	bl	800a508 <vTaskStartScheduler>
      stat = osOK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	607b      	str	r3, [r7, #4]
 80091d8:	e002      	b.n	80091e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80091e0:	687b      	ldr	r3, [r7, #4]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20000944 	.word	0x20000944

080091f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08e      	sub	sp, #56	@ 0x38
 80091f4:	af04      	add	r7, sp, #16
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009200:	f3ef 8305 	mrs	r3, IPSR
 8009204:	617b      	str	r3, [r7, #20]
  return(result);
 8009206:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009208:	2b00      	cmp	r3, #0
 800920a:	d17e      	bne.n	800930a <osThreadNew+0x11a>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d07b      	beq.n	800930a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009212:	2380      	movs	r3, #128	@ 0x80
 8009214:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009216:	2318      	movs	r3, #24
 8009218:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d045      	beq.n	80092b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <osThreadNew+0x48>
        name = attr->name;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d008      	beq.n	800925e <osThreadNew+0x6e>
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b38      	cmp	r3, #56	@ 0x38
 8009250:	d805      	bhi.n	800925e <osThreadNew+0x6e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <osThreadNew+0x72>
        return (NULL);
 800925e:	2300      	movs	r3, #0
 8009260:	e054      	b.n	800930c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	089b      	lsrs	r3, r3, #2
 8009270:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <osThreadNew+0xa8>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	2ba7      	cmp	r3, #167	@ 0xa7
 8009280:	d90a      	bls.n	8009298 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009286:	2b00      	cmp	r3, #0
 8009288:	d006      	beq.n	8009298 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <osThreadNew+0xa8>
        mem = 1;
 8009292:	2301      	movs	r3, #1
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	e010      	b.n	80092ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10c      	bne.n	80092ba <osThreadNew+0xca>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <osThreadNew+0xca>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <osThreadNew+0xca>
          mem = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61bb      	str	r3, [r7, #24]
 80092b4:	e001      	b.n	80092ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d110      	bne.n	80092e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092c8:	9202      	str	r2, [sp, #8]
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fe1a 	bl	8009f10 <xTaskCreateStatic>
 80092dc:	4603      	mov	r3, r0
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	e013      	b.n	800930a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d110      	bne.n	800930a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f107 0310 	add.w	r3, r7, #16
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fe68 	bl	8009fd0 <xTaskCreate>
 8009300:	4603      	mov	r3, r0
 8009302:	2b01      	cmp	r3, #1
 8009304:	d001      	beq.n	800930a <osThreadNew+0x11a>
            hTask = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800930a:	693b      	ldr	r3, [r7, #16]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3728      	adds	r7, #40	@ 0x28
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800931c:	f3ef 8305 	mrs	r3, IPSR
 8009320:	60bb      	str	r3, [r7, #8]
  return(result);
 8009322:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <osDelay+0x1c>
    stat = osErrorISR;
 8009328:	f06f 0305 	mvn.w	r3, #5
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e007      	b.n	8009340 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <osDelay+0x2c>
      vTaskDelay(ticks);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 ffa6 	bl	800a28c <vTaskDelay>
    }
  }

  return (stat);
 8009340:	68fb      	ldr	r3, [r7, #12]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a07      	ldr	r2, [pc, #28]	@ (8009378 <vApplicationGetIdleTaskMemory+0x2c>)
 800935c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4a06      	ldr	r2, [pc, #24]	@ (800937c <vApplicationGetIdleTaskMemory+0x30>)
 8009362:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2280      	movs	r2, #128	@ 0x80
 8009368:	601a      	str	r2, [r3, #0]
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000948 	.word	0x20000948
 800937c:	200009f0 	.word	0x200009f0

08009380 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4a07      	ldr	r2, [pc, #28]	@ (80093ac <vApplicationGetTimerTaskMemory+0x2c>)
 8009390:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	4a06      	ldr	r2, [pc, #24]	@ (80093b0 <vApplicationGetTimerTaskMemory+0x30>)
 8009396:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800939e:	601a      	str	r2, [r3, #0]
}
 80093a0:	bf00      	nop
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	20000bf0 	.word	0x20000bf0
 80093b0:	20000c98 	.word	0x20000c98

080093b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 0208 	add.w	r2, r3, #8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f04f 32ff 	mov.w	r2, #4294967295
 80093cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f103 0208 	add.w	r2, r3, #8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0208 	add.w	r2, r3, #8
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009402:	bf00      	nop
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800940e:	b480      	push	{r7}
 8009410:	b085      	sub	sp, #20
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d103      	bne.n	8009476 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	e00c      	b.n	8009490 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3308      	adds	r3, #8
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	e002      	b.n	8009484 <vListInsert+0x2e>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	429a      	cmp	r2, r3
 800948e:	d2f6      	bcs.n	800947e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]
}
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6892      	ldr	r2, [r2, #8]
 80094de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6852      	ldr	r2, [r2, #4]
 80094e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d103      	bne.n	80094fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	1e5a      	subs	r2, r3, #1
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10b      	bne.n	8009548 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009548:	f002 f9ae 	bl	800b8a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009554:	68f9      	ldr	r1, [r7, #12]
 8009556:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009578:	3b01      	subs	r3, #1
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800957e:	fb01 f303 	mul.w	r3, r1, r3
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	22ff      	movs	r2, #255	@ 0xff
 800958c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	22ff      	movs	r2, #255	@ 0xff
 8009594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d114      	bne.n	80095c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01a      	beq.n	80095dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3310      	adds	r3, #16
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 fa4a 	bl	800aa44 <xTaskRemoveFromEventList>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d012      	beq.n	80095dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80095b6:	4b0d      	ldr	r3, [pc, #52]	@ (80095ec <xQueueGenericReset+0xd0>)
 80095b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	e009      	b.n	80095dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3310      	adds	r3, #16
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fef1 	bl	80093b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3324      	adds	r3, #36	@ 0x24
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff feec 	bl	80093b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095dc:	f002 f996 	bl	800b90c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095e0:	2301      	movs	r3, #1
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	e000ed04 	.word	0xe000ed04

080095f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	@ 0x38
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10b      	bne.n	800963a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	e7fd      	b.n	8009636 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <xQueueGenericCreateStatic+0x56>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <xQueueGenericCreateStatic+0x5a>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <xQueueGenericCreateStatic+0x5c>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10b      	bne.n	8009668 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	623b      	str	r3, [r7, #32]
}
 8009662:	bf00      	nop
 8009664:	bf00      	nop
 8009666:	e7fd      	b.n	8009664 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <xQueueGenericCreateStatic+0x84>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <xQueueGenericCreateStatic+0x88>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <xQueueGenericCreateStatic+0x8a>
 8009678:	2300      	movs	r3, #0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	61fb      	str	r3, [r7, #28]
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	e7fd      	b.n	8009692 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009696:	2350      	movs	r3, #80	@ 0x50
 8009698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b50      	cmp	r3, #80	@ 0x50
 800969e:	d00b      	beq.n	80096b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	61bb      	str	r3, [r7, #24]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80096b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00d      	beq.n	80096e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80096c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	68b9      	ldr	r1, [r7, #8]
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 f805 	bl	80096ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3730      	adds	r7, #48	@ 0x30
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	e002      	b.n	800970c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009718:	2101      	movs	r1, #1
 800971a:	69b8      	ldr	r0, [r7, #24]
 800971c:	f7ff fefe 	bl	800951c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	@ 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10b      	bne.n	8009764 <xQueueGenericSend+0x34>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	e7fd      	b.n	8009760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d103      	bne.n	8009772 <xQueueGenericSend+0x42>
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <xQueueGenericSend+0x46>
 8009772:	2301      	movs	r3, #1
 8009774:	e000      	b.n	8009778 <xQueueGenericSend+0x48>
 8009776:	2300      	movs	r3, #0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10b      	bne.n	8009794 <xQueueGenericSend+0x64>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	e7fd      	b.n	8009790 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d103      	bne.n	80097a2 <xQueueGenericSend+0x72>
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <xQueueGenericSend+0x76>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <xQueueGenericSend+0x78>
 80097a6:	2300      	movs	r3, #0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xQueueGenericSend+0x94>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	623b      	str	r3, [r7, #32]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097c4:	f001 fb04 	bl	800add0 <xTaskGetSchedulerState>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <xQueueGenericSend+0xa4>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <xQueueGenericSend+0xa8>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <xQueueGenericSend+0xaa>
 80097d8:	2300      	movs	r3, #0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	61fb      	str	r3, [r7, #28]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097f6:	f002 f857 	bl	800b8a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009802:	429a      	cmp	r2, r3
 8009804:	d302      	bcc.n	800980c <xQueueGenericSend+0xdc>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b02      	cmp	r3, #2
 800980a:	d129      	bne.n	8009860 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009812:	f000 fa0f 	bl	8009c34 <prvCopyDataToQueue>
 8009816:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	3324      	adds	r3, #36	@ 0x24
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f90d 	bl	800aa44 <xTaskRemoveFromEventList>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d013      	beq.n	8009858 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009830:	4b3f      	ldr	r3, [pc, #252]	@ (8009930 <xQueueGenericSend+0x200>)
 8009832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009836:	601a      	str	r2, [r3, #0]
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	e00a      	b.n	8009858 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009848:	4b39      	ldr	r3, [pc, #228]	@ (8009930 <xQueueGenericSend+0x200>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009858:	f002 f858 	bl	800b90c <vPortExitCritical>
				return pdPASS;
 800985c:	2301      	movs	r3, #1
 800985e:	e063      	b.n	8009928 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009866:	f002 f851 	bl	800b90c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800986a:	2300      	movs	r3, #0
 800986c:	e05c      	b.n	8009928 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800986e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009874:	f107 0314 	add.w	r3, r7, #20
 8009878:	4618      	mov	r0, r3
 800987a:	f001 f947 	bl	800ab0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009882:	f002 f843 	bl	800b90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009886:	f000 feaf 	bl	800a5e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800988a:	f002 f80d 	bl	800b8a8 <vPortEnterCritical>
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009894:	b25b      	sxtb	r3, r3
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d103      	bne.n	80098a4 <xQueueGenericSend+0x174>
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098aa:	b25b      	sxtb	r3, r3
 80098ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b0:	d103      	bne.n	80098ba <xQueueGenericSend+0x18a>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098ba:	f002 f827 	bl	800b90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098be:	1d3a      	adds	r2, r7, #4
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f001 f936 	bl	800ab38 <xTaskCheckForTimeOut>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d124      	bne.n	800991c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098d4:	f000 faa6 	bl	8009e24 <prvIsQueueFull>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d018      	beq.n	8009910 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	3310      	adds	r3, #16
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f001 f85a 	bl	800a9a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80098ee:	f000 fa31 	bl	8009d54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098f2:	f000 fe87 	bl	800a604 <xTaskResumeAll>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f47f af7c 	bne.w	80097f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80098fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009930 <xQueueGenericSend+0x200>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	e772      	b.n	80097f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009912:	f000 fa1f 	bl	8009d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009916:	f000 fe75 	bl	800a604 <xTaskResumeAll>
 800991a:	e76c      	b.n	80097f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800991c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800991e:	f000 fa19 	bl	8009d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009922:	f000 fe6f 	bl	800a604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009928:	4618      	mov	r0, r3
 800992a:	3738      	adds	r7, #56	@ 0x38
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b090      	sub	sp, #64	@ 0x40
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d10b      	bne.n	8009964 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800994c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800995e:	bf00      	nop
 8009960:	bf00      	nop
 8009962:	e7fd      	b.n	8009960 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <xQueueGenericSendFromISR+0x3e>
 800996a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <xQueueGenericSendFromISR+0x42>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericSendFromISR+0x44>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d103      	bne.n	80099a2 <xQueueGenericSendFromISR+0x6e>
 800999a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <xQueueGenericSendFromISR+0x72>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <xQueueGenericSendFromISR+0x74>
 80099a6:	2300      	movs	r3, #0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10b      	bne.n	80099c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	623b      	str	r3, [r7, #32]
}
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
 80099c2:	e7fd      	b.n	80099c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099c4:	f002 f850 	bl	800ba68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c8:	f3ef 8211 	mrs	r2, BASEPRI
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	61fa      	str	r2, [r7, #28]
 80099de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <xQueueGenericSendFromISR+0xc2>
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d12f      	bne.n	8009a56 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a0c:	f000 f912 	bl	8009c34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a10:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a18:	d112      	bne.n	8009a40 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	3324      	adds	r3, #36	@ 0x24
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 f80c 	bl	800aa44 <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e007      	b.n	8009a50 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009a44:	3301      	adds	r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	b25a      	sxtb	r2, r3
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009a50:	2301      	movs	r3, #1
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009a54:	e001      	b.n	8009a5a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3740      	adds	r7, #64	@ 0x40
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08c      	sub	sp, #48	@ 0x30
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10b      	bne.n	8009aa2 <xQueueReceive+0x32>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	623b      	str	r3, [r7, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d103      	bne.n	8009ab0 <xQueueReceive+0x40>
 8009aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <xQueueReceive+0x44>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <xQueueReceive+0x46>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <xQueueReceive+0x62>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	61fb      	str	r3, [r7, #28]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ad2:	f001 f97d 	bl	800add0 <xTaskGetSchedulerState>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <xQueueReceive+0x72>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <xQueueReceive+0x76>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <xQueueReceive+0x78>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10b      	bne.n	8009b04 <xQueueReceive+0x94>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	61bb      	str	r3, [r7, #24]
}
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
 8009b02:	e7fd      	b.n	8009b00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b04:	f001 fed0 	bl	800b8a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01f      	beq.n	8009b54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b18:	f000 f8f6 	bl	8009d08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00f      	beq.n	8009b4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	3310      	adds	r3, #16
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 ff87 	bl	800aa44 <xTaskRemoveFromEventList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d007      	beq.n	8009b4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8009c30 <xQueueReceive+0x1c0>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b4c:	f001 fede 	bl	800b90c <vPortExitCritical>
				return pdPASS;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e069      	b.n	8009c28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b5a:	f001 fed7 	bl	800b90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e062      	b.n	8009c28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b68:	f107 0310 	add.w	r3, r7, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 ffcd 	bl	800ab0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b72:	2301      	movs	r3, #1
 8009b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b76:	f001 fec9 	bl	800b90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b7a:	f000 fd35 	bl	800a5e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b7e:	f001 fe93 	bl	800b8a8 <vPortEnterCritical>
 8009b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b88:	b25b      	sxtb	r3, r3
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d103      	bne.n	8009b98 <xQueueReceive+0x128>
 8009b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b9e:	b25b      	sxtb	r3, r3
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d103      	bne.n	8009bae <xQueueReceive+0x13e>
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bae:	f001 fead 	bl	800b90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bb2:	1d3a      	adds	r2, r7, #4
 8009bb4:	f107 0310 	add.w	r3, r7, #16
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 ffbc 	bl	800ab38 <xTaskCheckForTimeOut>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d123      	bne.n	8009c0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc8:	f000 f916 	bl	8009df8 <prvIsQueueEmpty>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d017      	beq.n	8009c02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	3324      	adds	r3, #36	@ 0x24
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fee0 	bl	800a9a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009be2:	f000 f8b7 	bl	8009d54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009be6:	f000 fd0d 	bl	800a604 <xTaskResumeAll>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d189      	bne.n	8009b04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <xQueueReceive+0x1c0>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	e780      	b.n	8009b04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c04:	f000 f8a6 	bl	8009d54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c08:	f000 fcfc 	bl	800a604 <xTaskResumeAll>
 8009c0c:	e77a      	b.n	8009b04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c10:	f000 f8a0 	bl	8009d54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c14:	f000 fcf6 	bl	800a604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c1a:	f000 f8ed 	bl	8009df8 <prvIsQueueEmpty>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f43f af6f 	beq.w	8009b04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3730      	adds	r7, #48	@ 0x30
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	e000ed04 	.word	0xe000ed04

08009c34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d14d      	bne.n	8009cf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 f8d4 	bl	800ae0c <xTaskPriorityDisinherit>
 8009c64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	609a      	str	r2, [r3, #8]
 8009c6c:	e043      	b.n	8009cf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d119      	bne.n	8009ca8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6858      	ldr	r0, [r3, #4]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	f002 ff75 	bl	800cb6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8c:	441a      	add	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d32b      	bcc.n	8009cf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	605a      	str	r2, [r3, #4]
 8009ca6:	e026      	b.n	8009cf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	68d8      	ldr	r0, [r3, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	f002 ff5b 	bl	800cb6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	441a      	add	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d207      	bcs.n	8009ce4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cdc:	425b      	negs	r3, r3
 8009cde:	441a      	add	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d105      	bne.n	8009cf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009cfe:	697b      	ldr	r3, [r7, #20]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d018      	beq.n	8009d4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d22:	441a      	add	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d303      	bcc.n	8009d3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68d9      	ldr	r1, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d44:	461a      	mov	r2, r3
 8009d46:	6838      	ldr	r0, [r7, #0]
 8009d48:	f002 ff11 	bl	800cb6e <memcpy>
	}
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d5c:	f001 fda4 	bl	800b8a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d68:	e011      	b.n	8009d8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d012      	beq.n	8009d98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3324      	adds	r3, #36	@ 0x24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fe64 	bl	800aa44 <xTaskRemoveFromEventList>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d82:	f000 ff3d 	bl	800ac00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dce9      	bgt.n	8009d6a <prvUnlockQueue+0x16>
 8009d96:	e000      	b.n	8009d9a <prvUnlockQueue+0x46>
					break;
 8009d98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	22ff      	movs	r2, #255	@ 0xff
 8009d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009da2:	f001 fdb3 	bl	800b90c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009da6:	f001 fd7f 	bl	800b8a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009db0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009db2:	e011      	b.n	8009dd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d012      	beq.n	8009de2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3310      	adds	r3, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fe3f 	bl	800aa44 <xTaskRemoveFromEventList>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dcc:	f000 ff18 	bl	800ac00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dce9      	bgt.n	8009db4 <prvUnlockQueue+0x60>
 8009de0:	e000      	b.n	8009de4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009de2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	22ff      	movs	r2, #255	@ 0xff
 8009de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009dec:	f001 fd8e 	bl	800b90c <vPortExitCritical>
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e00:	f001 fd52 	bl	800b8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e001      	b.n	8009e16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e16:	f001 fd79 	bl	800b90c <vPortExitCritical>

	return xReturn;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e2c:	f001 fd3c 	bl	800b8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d102      	bne.n	8009e42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	e001      	b.n	8009e46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e46:	f001 fd61 	bl	800b90c <vPortExitCritical>

	return xReturn;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e014      	b.n	8009e8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e64:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea4 <vQueueAddToRegistry+0x50>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10b      	bne.n	8009e88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e70:	490c      	ldr	r1, [pc, #48]	@ (8009ea4 <vQueueAddToRegistry+0x50>)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea4 <vQueueAddToRegistry+0x50>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	4413      	add	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e86:	e006      	b.n	8009e96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d9e7      	bls.n	8009e64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20001098 	.word	0x20001098

08009ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009eb8:	f001 fcf6 	bl	800b8a8 <vPortEnterCritical>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec8:	d103      	bne.n	8009ed2 <vQueueWaitForMessageRestricted+0x2a>
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ed8:	b25b      	sxtb	r3, r3
 8009eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ede:	d103      	bne.n	8009ee8 <vQueueWaitForMessageRestricted+0x40>
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ee8:	f001 fd10 	bl	800b90c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d106      	bne.n	8009f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	3324      	adds	r3, #36	@ 0x24
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fd75 	bl	800a9ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f02:	6978      	ldr	r0, [r7, #20]
 8009f04:	f7ff ff26 	bl	8009d54 <prvUnlockQueue>
	}
 8009f08:	bf00      	nop
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	@ 0x38
 8009f14:	af04      	add	r7, sp, #16
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	623b      	str	r3, [r7, #32]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10b      	bne.n	8009f5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	61fb      	str	r3, [r7, #28]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f5a:	23a8      	movs	r3, #168	@ 0xa8
 8009f5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2ba8      	cmp	r3, #168	@ 0xa8
 8009f62:	d00b      	beq.n	8009f7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	61bb      	str	r3, [r7, #24]
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	e7fd      	b.n	8009f78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01e      	beq.n	8009fc2 <xTaskCreateStatic+0xb2>
 8009f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d01b      	beq.n	8009fc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9303      	str	r3, [sp, #12]
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	9302      	str	r3, [sp, #8]
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f851 	bl	800a05c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fbc:	f000 f8f6 	bl	800a1ac <prvAddNewTaskToReadyList>
 8009fc0:	e001      	b.n	8009fc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fc6:	697b      	ldr	r3, [r7, #20]
	}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3728      	adds	r7, #40	@ 0x28
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08c      	sub	sp, #48	@ 0x30
 8009fd4:	af04      	add	r7, sp, #16
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	603b      	str	r3, [r7, #0]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009fe0:	88fb      	ldrh	r3, [r7, #6]
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fd81 	bl	800baec <pvPortMalloc>
 8009fea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00e      	beq.n	800a010 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ff2:	20a8      	movs	r0, #168	@ 0xa8
 8009ff4:	f001 fd7a 	bl	800baec <pvPortMalloc>
 8009ff8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	631a      	str	r2, [r3, #48]	@ 0x30
 800a006:	e005      	b.n	800a014 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a008:	6978      	ldr	r0, [r7, #20]
 800a00a:	f001 fe3d 	bl	800bc88 <vPortFree>
 800a00e:	e001      	b.n	800a014 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d017      	beq.n	800a04a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a022:	88fa      	ldrh	r2, [r7, #6]
 800a024:	2300      	movs	r3, #0
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	9302      	str	r3, [sp, #8]
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f80f 	bl	800a05c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a03e:	69f8      	ldr	r0, [r7, #28]
 800a040:	f000 f8b4 	bl	800a1ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a044:	2301      	movs	r3, #1
 800a046:	61bb      	str	r3, [r7, #24]
 800a048:	e002      	b.n	800a050 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a04a:	f04f 33ff 	mov.w	r3, #4294967295
 800a04e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a050:	69bb      	ldr	r3, [r7, #24]
	}
 800a052:	4618      	mov	r0, r3
 800a054:	3720      	adds	r7, #32
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	461a      	mov	r2, r3
 800a074:	21a5      	movs	r1, #165	@ 0xa5
 800a076:	f002 fca4 	bl	800c9c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a084:	3b01      	subs	r3, #1
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	617b      	str	r3, [r7, #20]
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	e7fd      	b.n	800a0b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01f      	beq.n	800a0fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	e012      	b.n	800a0e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	7819      	ldrb	r1, [r3, #0]
 800a0ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	3334      	adds	r3, #52	@ 0x34
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	4413      	add	r3, r2
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d006      	beq.n	800a0f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	2b0f      	cmp	r3, #15
 800a0ec:	d9e9      	bls.n	800a0c2 <prvInitialiseNewTask+0x66>
 800a0ee:	e000      	b.n	800a0f2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a0f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0fa:	e003      	b.n	800a104 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a106:	2b37      	cmp	r3, #55	@ 0x37
 800a108:	d901      	bls.n	800a10e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a10a:	2337      	movs	r3, #55	@ 0x37
 800a10c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a112:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a118:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	2200      	movs	r2, #0
 800a11e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	3304      	adds	r3, #4
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff f965 	bl	80093f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	3318      	adds	r3, #24
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff f960 	bl	80093f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a138:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a142:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a148:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2200      	movs	r2, #0
 800a156:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	3354      	adds	r3, #84	@ 0x54
 800a15e:	224c      	movs	r2, #76	@ 0x4c
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f002 fc2d 	bl	800c9c2 <memset>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	4a0d      	ldr	r2, [pc, #52]	@ (800a1a0 <prvInitialiseNewTask+0x144>)
 800a16c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a4 <prvInitialiseNewTask+0x148>)
 800a172:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a176:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a8 <prvInitialiseNewTask+0x14c>)
 800a178:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	68f9      	ldr	r1, [r7, #12]
 800a17e:	69b8      	ldr	r0, [r7, #24]
 800a180:	f001 fa62 	bl	800b648 <pxPortInitialiseStack>
 800a184:	4602      	mov	r2, r0
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a196:	bf00      	nop
 800a198:	3720      	adds	r7, #32
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	2000532c 	.word	0x2000532c
 800a1a4:	20005394 	.word	0x20005394
 800a1a8:	200053fc 	.word	0x200053fc

0800a1ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1b4:	f001 fb78 	bl	800b8a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1b8:	4b2d      	ldr	r3, [pc, #180]	@ (800a270 <prvAddNewTaskToReadyList+0xc4>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	4a2c      	ldr	r2, [pc, #176]	@ (800a270 <prvAddNewTaskToReadyList+0xc4>)
 800a1c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800a274 <prvAddNewTaskToReadyList+0xc8>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a274 <prvAddNewTaskToReadyList+0xc8>)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1d0:	4b27      	ldr	r3, [pc, #156]	@ (800a270 <prvAddNewTaskToReadyList+0xc4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d110      	bne.n	800a1fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1d8:	f000 fd36 	bl	800ac48 <prvInitialiseTaskLists>
 800a1dc:	e00d      	b.n	800a1fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1de:	4b26      	ldr	r3, [pc, #152]	@ (800a278 <prvAddNewTaskToReadyList+0xcc>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1e6:	4b23      	ldr	r3, [pc, #140]	@ (800a274 <prvAddNewTaskToReadyList+0xc8>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d802      	bhi.n	800a1fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a1f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a274 <prvAddNewTaskToReadyList+0xc8>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a1fa:	4b20      	ldr	r3, [pc, #128]	@ (800a27c <prvAddNewTaskToReadyList+0xd0>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3301      	adds	r3, #1
 800a200:	4a1e      	ldr	r2, [pc, #120]	@ (800a27c <prvAddNewTaskToReadyList+0xd0>)
 800a202:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a204:	4b1d      	ldr	r3, [pc, #116]	@ (800a27c <prvAddNewTaskToReadyList+0xd0>)
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a210:	4b1b      	ldr	r3, [pc, #108]	@ (800a280 <prvAddNewTaskToReadyList+0xd4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d903      	bls.n	800a220 <prvAddNewTaskToReadyList+0x74>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	4a18      	ldr	r2, [pc, #96]	@ (800a280 <prvAddNewTaskToReadyList+0xd4>)
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a224:	4613      	mov	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4a15      	ldr	r2, [pc, #84]	@ (800a284 <prvAddNewTaskToReadyList+0xd8>)
 800a22e:	441a      	add	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3304      	adds	r3, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4610      	mov	r0, r2
 800a238:	f7ff f8e9 	bl	800940e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a23c:	f001 fb66 	bl	800b90c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a240:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <prvAddNewTaskToReadyList+0xcc>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00e      	beq.n	800a266 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a248:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <prvAddNewTaskToReadyList+0xc8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	429a      	cmp	r2, r3
 800a254:	d207      	bcs.n	800a266 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a256:	4b0c      	ldr	r3, [pc, #48]	@ (800a288 <prvAddNewTaskToReadyList+0xdc>)
 800a258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	200015ac 	.word	0x200015ac
 800a274:	200010d8 	.word	0x200010d8
 800a278:	200015b8 	.word	0x200015b8
 800a27c:	200015c8 	.word	0x200015c8
 800a280:	200015b4 	.word	0x200015b4
 800a284:	200010dc 	.word	0x200010dc
 800a288:	e000ed04 	.word	0xe000ed04

0800a28c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d018      	beq.n	800a2d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <vTaskDelay+0x64>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <vTaskDelay+0x32>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	60bb      	str	r3, [r7, #8]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2be:	f000 f993 	bl	800a5e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fe11 	bl	800aeec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2ca:	f000 f99b 	bl	800a604 <xTaskResumeAll>
 800a2ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d107      	bne.n	800a2e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a2d6:	4b07      	ldr	r3, [pc, #28]	@ (800a2f4 <vTaskDelay+0x68>)
 800a2d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2e6:	bf00      	nop
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200015d4 	.word	0x200015d4
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a300:	f001 fad2 	bl	800b8a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <vTaskSuspend+0x18>
 800a30a:	4b30      	ldr	r3, [pc, #192]	@ (800a3cc <vTaskSuspend+0xd4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	e000      	b.n	800a312 <vTaskSuspend+0x1a>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3304      	adds	r3, #4
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff f8d5 	bl	80094c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3318      	adds	r3, #24
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff f8cc 	bl	80094c8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3304      	adds	r3, #4
 800a334:	4619      	mov	r1, r3
 800a336:	4826      	ldr	r0, [pc, #152]	@ (800a3d0 <vTaskSuspend+0xd8>)
 800a338:	f7ff f869 	bl	800940e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d103      	bne.n	800a350 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a350:	f001 fadc 	bl	800b90c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a354:	4b1f      	ldr	r3, [pc, #124]	@ (800a3d4 <vTaskSuspend+0xdc>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a35c:	f001 faa4 	bl	800b8a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a360:	f000 fd16 	bl	800ad90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a364:	f001 fad2 	bl	800b90c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a368:	4b18      	ldr	r3, [pc, #96]	@ (800a3cc <vTaskSuspend+0xd4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d128      	bne.n	800a3c4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a372:	4b18      	ldr	r3, [pc, #96]	@ (800a3d4 <vTaskSuspend+0xdc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d018      	beq.n	800a3ac <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a37a:	4b17      	ldr	r3, [pc, #92]	@ (800a3d8 <vTaskSuspend+0xe0>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00b      	beq.n	800a39a <vTaskSuspend+0xa2>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	60bb      	str	r3, [r7, #8]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a39a:	4b10      	ldr	r3, [pc, #64]	@ (800a3dc <vTaskSuspend+0xe4>)
 800a39c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3aa:	e00b      	b.n	800a3c4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a3ac:	4b08      	ldr	r3, [pc, #32]	@ (800a3d0 <vTaskSuspend+0xd8>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e0 <vTaskSuspend+0xe8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d103      	bne.n	800a3c0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800a3b8:	4b04      	ldr	r3, [pc, #16]	@ (800a3cc <vTaskSuspend+0xd4>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
	}
 800a3be:	e001      	b.n	800a3c4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800a3c0:	f000 fa88 	bl	800a8d4 <vTaskSwitchContext>
	}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	200010d8 	.word	0x200010d8
 800a3d0:	20001598 	.word	0x20001598
 800a3d4:	200015b8 	.word	0x200015b8
 800a3d8:	200015d4 	.word	0x200015d4
 800a3dc:	e000ed04 	.word	0xe000ed04
 800a3e0:	200015ac 	.word	0x200015ac

0800a3e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10b      	bne.n	800a412 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	60fb      	str	r3, [r7, #12]
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	e7fd      	b.n	800a40e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	4a0a      	ldr	r2, [pc, #40]	@ (800a440 <prvTaskIsTaskSuspended+0x5c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d10a      	bne.n	800a432 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	4a08      	ldr	r2, [pc, #32]	@ (800a444 <prvTaskIsTaskSuspended+0x60>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d005      	beq.n	800a432 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800a42e:	2301      	movs	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a432:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a434:	4618      	mov	r0, r3
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20001598 	.word	0x20001598
 800a444:	2000156c 	.word	0x2000156c

0800a448 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <vTaskResume+0x2a>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	60bb      	str	r3, [r7, #8]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a472:	4b21      	ldr	r3, [pc, #132]	@ (800a4f8 <vTaskResume+0xb0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d038      	beq.n	800a4ee <vTaskResume+0xa6>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d035      	beq.n	800a4ee <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800a482:	f001 fa11 	bl	800b8a8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff ffac 	bl	800a3e4 <prvTaskIsTaskSuspended>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d02b      	beq.n	800a4ea <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3304      	adds	r3, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f816 	bl	80094c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a0:	4b16      	ldr	r3, [pc, #88]	@ (800a4fc <vTaskResume+0xb4>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d903      	bls.n	800a4b0 <vTaskResume+0x68>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ac:	4a13      	ldr	r2, [pc, #76]	@ (800a4fc <vTaskResume+0xb4>)
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4a10      	ldr	r2, [pc, #64]	@ (800a500 <vTaskResume+0xb8>)
 800a4be:	441a      	add	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe ffa1 	bl	800940e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d0:	4b09      	ldr	r3, [pc, #36]	@ (800a4f8 <vTaskResume+0xb0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d307      	bcc.n	800a4ea <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a4da:	4b0a      	ldr	r3, [pc, #40]	@ (800a504 <vTaskResume+0xbc>)
 800a4dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a4ea:	f001 fa0f 	bl	800b90c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200010d8 	.word	0x200010d8
 800a4fc:	200015b4 	.word	0x200015b4
 800a500:	200010dc 	.word	0x200010dc
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	@ 0x28
 800a50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a516:	463a      	mov	r2, r7
 800a518:	1d39      	adds	r1, r7, #4
 800a51a:	f107 0308 	add.w	r3, r7, #8
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe ff14 	bl	800934c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	9202      	str	r2, [sp, #8]
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	460a      	mov	r2, r1
 800a536:	4924      	ldr	r1, [pc, #144]	@ (800a5c8 <vTaskStartScheduler+0xc0>)
 800a538:	4824      	ldr	r0, [pc, #144]	@ (800a5cc <vTaskStartScheduler+0xc4>)
 800a53a:	f7ff fce9 	bl	8009f10 <xTaskCreateStatic>
 800a53e:	4603      	mov	r3, r0
 800a540:	4a23      	ldr	r2, [pc, #140]	@ (800a5d0 <vTaskStartScheduler+0xc8>)
 800a542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a544:	4b22      	ldr	r3, [pc, #136]	@ (800a5d0 <vTaskStartScheduler+0xc8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e001      	b.n	800a556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a552:	2300      	movs	r3, #0
 800a554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d102      	bne.n	800a562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a55c:	f000 fd1a 	bl	800af94 <xTimerCreateTimerTask>
 800a560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d11b      	bne.n	800a5a0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	613b      	str	r3, [r7, #16]
}
 800a57a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a57c:	4b15      	ldr	r3, [pc, #84]	@ (800a5d4 <vTaskStartScheduler+0xcc>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3354      	adds	r3, #84	@ 0x54
 800a582:	4a15      	ldr	r2, [pc, #84]	@ (800a5d8 <vTaskStartScheduler+0xd0>)
 800a584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a586:	4b15      	ldr	r3, [pc, #84]	@ (800a5dc <vTaskStartScheduler+0xd4>)
 800a588:	f04f 32ff 	mov.w	r2, #4294967295
 800a58c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a58e:	4b14      	ldr	r3, [pc, #80]	@ (800a5e0 <vTaskStartScheduler+0xd8>)
 800a590:	2201      	movs	r2, #1
 800a592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a594:	4b13      	ldr	r3, [pc, #76]	@ (800a5e4 <vTaskStartScheduler+0xdc>)
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a59a:	f001 f8e1 	bl	800b760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a59e:	e00f      	b.n	800a5c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d10b      	bne.n	800a5c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	60fb      	str	r3, [r7, #12]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <vTaskStartScheduler+0xb4>
}
 800a5c0:	bf00      	nop
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	0800ecdc 	.word	0x0800ecdc
 800a5cc:	0800ac19 	.word	0x0800ac19
 800a5d0:	200015d0 	.word	0x200015d0
 800a5d4:	200010d8 	.word	0x200010d8
 800a5d8:	20000028 	.word	0x20000028
 800a5dc:	200015cc 	.word	0x200015cc
 800a5e0:	200015b8 	.word	0x200015b8
 800a5e4:	200015b0 	.word	0x200015b0

0800a5e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5ec:	4b04      	ldr	r3, [pc, #16]	@ (800a600 <vTaskSuspendAll+0x18>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	4a03      	ldr	r2, [pc, #12]	@ (800a600 <vTaskSuspendAll+0x18>)
 800a5f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5f6:	bf00      	nop
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	200015d4 	.word	0x200015d4

0800a604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a60e:	2300      	movs	r3, #0
 800a610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a612:	4b42      	ldr	r3, [pc, #264]	@ (800a71c <xTaskResumeAll+0x118>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <xTaskResumeAll+0x2e>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	603b      	str	r3, [r7, #0]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a632:	f001 f939 	bl	800b8a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a636:	4b39      	ldr	r3, [pc, #228]	@ (800a71c <xTaskResumeAll+0x118>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	4a37      	ldr	r2, [pc, #220]	@ (800a71c <xTaskResumeAll+0x118>)
 800a63e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a640:	4b36      	ldr	r3, [pc, #216]	@ (800a71c <xTaskResumeAll+0x118>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d162      	bne.n	800a70e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a648:	4b35      	ldr	r3, [pc, #212]	@ (800a720 <xTaskResumeAll+0x11c>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d05e      	beq.n	800a70e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a650:	e02f      	b.n	800a6b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a652:	4b34      	ldr	r3, [pc, #208]	@ (800a724 <xTaskResumeAll+0x120>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3318      	adds	r3, #24
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe ff32 	bl	80094c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	3304      	adds	r3, #4
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe ff2d 	bl	80094c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a672:	4b2d      	ldr	r3, [pc, #180]	@ (800a728 <xTaskResumeAll+0x124>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d903      	bls.n	800a682 <xTaskResumeAll+0x7e>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a67e:	4a2a      	ldr	r2, [pc, #168]	@ (800a728 <xTaskResumeAll+0x124>)
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4a27      	ldr	r2, [pc, #156]	@ (800a72c <xTaskResumeAll+0x128>)
 800a690:	441a      	add	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3304      	adds	r3, #4
 800a696:	4619      	mov	r1, r3
 800a698:	4610      	mov	r0, r2
 800a69a:	f7fe feb8 	bl	800940e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a2:	4b23      	ldr	r3, [pc, #140]	@ (800a730 <xTaskResumeAll+0x12c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d302      	bcc.n	800a6b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6ac:	4b21      	ldr	r3, [pc, #132]	@ (800a734 <xTaskResumeAll+0x130>)
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a724 <xTaskResumeAll+0x120>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1cb      	bne.n	800a652 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6c0:	f000 fb66 	bl	800ad90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a738 <xTaskResumeAll+0x134>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6d0:	f000 f846 	bl	800a760 <xTaskIncrementTick>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6da:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <xTaskResumeAll+0x130>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1f1      	bne.n	800a6d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a6ec:	4b12      	ldr	r3, [pc, #72]	@ (800a738 <xTaskResumeAll+0x134>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6f2:	4b10      	ldr	r3, [pc, #64]	@ (800a734 <xTaskResumeAll+0x130>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d009      	beq.n	800a70e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a73c <xTaskResumeAll+0x138>)
 800a700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a70e:	f001 f8fd 	bl	800b90c <vPortExitCritical>

	return xAlreadyYielded;
 800a712:	68bb      	ldr	r3, [r7, #8]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	200015d4 	.word	0x200015d4
 800a720:	200015ac 	.word	0x200015ac
 800a724:	2000156c 	.word	0x2000156c
 800a728:	200015b4 	.word	0x200015b4
 800a72c:	200010dc 	.word	0x200010dc
 800a730:	200010d8 	.word	0x200010d8
 800a734:	200015c0 	.word	0x200015c0
 800a738:	200015bc 	.word	0x200015bc
 800a73c:	e000ed04 	.word	0xe000ed04

0800a740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a746:	4b05      	ldr	r3, [pc, #20]	@ (800a75c <xTaskGetTickCount+0x1c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a74c:	687b      	ldr	r3, [r7, #4]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	200015b0 	.word	0x200015b0

0800a760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a766:	2300      	movs	r3, #0
 800a768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a76a:	4b4f      	ldr	r3, [pc, #316]	@ (800a8a8 <xTaskIncrementTick+0x148>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f040 8090 	bne.w	800a894 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a774:	4b4d      	ldr	r3, [pc, #308]	@ (800a8ac <xTaskIncrementTick+0x14c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3301      	adds	r3, #1
 800a77a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a77c:	4a4b      	ldr	r2, [pc, #300]	@ (800a8ac <xTaskIncrementTick+0x14c>)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d121      	bne.n	800a7cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a788:	4b49      	ldr	r3, [pc, #292]	@ (800a8b0 <xTaskIncrementTick+0x150>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	603b      	str	r3, [r7, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	e7fd      	b.n	800a7a6 <xTaskIncrementTick+0x46>
 800a7aa:	4b41      	ldr	r3, [pc, #260]	@ (800a8b0 <xTaskIncrementTick+0x150>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	4b40      	ldr	r3, [pc, #256]	@ (800a8b4 <xTaskIncrementTick+0x154>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8b0 <xTaskIncrementTick+0x150>)
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	4a3e      	ldr	r2, [pc, #248]	@ (800a8b4 <xTaskIncrementTick+0x154>)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b8 <xTaskIncrementTick+0x158>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a3c      	ldr	r2, [pc, #240]	@ (800a8b8 <xTaskIncrementTick+0x158>)
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f000 fae2 	bl	800ad90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7cc:	4b3b      	ldr	r3, [pc, #236]	@ (800a8bc <xTaskIncrementTick+0x15c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d349      	bcc.n	800a86a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d6:	4b36      	ldr	r3, [pc, #216]	@ (800a8b0 <xTaskIncrementTick+0x150>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e0:	4b36      	ldr	r3, [pc, #216]	@ (800a8bc <xTaskIncrementTick+0x15c>)
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e6:	601a      	str	r2, [r3, #0]
					break;
 800a7e8:	e03f      	b.n	800a86a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ea:	4b31      	ldr	r3, [pc, #196]	@ (800a8b0 <xTaskIncrementTick+0x150>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d203      	bcs.n	800a80a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a802:	4a2e      	ldr	r2, [pc, #184]	@ (800a8bc <xTaskIncrementTick+0x15c>)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a808:	e02f      	b.n	800a86a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fe5a 	bl	80094c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d004      	beq.n	800a826 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3318      	adds	r3, #24
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fe51 	bl	80094c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a82a:	4b25      	ldr	r3, [pc, #148]	@ (800a8c0 <xTaskIncrementTick+0x160>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d903      	bls.n	800a83a <xTaskIncrementTick+0xda>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a836:	4a22      	ldr	r2, [pc, #136]	@ (800a8c0 <xTaskIncrementTick+0x160>)
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a83e:	4613      	mov	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c4 <xTaskIncrementTick+0x164>)
 800a848:	441a      	add	r2, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4619      	mov	r1, r3
 800a850:	4610      	mov	r0, r2
 800a852:	f7fe fddc 	bl	800940e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a85a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <xTaskIncrementTick+0x168>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a860:	429a      	cmp	r2, r3
 800a862:	d3b8      	bcc.n	800a7d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a864:	2301      	movs	r3, #1
 800a866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a868:	e7b5      	b.n	800a7d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a86a:	4b17      	ldr	r3, [pc, #92]	@ (800a8c8 <xTaskIncrementTick+0x168>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a870:	4914      	ldr	r1, [pc, #80]	@ (800a8c4 <xTaskIncrementTick+0x164>)
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	440b      	add	r3, r1
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d901      	bls.n	800a886 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a882:	2301      	movs	r3, #1
 800a884:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a886:	4b11      	ldr	r3, [pc, #68]	@ (800a8cc <xTaskIncrementTick+0x16c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d007      	beq.n	800a89e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a88e:	2301      	movs	r3, #1
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	e004      	b.n	800a89e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a894:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <xTaskIncrementTick+0x170>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	4a0d      	ldr	r2, [pc, #52]	@ (800a8d0 <xTaskIncrementTick+0x170>)
 800a89c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a89e:	697b      	ldr	r3, [r7, #20]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200015d4 	.word	0x200015d4
 800a8ac:	200015b0 	.word	0x200015b0
 800a8b0:	20001564 	.word	0x20001564
 800a8b4:	20001568 	.word	0x20001568
 800a8b8:	200015c4 	.word	0x200015c4
 800a8bc:	200015cc 	.word	0x200015cc
 800a8c0:	200015b4 	.word	0x200015b4
 800a8c4:	200010dc 	.word	0x200010dc
 800a8c8:	200010d8 	.word	0x200010d8
 800a8cc:	200015c0 	.word	0x200015c0
 800a8d0:	200015bc 	.word	0x200015bc

0800a8d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8da:	4b2b      	ldr	r3, [pc, #172]	@ (800a988 <vTaskSwitchContext+0xb4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a98c <vTaskSwitchContext+0xb8>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8e8:	e047      	b.n	800a97a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a8ea:	4b28      	ldr	r3, [pc, #160]	@ (800a98c <vTaskSwitchContext+0xb8>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f0:	4b27      	ldr	r3, [pc, #156]	@ (800a990 <vTaskSwitchContext+0xbc>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	e011      	b.n	800a91c <vTaskSwitchContext+0x48>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <vTaskSwitchContext+0x42>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	607b      	str	r3, [r7, #4]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <vTaskSwitchContext+0x3e>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3b01      	subs	r3, #1
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	491d      	ldr	r1, [pc, #116]	@ (800a994 <vTaskSwitchContext+0xc0>)
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4613      	mov	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	440b      	add	r3, r1
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0e3      	beq.n	800a8f8 <vTaskSwitchContext+0x24>
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4a16      	ldr	r2, [pc, #88]	@ (800a994 <vTaskSwitchContext+0xc0>)
 800a93c:	4413      	add	r3, r2
 800a93e:	60bb      	str	r3, [r7, #8]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	3308      	adds	r3, #8
 800a952:	429a      	cmp	r2, r3
 800a954:	d104      	bne.n	800a960 <vTaskSwitchContext+0x8c>
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	605a      	str	r2, [r3, #4]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	4a0c      	ldr	r2, [pc, #48]	@ (800a998 <vTaskSwitchContext+0xc4>)
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	4a09      	ldr	r2, [pc, #36]	@ (800a990 <vTaskSwitchContext+0xbc>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a970:	4b09      	ldr	r3, [pc, #36]	@ (800a998 <vTaskSwitchContext+0xc4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3354      	adds	r3, #84	@ 0x54
 800a976:	4a09      	ldr	r2, [pc, #36]	@ (800a99c <vTaskSwitchContext+0xc8>)
 800a978:	6013      	str	r3, [r2, #0]
}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200015d4 	.word	0x200015d4
 800a98c:	200015c0 	.word	0x200015c0
 800a990:	200015b4 	.word	0x200015b4
 800a994:	200010dc 	.word	0x200010dc
 800a998:	200010d8 	.word	0x200010d8
 800a99c:	20000028 	.word	0x20000028

0800a9a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10b      	bne.n	800a9c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60fb      	str	r3, [r7, #12]
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	e7fd      	b.n	800a9c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <vTaskPlaceOnEventList+0x48>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3318      	adds	r3, #24
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7fe fd40 	bl	8009456 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	6838      	ldr	r0, [r7, #0]
 800a9da:	f000 fa87 	bl	800aeec <prvAddCurrentTaskToDelayedList>
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200010d8 	.word	0x200010d8

0800a9ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10b      	bne.n	800aa16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	617b      	str	r3, [r7, #20]
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	e7fd      	b.n	800aa12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa16:	4b0a      	ldr	r3, [pc, #40]	@ (800aa40 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3318      	adds	r3, #24
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7fe fcf5 	bl	800940e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	68b8      	ldr	r0, [r7, #8]
 800aa34:	f000 fa5a 	bl	800aeec <prvAddCurrentTaskToDelayedList>
	}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200010d8 	.word	0x200010d8

0800aa44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10b      	bne.n	800aa72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	60fb      	str	r3, [r7, #12]
}
 800aa6c:	bf00      	nop
 800aa6e:	bf00      	nop
 800aa70:	e7fd      	b.n	800aa6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3318      	adds	r3, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fd26 	bl	80094c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf4 <xTaskRemoveFromEventList+0xb0>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11d      	bne.n	800aac0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3304      	adds	r3, #4
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fd1d 	bl	80094c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa92:	4b19      	ldr	r3, [pc, #100]	@ (800aaf8 <xTaskRemoveFromEventList+0xb4>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d903      	bls.n	800aaa2 <xTaskRemoveFromEventList+0x5e>
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9e:	4a16      	ldr	r2, [pc, #88]	@ (800aaf8 <xTaskRemoveFromEventList+0xb4>)
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4a13      	ldr	r2, [pc, #76]	@ (800aafc <xTaskRemoveFromEventList+0xb8>)
 800aab0:	441a      	add	r2, r3
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f7fe fca8 	bl	800940e <vListInsertEnd>
 800aabe:	e005      	b.n	800aacc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3318      	adds	r3, #24
 800aac4:	4619      	mov	r1, r3
 800aac6:	480e      	ldr	r0, [pc, #56]	@ (800ab00 <xTaskRemoveFromEventList+0xbc>)
 800aac8:	f7fe fca1 	bl	800940e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab04 <xTaskRemoveFromEventList+0xc0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d905      	bls.n	800aae6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aada:	2301      	movs	r3, #1
 800aadc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aade:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <xTaskRemoveFromEventList+0xc4>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	e001      	b.n	800aaea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aaea:	697b      	ldr	r3, [r7, #20]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	200015d4 	.word	0x200015d4
 800aaf8:	200015b4 	.word	0x200015b4
 800aafc:	200010dc 	.word	0x200010dc
 800ab00:	2000156c 	.word	0x2000156c
 800ab04:	200010d8 	.word	0x200010d8
 800ab08:	200015c0 	.word	0x200015c0

0800ab0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab14:	4b06      	ldr	r3, [pc, #24]	@ (800ab30 <vTaskInternalSetTimeOutState+0x24>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab1c:	4b05      	ldr	r3, [pc, #20]	@ (800ab34 <vTaskInternalSetTimeOutState+0x28>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	605a      	str	r2, [r3, #4]
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	200015c4 	.word	0x200015c4
 800ab34:	200015b0 	.word	0x200015b0

0800ab38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10b      	bne.n	800ab60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	613b      	str	r3, [r7, #16]
}
 800ab5a:	bf00      	nop
 800ab5c:	bf00      	nop
 800ab5e:	e7fd      	b.n	800ab5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	60fb      	str	r3, [r7, #12]
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ab7e:	f000 fe93 	bl	800b8a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab82:	4b1d      	ldr	r3, [pc, #116]	@ (800abf8 <xTaskCheckForTimeOut+0xc0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	69ba      	ldr	r2, [r7, #24]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d102      	bne.n	800aba2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61fb      	str	r3, [r7, #28]
 800aba0:	e023      	b.n	800abea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	4b15      	ldr	r3, [pc, #84]	@ (800abfc <xTaskCheckForTimeOut+0xc4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d007      	beq.n	800abbe <xTaskCheckForTimeOut+0x86>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d302      	bcc.n	800abbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abb8:	2301      	movs	r3, #1
 800abba:	61fb      	str	r3, [r7, #28]
 800abbc:	e015      	b.n	800abea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d20b      	bcs.n	800abe0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff ff99 	bl	800ab0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
 800abde:	e004      	b.n	800abea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abe6:	2301      	movs	r3, #1
 800abe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abea:	f000 fe8f 	bl	800b90c <vPortExitCritical>

	return xReturn;
 800abee:	69fb      	ldr	r3, [r7, #28]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3720      	adds	r7, #32
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	200015b0 	.word	0x200015b0
 800abfc:	200015c4 	.word	0x200015c4

0800ac00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac04:	4b03      	ldr	r3, [pc, #12]	@ (800ac14 <vTaskMissedYield+0x14>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	601a      	str	r2, [r3, #0]
}
 800ac0a:	bf00      	nop
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	200015c0 	.word	0x200015c0

0800ac18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac20:	f000 f852 	bl	800acc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac24:	4b06      	ldr	r3, [pc, #24]	@ (800ac40 <prvIdleTask+0x28>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d9f9      	bls.n	800ac20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac2c:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <prvIdleTask+0x2c>)
 800ac2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac3c:	e7f0      	b.n	800ac20 <prvIdleTask+0x8>
 800ac3e:	bf00      	nop
 800ac40:	200010dc 	.word	0x200010dc
 800ac44:	e000ed04 	.word	0xe000ed04

0800ac48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
 800ac52:	e00c      	b.n	800ac6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4a12      	ldr	r2, [pc, #72]	@ (800aca8 <prvInitialiseTaskLists+0x60>)
 800ac60:	4413      	add	r3, r2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fba6 	bl	80093b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	607b      	str	r3, [r7, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b37      	cmp	r3, #55	@ 0x37
 800ac72:	d9ef      	bls.n	800ac54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac74:	480d      	ldr	r0, [pc, #52]	@ (800acac <prvInitialiseTaskLists+0x64>)
 800ac76:	f7fe fb9d 	bl	80093b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac7a:	480d      	ldr	r0, [pc, #52]	@ (800acb0 <prvInitialiseTaskLists+0x68>)
 800ac7c:	f7fe fb9a 	bl	80093b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac80:	480c      	ldr	r0, [pc, #48]	@ (800acb4 <prvInitialiseTaskLists+0x6c>)
 800ac82:	f7fe fb97 	bl	80093b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac86:	480c      	ldr	r0, [pc, #48]	@ (800acb8 <prvInitialiseTaskLists+0x70>)
 800ac88:	f7fe fb94 	bl	80093b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac8c:	480b      	ldr	r0, [pc, #44]	@ (800acbc <prvInitialiseTaskLists+0x74>)
 800ac8e:	f7fe fb91 	bl	80093b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac92:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <prvInitialiseTaskLists+0x78>)
 800ac94:	4a05      	ldr	r2, [pc, #20]	@ (800acac <prvInitialiseTaskLists+0x64>)
 800ac96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac98:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <prvInitialiseTaskLists+0x7c>)
 800ac9a:	4a05      	ldr	r2, [pc, #20]	@ (800acb0 <prvInitialiseTaskLists+0x68>)
 800ac9c:	601a      	str	r2, [r3, #0]
}
 800ac9e:	bf00      	nop
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200010dc 	.word	0x200010dc
 800acac:	2000153c 	.word	0x2000153c
 800acb0:	20001550 	.word	0x20001550
 800acb4:	2000156c 	.word	0x2000156c
 800acb8:	20001580 	.word	0x20001580
 800acbc:	20001598 	.word	0x20001598
 800acc0:	20001564 	.word	0x20001564
 800acc4:	20001568 	.word	0x20001568

0800acc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acce:	e019      	b.n	800ad04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acd0:	f000 fdea 	bl	800b8a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd4:	4b10      	ldr	r3, [pc, #64]	@ (800ad18 <prvCheckTasksWaitingTermination+0x50>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3304      	adds	r3, #4
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fbf1 	bl	80094c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ace6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <prvCheckTasksWaitingTermination+0x54>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3b01      	subs	r3, #1
 800acec:	4a0b      	ldr	r2, [pc, #44]	@ (800ad1c <prvCheckTasksWaitingTermination+0x54>)
 800acee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ad20 <prvCheckTasksWaitingTermination+0x58>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ad20 <prvCheckTasksWaitingTermination+0x58>)
 800acf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acfa:	f000 fe07 	bl	800b90c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f810 	bl	800ad24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad04:	4b06      	ldr	r3, [pc, #24]	@ (800ad20 <prvCheckTasksWaitingTermination+0x58>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e1      	bne.n	800acd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad0c:	bf00      	nop
 800ad0e:	bf00      	nop
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20001580 	.word	0x20001580
 800ad1c:	200015ac 	.word	0x200015ac
 800ad20:	20001594 	.word	0x20001594

0800ad24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3354      	adds	r3, #84	@ 0x54
 800ad30:	4618      	mov	r0, r3
 800ad32:	f001 fe63 	bl	800c9fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d108      	bne.n	800ad52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 ff9f 	bl	800bc88 <vPortFree>
				vPortFree( pxTCB );
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 ff9c 	bl	800bc88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad50:	e019      	b.n	800ad86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d103      	bne.n	800ad64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 ff93 	bl	800bc88 <vPortFree>
	}
 800ad62:	e010      	b.n	800ad86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d00b      	beq.n	800ad86 <prvDeleteTCB+0x62>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <prvDeleteTCB+0x5e>
	}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad96:	4b0c      	ldr	r3, [pc, #48]	@ (800adc8 <prvResetNextTaskUnblockTime+0x38>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ada0:	4b0a      	ldr	r3, [pc, #40]	@ (800adcc <prvResetNextTaskUnblockTime+0x3c>)
 800ada2:	f04f 32ff 	mov.w	r2, #4294967295
 800ada6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ada8:	e008      	b.n	800adbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adaa:	4b07      	ldr	r3, [pc, #28]	@ (800adc8 <prvResetNextTaskUnblockTime+0x38>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	4a04      	ldr	r2, [pc, #16]	@ (800adcc <prvResetNextTaskUnblockTime+0x3c>)
 800adba:	6013      	str	r3, [r2, #0]
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	20001564 	.word	0x20001564
 800adcc:	200015cc 	.word	0x200015cc

0800add0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800add6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae04 <xTaskGetSchedulerState+0x34>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adde:	2301      	movs	r3, #1
 800ade0:	607b      	str	r3, [r7, #4]
 800ade2:	e008      	b.n	800adf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade4:	4b08      	ldr	r3, [pc, #32]	@ (800ae08 <xTaskGetSchedulerState+0x38>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adec:	2302      	movs	r3, #2
 800adee:	607b      	str	r3, [r7, #4]
 800adf0:	e001      	b.n	800adf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adf2:	2300      	movs	r3, #0
 800adf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adf6:	687b      	ldr	r3, [r7, #4]
	}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	200015b8 	.word	0x200015b8
 800ae08:	200015d4 	.word	0x200015d4

0800ae0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d058      	beq.n	800aed4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae22:	4b2f      	ldr	r3, [pc, #188]	@ (800aee0 <xTaskPriorityDisinherit+0xd4>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d00b      	beq.n	800ae44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	60fb      	str	r3, [r7, #12]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60bb      	str	r3, [r7, #8]
}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	e7fd      	b.n	800ae60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae68:	1e5a      	subs	r2, r3, #1
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d02c      	beq.n	800aed4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d128      	bne.n	800aed4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe fb1e 	bl	80094c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea4:	4b0f      	ldr	r3, [pc, #60]	@ (800aee4 <xTaskPriorityDisinherit+0xd8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d903      	bls.n	800aeb4 <xTaskPriorityDisinherit+0xa8>
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb0:	4a0c      	ldr	r2, [pc, #48]	@ (800aee4 <xTaskPriorityDisinherit+0xd8>)
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeb8:	4613      	mov	r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4a09      	ldr	r2, [pc, #36]	@ (800aee8 <xTaskPriorityDisinherit+0xdc>)
 800aec2:	441a      	add	r2, r3
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	3304      	adds	r3, #4
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f7fe fa9f 	bl	800940e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aed0:	2301      	movs	r3, #1
 800aed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aed4:	697b      	ldr	r3, [r7, #20]
	}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	200010d8 	.word	0x200010d8
 800aee4:	200015b4 	.word	0x200015b4
 800aee8:	200010dc 	.word	0x200010dc

0800aeec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aef6:	4b21      	ldr	r3, [pc, #132]	@ (800af7c <prvAddCurrentTaskToDelayedList+0x90>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aefc:	4b20      	ldr	r3, [pc, #128]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3304      	adds	r3, #4
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe fae0 	bl	80094c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d10a      	bne.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af16:	4b1a      	ldr	r3, [pc, #104]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3304      	adds	r3, #4
 800af1c:	4619      	mov	r1, r3
 800af1e:	4819      	ldr	r0, [pc, #100]	@ (800af84 <prvAddCurrentTaskToDelayedList+0x98>)
 800af20:	f7fe fa75 	bl	800940e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af24:	e026      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af2e:	4b14      	ldr	r3, [pc, #80]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d209      	bcs.n	800af52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af3e:	4b12      	ldr	r3, [pc, #72]	@ (800af88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fe fa83 	bl	8009456 <vListInsert>
}
 800af50:	e010      	b.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af52:	4b0e      	ldr	r3, [pc, #56]	@ (800af8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <prvAddCurrentTaskToDelayedList+0x94>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3304      	adds	r3, #4
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7fe fa79 	bl	8009456 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af64:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d202      	bcs.n	800af74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af6e:	4a08      	ldr	r2, [pc, #32]	@ (800af90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6013      	str	r3, [r2, #0]
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	200015b0 	.word	0x200015b0
 800af80:	200010d8 	.word	0x200010d8
 800af84:	20001598 	.word	0x20001598
 800af88:	20001568 	.word	0x20001568
 800af8c:	20001564 	.word	0x20001564
 800af90:	200015cc 	.word	0x200015cc

0800af94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08a      	sub	sp, #40	@ 0x28
 800af98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af9e:	f000 fb13 	bl	800b5c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afa2:	4b1d      	ldr	r3, [pc, #116]	@ (800b018 <xTimerCreateTimerTask+0x84>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d021      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afb2:	1d3a      	adds	r2, r7, #4
 800afb4:	f107 0108 	add.w	r1, r7, #8
 800afb8:	f107 030c 	add.w	r3, r7, #12
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe f9df 	bl	8009380 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	9202      	str	r2, [sp, #8]
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	2302      	movs	r3, #2
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2300      	movs	r3, #0
 800afd2:	460a      	mov	r2, r1
 800afd4:	4911      	ldr	r1, [pc, #68]	@ (800b01c <xTimerCreateTimerTask+0x88>)
 800afd6:	4812      	ldr	r0, [pc, #72]	@ (800b020 <xTimerCreateTimerTask+0x8c>)
 800afd8:	f7fe ff9a 	bl	8009f10 <xTaskCreateStatic>
 800afdc:	4603      	mov	r3, r0
 800afde:	4a11      	ldr	r2, [pc, #68]	@ (800b024 <xTimerCreateTimerTask+0x90>)
 800afe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afe2:	4b10      	ldr	r3, [pc, #64]	@ (800b024 <xTimerCreateTimerTask+0x90>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afea:	2301      	movs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10b      	bne.n	800b00c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	613b      	str	r3, [r7, #16]
}
 800b006:	bf00      	nop
 800b008:	bf00      	nop
 800b00a:	e7fd      	b.n	800b008 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b00c:	697b      	ldr	r3, [r7, #20]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001608 	.word	0x20001608
 800b01c:	0800ece4 	.word	0x0800ece4
 800b020:	0800b161 	.word	0x0800b161
 800b024:	2000160c 	.word	0x2000160c

0800b028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	@ 0x28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b036:	2300      	movs	r3, #0
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10b      	bne.n	800b058 <xTimerGenericCommand+0x30>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	623b      	str	r3, [r7, #32]
}
 800b052:	bf00      	nop
 800b054:	bf00      	nop
 800b056:	e7fd      	b.n	800b054 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b058:	4b19      	ldr	r3, [pc, #100]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d02a      	beq.n	800b0b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b05      	cmp	r3, #5
 800b070:	dc18      	bgt.n	800b0a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b072:	f7ff fead 	bl	800add0 <xTaskGetSchedulerState>
 800b076:	4603      	mov	r3, r0
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d109      	bne.n	800b090 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b07c:	4b10      	ldr	r3, [pc, #64]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	f107 0110 	add.w	r1, r7, #16
 800b084:	2300      	movs	r3, #0
 800b086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b088:	f7fe fb52 	bl	8009730 <xQueueGenericSend>
 800b08c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b08e:	e012      	b.n	800b0b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b090:	4b0b      	ldr	r3, [pc, #44]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b092:	6818      	ldr	r0, [r3, #0]
 800b094:	f107 0110 	add.w	r1, r7, #16
 800b098:	2300      	movs	r3, #0
 800b09a:	2200      	movs	r2, #0
 800b09c:	f7fe fb48 	bl	8009730 <xQueueGenericSend>
 800b0a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0a2:	e008      	b.n	800b0b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0a4:	4b06      	ldr	r3, [pc, #24]	@ (800b0c0 <xTimerGenericCommand+0x98>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	f107 0110 	add.w	r1, r7, #16
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	683a      	ldr	r2, [r7, #0]
 800b0b0:	f7fe fc40 	bl	8009934 <xQueueGenericSendFromISR>
 800b0b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3728      	adds	r7, #40	@ 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20001608 	.word	0x20001608

0800b0c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af02      	add	r7, sp, #8
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ce:	4b23      	ldr	r3, [pc, #140]	@ (800b15c <prvProcessExpiredTimer+0x98>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fe f9f3 	bl	80094c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d023      	beq.n	800b138 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	699a      	ldr	r2, [r3, #24]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	18d1      	adds	r1, r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	6978      	ldr	r0, [r7, #20]
 800b0fe:	f000 f8d5 	bl	800b2ac <prvInsertTimerInActiveList>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d020      	beq.n	800b14a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b108:	2300      	movs	r3, #0
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	2100      	movs	r1, #0
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	f7ff ff88 	bl	800b028 <xTimerGenericCommand>
 800b118:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d114      	bne.n	800b14a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	b2da      	uxtb	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	6978      	ldr	r0, [r7, #20]
 800b150:	4798      	blx	r3
}
 800b152:	bf00      	nop
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20001600 	.word	0x20001600

0800b160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f859 	bl	800b224 <prvGetNextExpireTime>
 800b172:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	4619      	mov	r1, r3
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 f805 	bl	800b188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b17e:	f000 f8d7 	bl	800b330 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b182:	bf00      	nop
 800b184:	e7f0      	b.n	800b168 <prvTimerTask+0x8>
	...

0800b188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b192:	f7ff fa29 	bl	800a5e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b196:	f107 0308 	add.w	r3, r7, #8
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f866 	bl	800b26c <prvSampleTimeNow>
 800b1a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d130      	bne.n	800b20a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <prvProcessTimerOrBlockTask+0x3c>
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d806      	bhi.n	800b1c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1b6:	f7ff fa25 	bl	800a604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff ff81 	bl	800b0c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1c2:	e024      	b.n	800b20e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1ca:	4b13      	ldr	r3, [pc, #76]	@ (800b218 <prvProcessTimerOrBlockTask+0x90>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <prvProcessTimerOrBlockTask+0x50>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <prvProcessTimerOrBlockTask+0x52>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b21c <prvProcessTimerOrBlockTask+0x94>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	f7fe fe5d 	bl	8009ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1ee:	f7ff fa09 	bl	800a604 <xTaskResumeAll>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d10a      	bne.n	800b20e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1f8:	4b09      	ldr	r3, [pc, #36]	@ (800b220 <prvProcessTimerOrBlockTask+0x98>)
 800b1fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	f3bf 8f6f 	isb	sy
}
 800b208:	e001      	b.n	800b20e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b20a:	f7ff f9fb 	bl	800a604 <xTaskResumeAll>
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20001604 	.word	0x20001604
 800b21c:	20001608 	.word	0x20001608
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b22c:	4b0e      	ldr	r3, [pc, #56]	@ (800b268 <prvGetNextExpireTime+0x44>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <prvGetNextExpireTime+0x16>
 800b236:	2201      	movs	r2, #1
 800b238:	e000      	b.n	800b23c <prvGetNextExpireTime+0x18>
 800b23a:	2200      	movs	r2, #0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b248:	4b07      	ldr	r3, [pc, #28]	@ (800b268 <prvGetNextExpireTime+0x44>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	e001      	b.n	800b258 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b258:	68fb      	ldr	r3, [r7, #12]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20001600 	.word	0x20001600

0800b26c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b274:	f7ff fa64 	bl	800a740 <xTaskGetTickCount>
 800b278:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b27a:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a8 <prvSampleTimeNow+0x3c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	429a      	cmp	r2, r3
 800b282:	d205      	bcs.n	800b290 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b284:	f000 f93a 	bl	800b4fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	e002      	b.n	800b296 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b296:	4a04      	ldr	r2, [pc, #16]	@ (800b2a8 <prvSampleTimeNow+0x3c>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b29c:	68fb      	ldr	r3, [r7, #12]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20001610 	.word	0x20001610

0800b2ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d812      	bhi.n	800b2f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d302      	bcc.n	800b2e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	e01b      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2e6:	4b10      	ldr	r3, [pc, #64]	@ (800b328 <prvInsertTimerInActiveList+0x7c>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fe f8b0 	bl	8009456 <vListInsert>
 800b2f6:	e012      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d206      	bcs.n	800b30e <prvInsertTimerInActiveList+0x62>
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d302      	bcc.n	800b30e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e007      	b.n	800b31e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b30e:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <prvInsertTimerInActiveList+0x80>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7fe f89c 	bl	8009456 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b31e:	697b      	ldr	r3, [r7, #20]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20001604 	.word	0x20001604
 800b32c:	20001600 	.word	0x20001600

0800b330 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08e      	sub	sp, #56	@ 0x38
 800b334:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b336:	e0ce      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	da19      	bge.n	800b372 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b33e:	1d3b      	adds	r3, r7, #4
 800b340:	3304      	adds	r3, #4
 800b342:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	61fb      	str	r3, [r7, #28]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b368:	6850      	ldr	r0, [r2, #4]
 800b36a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b36c:	6892      	ldr	r2, [r2, #8]
 800b36e:	4611      	mov	r1, r2
 800b370:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	f2c0 80ae 	blt.w	800b4d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	3304      	adds	r3, #4
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe f89c 	bl	80094c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b390:	463b      	mov	r3, r7
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff ff6a 	bl	800b26c <prvSampleTimeNow>
 800b398:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b09      	cmp	r3, #9
 800b39e:	f200 8097 	bhi.w	800b4d0 <prvProcessReceivedCommands+0x1a0>
 800b3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a8 <prvProcessReceivedCommands+0x78>)
 800b3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d1 	.word	0x0800b3d1
 800b3b0:	0800b3d1 	.word	0x0800b3d1
 800b3b4:	0800b447 	.word	0x0800b447
 800b3b8:	0800b45b 	.word	0x0800b45b
 800b3bc:	0800b4a7 	.word	0x0800b4a7
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3d1 	.word	0x0800b3d1
 800b3c8:	0800b447 	.word	0x0800b447
 800b3cc:	0800b45b 	.word	0x0800b45b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d6:	f043 0301 	orr.w	r3, r3, #1
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	18d1      	adds	r1, r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3f0:	f7ff ff5c 	bl	800b2ac <prvInsertTimerInActiveList>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d06c      	beq.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d061      	beq.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	441a      	add	r2, r3
 800b418:	2300      	movs	r3, #0
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	2300      	movs	r3, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b422:	f7ff fe01 	bl	800b028 <xTimerGenericCommand>
 800b426:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d152      	bne.n	800b4d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	61bb      	str	r3, [r7, #24]
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	e7fd      	b.n	800b442 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b44c:	f023 0301 	bic.w	r3, r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b458:	e03d      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b460:	f043 0301 	orr.w	r3, r3, #1
 800b464:	b2da      	uxtb	r2, r3
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	617b      	str	r3, [r7, #20]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	699a      	ldr	r2, [r3, #24]
 800b496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b498:	18d1      	adds	r1, r2, r3
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b49e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a0:	f7ff ff04 	bl	800b2ac <prvInsertTimerInActiveList>
					break;
 800b4a4:	e017      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4ac:	f003 0302 	and.w	r3, r3, #2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4b6:	f000 fbe7 	bl	800bc88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4ba:	e00c      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4c2:	f023 0301 	bic.w	r3, r3, #1
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4ce:	e002      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b4d0:	bf00      	nop
 800b4d2:	e000      	b.n	800b4d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b4d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4d6:	4b08      	ldr	r3, [pc, #32]	@ (800b4f8 <prvProcessReceivedCommands+0x1c8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	1d39      	adds	r1, r7, #4
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7fe fac6 	bl	8009a70 <xQueueReceive>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f47f af26 	bne.w	800b338 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	3730      	adds	r7, #48	@ 0x30
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001608 	.word	0x20001608

0800b4fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b502:	e049      	b.n	800b598 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b504:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50e:	4b2c      	ldr	r3, [pc, #176]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fd ffd3 	bl	80094c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b530:	f003 0304 	and.w	r3, r3, #4
 800b534:	2b00      	cmp	r3, #0
 800b536:	d02f      	beq.n	800b598 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4413      	add	r3, r2
 800b540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	429a      	cmp	r2, r3
 800b548:	d90e      	bls.n	800b568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b556:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3304      	adds	r3, #4
 800b55e:	4619      	mov	r1, r3
 800b560:	4610      	mov	r0, r2
 800b562:	f7fd ff78 	bl	8009456 <vListInsert>
 800b566:	e017      	b.n	800b598 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b568:	2300      	movs	r3, #0
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2300      	movs	r3, #0
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	2100      	movs	r1, #0
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fd58 	bl	800b028 <xTimerGenericCommand>
 800b578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10b      	bne.n	800b598 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	603b      	str	r3, [r7, #0]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b598:	4b09      	ldr	r3, [pc, #36]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1b0      	bne.n	800b504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5a2:	4b07      	ldr	r3, [pc, #28]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5a8:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <prvSwitchTimerLists+0xc8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a04      	ldr	r2, [pc, #16]	@ (800b5c0 <prvSwitchTimerLists+0xc4>)
 800b5ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5b0:	4a04      	ldr	r2, [pc, #16]	@ (800b5c4 <prvSwitchTimerLists+0xc8>)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	6013      	str	r3, [r2, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20001600 	.word	0x20001600
 800b5c4:	20001604 	.word	0x20001604

0800b5c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5ce:	f000 f96b 	bl	800b8a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5d2:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d120      	bne.n	800b61c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5da:	4814      	ldr	r0, [pc, #80]	@ (800b62c <prvCheckForValidListAndQueue+0x64>)
 800b5dc:	f7fd feea 	bl	80093b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5e0:	4813      	ldr	r0, [pc, #76]	@ (800b630 <prvCheckForValidListAndQueue+0x68>)
 800b5e2:	f7fd fee7 	bl	80093b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5e6:	4b13      	ldr	r3, [pc, #76]	@ (800b634 <prvCheckForValidListAndQueue+0x6c>)
 800b5e8:	4a10      	ldr	r2, [pc, #64]	@ (800b62c <prvCheckForValidListAndQueue+0x64>)
 800b5ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5ec:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <prvCheckForValidListAndQueue+0x70>)
 800b5ee:	4a10      	ldr	r2, [pc, #64]	@ (800b630 <prvCheckForValidListAndQueue+0x68>)
 800b5f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4b11      	ldr	r3, [pc, #68]	@ (800b63c <prvCheckForValidListAndQueue+0x74>)
 800b5f8:	4a11      	ldr	r2, [pc, #68]	@ (800b640 <prvCheckForValidListAndQueue+0x78>)
 800b5fa:	2110      	movs	r1, #16
 800b5fc:	200a      	movs	r0, #10
 800b5fe:	f7fd fff7 	bl	80095f0 <xQueueGenericCreateStatic>
 800b602:	4603      	mov	r3, r0
 800b604:	4a08      	ldr	r2, [pc, #32]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b606:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b610:	4b05      	ldr	r3, [pc, #20]	@ (800b628 <prvCheckForValidListAndQueue+0x60>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	490b      	ldr	r1, [pc, #44]	@ (800b644 <prvCheckForValidListAndQueue+0x7c>)
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe fc1c 	bl	8009e54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b61c:	f000 f976 	bl	800b90c <vPortExitCritical>
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20001608 	.word	0x20001608
 800b62c:	200015d8 	.word	0x200015d8
 800b630:	200015ec 	.word	0x200015ec
 800b634:	20001600 	.word	0x20001600
 800b638:	20001604 	.word	0x20001604
 800b63c:	200016b4 	.word	0x200016b4
 800b640:	20001614 	.word	0x20001614
 800b644:	0800ecec 	.word	0x0800ecec

0800b648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	3b04      	subs	r3, #4
 800b658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3b04      	subs	r3, #4
 800b666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f023 0201 	bic.w	r2, r3, #1
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3b04      	subs	r3, #4
 800b676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b678:	4a0c      	ldr	r2, [pc, #48]	@ (800b6ac <pxPortInitialiseStack+0x64>)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3b14      	subs	r3, #20
 800b682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3b04      	subs	r3, #4
 800b68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f06f 0202 	mvn.w	r2, #2
 800b696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3b20      	subs	r3, #32
 800b69c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	0800b6b1 	.word	0x0800b6b1

0800b6b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6ba:	4b13      	ldr	r3, [pc, #76]	@ (800b708 <prvTaskExitError+0x58>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d00b      	beq.n	800b6dc <prvTaskExitError+0x2c>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60fb      	str	r3, [r7, #12]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <prvTaskExitError+0x28>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	60bb      	str	r3, [r7, #8]
}
 800b6ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6f0:	bf00      	nop
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0fc      	beq.n	800b6f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20000018 	.word	0x20000018
 800b70c:	00000000 	.word	0x00000000

0800b710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b710:	4b07      	ldr	r3, [pc, #28]	@ (800b730 <pxCurrentTCBConst2>)
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	6808      	ldr	r0, [r1, #0]
 800b716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	f380 8809 	msr	PSP, r0
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8811 	msr	BASEPRI, r0
 800b72a:	4770      	bx	lr
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst2>:
 800b730:	200010d8 	.word	0x200010d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b738:	4808      	ldr	r0, [pc, #32]	@ (800b75c <prvPortStartFirstTask+0x24>)
 800b73a:	6800      	ldr	r0, [r0, #0]
 800b73c:	6800      	ldr	r0, [r0, #0]
 800b73e:	f380 8808 	msr	MSP, r0
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8814 	msr	CONTROL, r0
 800b74a:	b662      	cpsie	i
 800b74c:	b661      	cpsie	f
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	df00      	svc	0
 800b758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b75a:	bf00      	nop
 800b75c:	e000ed08 	.word	0xe000ed08

0800b760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b766:	4b47      	ldr	r3, [pc, #284]	@ (800b884 <xPortStartScheduler+0x124>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a47      	ldr	r2, [pc, #284]	@ (800b888 <xPortStartScheduler+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d10b      	bne.n	800b788 <xPortStartScheduler+0x28>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	613b      	str	r3, [r7, #16]
}
 800b782:	bf00      	nop
 800b784:	bf00      	nop
 800b786:	e7fd      	b.n	800b784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b788:	4b3e      	ldr	r3, [pc, #248]	@ (800b884 <xPortStartScheduler+0x124>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a3f      	ldr	r2, [pc, #252]	@ (800b88c <xPortStartScheduler+0x12c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d10b      	bne.n	800b7aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	60fb      	str	r3, [r7, #12]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7aa:	4b39      	ldr	r3, [pc, #228]	@ (800b890 <xPortStartScheduler+0x130>)
 800b7ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	22ff      	movs	r2, #255	@ 0xff
 800b7ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	4b31      	ldr	r3, [pc, #196]	@ (800b894 <xPortStartScheduler+0x134>)
 800b7d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7d2:	4b31      	ldr	r3, [pc, #196]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7d4:	2207      	movs	r2, #7
 800b7d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7d8:	e009      	b.n	800b7ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b7da:	4b2f      	ldr	r3, [pc, #188]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7f6:	2b80      	cmp	r3, #128	@ 0x80
 800b7f8:	d0ef      	beq.n	800b7da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7fa:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <xPortStartScheduler+0x138>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f1c3 0307 	rsb	r3, r3, #7
 800b802:	2b04      	cmp	r3, #4
 800b804:	d00b      	beq.n	800b81e <xPortStartScheduler+0xbe>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60bb      	str	r3, [r7, #8]
}
 800b818:	bf00      	nop
 800b81a:	bf00      	nop
 800b81c:	e7fd      	b.n	800b81a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b81e:	4b1e      	ldr	r3, [pc, #120]	@ (800b898 <xPortStartScheduler+0x138>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	4a1c      	ldr	r2, [pc, #112]	@ (800b898 <xPortStartScheduler+0x138>)
 800b826:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b828:	4b1b      	ldr	r3, [pc, #108]	@ (800b898 <xPortStartScheduler+0x138>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b830:	4a19      	ldr	r2, [pc, #100]	@ (800b898 <xPortStartScheduler+0x138>)
 800b832:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	b2da      	uxtb	r2, r3
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b83c:	4b17      	ldr	r3, [pc, #92]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a16      	ldr	r2, [pc, #88]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b842:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b848:	4b14      	ldr	r3, [pc, #80]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a13      	ldr	r2, [pc, #76]	@ (800b89c <xPortStartScheduler+0x13c>)
 800b84e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b852:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b854:	f000 f8da 	bl	800ba0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b858:	4b11      	ldr	r3, [pc, #68]	@ (800b8a0 <xPortStartScheduler+0x140>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b85e:	f000 f8f9 	bl	800ba54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b862:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <xPortStartScheduler+0x144>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a0f      	ldr	r2, [pc, #60]	@ (800b8a4 <xPortStartScheduler+0x144>)
 800b868:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b86c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b86e:	f7ff ff63 	bl	800b738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b872:	f7ff f82f 	bl	800a8d4 <vTaskSwitchContext>
	prvTaskExitError();
 800b876:	f7ff ff1b 	bl	800b6b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	e000ed00 	.word	0xe000ed00
 800b888:	410fc271 	.word	0x410fc271
 800b88c:	410fc270 	.word	0x410fc270
 800b890:	e000e400 	.word	0xe000e400
 800b894:	20001704 	.word	0x20001704
 800b898:	20001708 	.word	0x20001708
 800b89c:	e000ed20 	.word	0xe000ed20
 800b8a0:	20000018 	.word	0x20000018
 800b8a4:	e000ef34 	.word	0xe000ef34

0800b8a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8c2:	4b10      	ldr	r3, [pc, #64]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <vPortEnterCritical+0x5c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d110      	bne.n	800b8f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <vPortEnterCritical+0x60>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	603b      	str	r3, [r7, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <vPortEnterCritical+0x4a>
	}
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20000018 	.word	0x20000018
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b912:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <vPortExitCritical+0x50>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10b      	bne.n	800b932 <vPortExitCritical+0x26>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	607b      	str	r3, [r7, #4]
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	e7fd      	b.n	800b92e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b932:	4b0a      	ldr	r3, [pc, #40]	@ (800b95c <vPortExitCritical+0x50>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3b01      	subs	r3, #1
 800b938:	4a08      	ldr	r2, [pc, #32]	@ (800b95c <vPortExitCritical+0x50>)
 800b93a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b93c:	4b07      	ldr	r3, [pc, #28]	@ (800b95c <vPortExitCritical+0x50>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d105      	bne.n	800b950 <vPortExitCritical+0x44>
 800b944:	2300      	movs	r3, #0
 800b946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	f383 8811 	msr	BASEPRI, r3
}
 800b94e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	20000018 	.word	0x20000018

0800b960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b960:	f3ef 8009 	mrs	r0, PSP
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <pxCurrentTCBConst>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	f01e 0f10 	tst.w	lr, #16
 800b970:	bf08      	it	eq
 800b972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97a:	6010      	str	r0, [r2, #0]
 800b97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b984:	f380 8811 	msr	BASEPRI, r0
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f7fe ffa0 	bl	800a8d4 <vTaskSwitchContext>
 800b994:	f04f 0000 	mov.w	r0, #0
 800b998:	f380 8811 	msr	BASEPRI, r0
 800b99c:	bc09      	pop	{r0, r3}
 800b99e:	6819      	ldr	r1, [r3, #0]
 800b9a0:	6808      	ldr	r0, [r1, #0]
 800b9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a6:	f01e 0f10 	tst.w	lr, #16
 800b9aa:	bf08      	it	eq
 800b9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9b0:	f380 8809 	msr	PSP, r0
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w

0800b9c0 <pxCurrentTCBConst>:
 800b9c0:	200010d8 	.word	0x200010d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop

0800b9c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9e2:	f7fe febd 	bl	800a760 <xTaskIncrementTick>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ba08 <xPortSysTickHandler+0x40>)
 800b9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	f383 8811 	msr	BASEPRI, r3
}
 800b9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba00:	bf00      	nop
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba10:	4b0b      	ldr	r3, [pc, #44]	@ (800ba40 <vPortSetupTimerInterrupt+0x34>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <vPortSetupTimerInterrupt+0x38>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <vPortSetupTimerInterrupt+0x3c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	@ (800ba4c <vPortSetupTimerInterrupt+0x40>)
 800ba22:	fba2 2303 	umull	r2, r3, r2, r3
 800ba26:	099b      	lsrs	r3, r3, #6
 800ba28:	4a09      	ldr	r2, [pc, #36]	@ (800ba50 <vPortSetupTimerInterrupt+0x44>)
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba2e:	4b04      	ldr	r3, [pc, #16]	@ (800ba40 <vPortSetupTimerInterrupt+0x34>)
 800ba30:	2207      	movs	r2, #7
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	e000e010 	.word	0xe000e010
 800ba44:	e000e018 	.word	0xe000e018
 800ba48:	2000000c 	.word	0x2000000c
 800ba4c:	10624dd3 	.word	0x10624dd3
 800ba50:	e000e014 	.word	0xe000e014

0800ba54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba64 <vPortEnableVFP+0x10>
 800ba58:	6801      	ldr	r1, [r0, #0]
 800ba5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba5e:	6001      	str	r1, [r0, #0]
 800ba60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba62:	bf00      	nop
 800ba64:	e000ed88 	.word	0xe000ed88

0800ba68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba6e:	f3ef 8305 	mrs	r3, IPSR
 800ba72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b0f      	cmp	r3, #15
 800ba78:	d915      	bls.n	800baa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba7a:	4a18      	ldr	r2, [pc, #96]	@ (800badc <vPortValidateInterruptPriority+0x74>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba84:	4b16      	ldr	r3, [pc, #88]	@ (800bae0 <vPortValidateInterruptPriority+0x78>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	7afa      	ldrb	r2, [r7, #11]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d20b      	bcs.n	800baa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800baa6:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <vPortValidateInterruptPriority+0x7c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800baae:	4b0e      	ldr	r3, [pc, #56]	@ (800bae8 <vPortValidateInterruptPriority+0x80>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d90b      	bls.n	800bace <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	603b      	str	r3, [r7, #0]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <vPortValidateInterruptPriority+0x62>
	}
 800bace:	bf00      	nop
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	e000e3f0 	.word	0xe000e3f0
 800bae0:	20001704 	.word	0x20001704
 800bae4:	e000ed0c 	.word	0xe000ed0c
 800bae8:	20001708 	.word	0x20001708

0800baec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08a      	sub	sp, #40	@ 0x28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800baf8:	f7fe fd76 	bl	800a5e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bafc:	4b5c      	ldr	r3, [pc, #368]	@ (800bc70 <pvPortMalloc+0x184>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb04:	f000 f924 	bl	800bd50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb08:	4b5a      	ldr	r3, [pc, #360]	@ (800bc74 <pvPortMalloc+0x188>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 8095 	bne.w	800bc40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01e      	beq.n	800bb5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4413      	add	r3, r2
 800bb22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f003 0307 	and.w	r3, r3, #7
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d015      	beq.n	800bb5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f023 0307 	bic.w	r3, r3, #7
 800bb34:	3308      	adds	r3, #8
 800bb36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00b      	beq.n	800bb5a <pvPortMalloc+0x6e>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	617b      	str	r3, [r7, #20]
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	e7fd      	b.n	800bb56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d06f      	beq.n	800bc40 <pvPortMalloc+0x154>
 800bb60:	4b45      	ldr	r3, [pc, #276]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d86a      	bhi.n	800bc40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb6a:	4b44      	ldr	r3, [pc, #272]	@ (800bc7c <pvPortMalloc+0x190>)
 800bb6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb6e:	4b43      	ldr	r3, [pc, #268]	@ (800bc7c <pvPortMalloc+0x190>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb74:	e004      	b.n	800bb80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d903      	bls.n	800bb92 <pvPortMalloc+0xa6>
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1f1      	bne.n	800bb76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb92:	4b37      	ldr	r3, [pc, #220]	@ (800bc70 <pvPortMalloc+0x184>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d051      	beq.n	800bc40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2208      	movs	r2, #8
 800bba2:	4413      	add	r3, r2
 800bba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	2308      	movs	r3, #8
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d920      	bls.n	800bc00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	f003 0307 	and.w	r3, r3, #7
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <pvPortMalloc+0xfc>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	613b      	str	r3, [r7, #16]
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	e7fd      	b.n	800bbe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbfa:	69b8      	ldr	r0, [r7, #24]
 800bbfc:	f000 f90a 	bl	800be14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc00:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b1b      	ldr	r3, [pc, #108]	@ (800bc80 <pvPortMalloc+0x194>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d203      	bcs.n	800bc22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc1a:	4b17      	ldr	r3, [pc, #92]	@ (800bc78 <pvPortMalloc+0x18c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a18      	ldr	r2, [pc, #96]	@ (800bc80 <pvPortMalloc+0x194>)
 800bc20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	4b13      	ldr	r3, [pc, #76]	@ (800bc74 <pvPortMalloc+0x188>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc36:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <pvPortMalloc+0x198>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	4a11      	ldr	r2, [pc, #68]	@ (800bc84 <pvPortMalloc+0x198>)
 800bc3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc40:	f7fe fce0 	bl	800a604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f003 0307 	and.w	r3, r3, #7
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00b      	beq.n	800bc66 <pvPortMalloc+0x17a>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	60fb      	str	r3, [r7, #12]
}
 800bc60:	bf00      	nop
 800bc62:	bf00      	nop
 800bc64:	e7fd      	b.n	800bc62 <pvPortMalloc+0x176>
	return pvReturn;
 800bc66:	69fb      	ldr	r3, [r7, #28]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3728      	adds	r7, #40	@ 0x28
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20005314 	.word	0x20005314
 800bc74:	20005328 	.word	0x20005328
 800bc78:	20005318 	.word	0x20005318
 800bc7c:	2000530c 	.word	0x2000530c
 800bc80:	2000531c 	.word	0x2000531c
 800bc84:	20005320 	.word	0x20005320

0800bc88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d04f      	beq.n	800bd3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc9a:	2308      	movs	r3, #8
 800bc9c:	425b      	negs	r3, r3
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4413      	add	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	4b25      	ldr	r3, [pc, #148]	@ (800bd44 <vPortFree+0xbc>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <vPortFree+0x46>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	60fb      	str	r3, [r7, #12]
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	e7fd      	b.n	800bcca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <vPortFree+0x66>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	60bb      	str	r3, [r7, #8]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	4b14      	ldr	r3, [pc, #80]	@ (800bd44 <vPortFree+0xbc>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d01e      	beq.n	800bd3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11a      	bne.n	800bd3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	4b0e      	ldr	r3, [pc, #56]	@ (800bd44 <vPortFree+0xbc>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	43db      	mvns	r3, r3
 800bd0e:	401a      	ands	r2, r3
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd14:	f7fe fc68 	bl	800a5e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd48 <vPortFree+0xc0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4413      	add	r3, r2
 800bd22:	4a09      	ldr	r2, [pc, #36]	@ (800bd48 <vPortFree+0xc0>)
 800bd24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd26:	6938      	ldr	r0, [r7, #16]
 800bd28:	f000 f874 	bl	800be14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd2c:	4b07      	ldr	r3, [pc, #28]	@ (800bd4c <vPortFree+0xc4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3301      	adds	r3, #1
 800bd32:	4a06      	ldr	r2, [pc, #24]	@ (800bd4c <vPortFree+0xc4>)
 800bd34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd36:	f7fe fc65 	bl	800a604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd3a:	bf00      	nop
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20005328 	.word	0x20005328
 800bd48:	20005318 	.word	0x20005318
 800bd4c:	20005324 	.word	0x20005324

0800bd50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bd5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd5c:	4b27      	ldr	r3, [pc, #156]	@ (800bdfc <prvHeapInit+0xac>)
 800bd5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3307      	adds	r3, #7
 800bd6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 0307 	bic.w	r3, r3, #7
 800bd76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bdfc <prvHeapInit+0xac>)
 800bd80:	4413      	add	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd88:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <prvHeapInit+0xb0>)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd8e:	4b1c      	ldr	r3, [pc, #112]	@ (800be00 <prvHeapInit+0xb0>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4413      	add	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd9c:	2208      	movs	r2, #8
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 0307 	bic.w	r3, r3, #7
 800bdaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a15      	ldr	r2, [pc, #84]	@ (800be04 <prvHeapInit+0xb4>)
 800bdb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bdb2:	4b14      	ldr	r3, [pc, #80]	@ (800be04 <prvHeapInit+0xb4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdba:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <prvHeapInit+0xb4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	@ (800be04 <prvHeapInit+0xb4>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4a0a      	ldr	r2, [pc, #40]	@ (800be08 <prvHeapInit+0xb8>)
 800bdde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	4a09      	ldr	r2, [pc, #36]	@ (800be0c <prvHeapInit+0xbc>)
 800bde6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bde8:	4b09      	ldr	r3, [pc, #36]	@ (800be10 <prvHeapInit+0xc0>)
 800bdea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	2000170c 	.word	0x2000170c
 800be00:	2000530c 	.word	0x2000530c
 800be04:	20005314 	.word	0x20005314
 800be08:	2000531c 	.word	0x2000531c
 800be0c:	20005318 	.word	0x20005318
 800be10:	20005328 	.word	0x20005328

0800be14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be1c:	4b28      	ldr	r3, [pc, #160]	@ (800bec0 <prvInsertBlockIntoFreeList+0xac>)
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	e002      	b.n	800be28 <prvInsertBlockIntoFreeList+0x14>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d8f7      	bhi.n	800be22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d108      	bne.n	800be56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	441a      	add	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d118      	bne.n	800be9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b15      	ldr	r3, [pc, #84]	@ (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d00d      	beq.n	800be92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	441a      	add	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	e008      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be92:	4b0c      	ldr	r3, [pc, #48]	@ (800bec4 <prvInsertBlockIntoFreeList+0xb0>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e003      	b.n	800bea4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d002      	beq.n	800beb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800beb2:	bf00      	nop
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	2000530c 	.word	0x2000530c
 800bec4:	20005314 	.word	0x20005314

0800bec8 <__cvt>:
 800bec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	ec57 6b10 	vmov	r6, r7, d0
 800bed0:	2f00      	cmp	r7, #0
 800bed2:	460c      	mov	r4, r1
 800bed4:	4619      	mov	r1, r3
 800bed6:	463b      	mov	r3, r7
 800bed8:	bfbb      	ittet	lt
 800beda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bede:	461f      	movlt	r7, r3
 800bee0:	2300      	movge	r3, #0
 800bee2:	232d      	movlt	r3, #45	@ 0x2d
 800bee4:	700b      	strb	r3, [r1, #0]
 800bee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bee8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800beec:	4691      	mov	r9, r2
 800beee:	f023 0820 	bic.w	r8, r3, #32
 800bef2:	bfbc      	itt	lt
 800bef4:	4632      	movlt	r2, r6
 800bef6:	4616      	movlt	r6, r2
 800bef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800befc:	d005      	beq.n	800bf0a <__cvt+0x42>
 800befe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bf02:	d100      	bne.n	800bf06 <__cvt+0x3e>
 800bf04:	3401      	adds	r4, #1
 800bf06:	2102      	movs	r1, #2
 800bf08:	e000      	b.n	800bf0c <__cvt+0x44>
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	ab03      	add	r3, sp, #12
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	ab02      	add	r3, sp, #8
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	ec47 6b10 	vmov	d0, r6, r7
 800bf18:	4653      	mov	r3, sl
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	f000 fec0 	bl	800cca0 <_dtoa_r>
 800bf20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bf24:	4605      	mov	r5, r0
 800bf26:	d119      	bne.n	800bf5c <__cvt+0x94>
 800bf28:	f019 0f01 	tst.w	r9, #1
 800bf2c:	d00e      	beq.n	800bf4c <__cvt+0x84>
 800bf2e:	eb00 0904 	add.w	r9, r0, r4
 800bf32:	2200      	movs	r2, #0
 800bf34:	2300      	movs	r3, #0
 800bf36:	4630      	mov	r0, r6
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf3e:	b108      	cbz	r0, 800bf44 <__cvt+0x7c>
 800bf40:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf44:	2230      	movs	r2, #48	@ 0x30
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	454b      	cmp	r3, r9
 800bf4a:	d31e      	bcc.n	800bf8a <__cvt+0xc2>
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf50:	1b5b      	subs	r3, r3, r5
 800bf52:	4628      	mov	r0, r5
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	b004      	add	sp, #16
 800bf58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bf60:	eb00 0904 	add.w	r9, r0, r4
 800bf64:	d1e5      	bne.n	800bf32 <__cvt+0x6a>
 800bf66:	7803      	ldrb	r3, [r0, #0]
 800bf68:	2b30      	cmp	r3, #48	@ 0x30
 800bf6a:	d10a      	bne.n	800bf82 <__cvt+0xba>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf78:	b918      	cbnz	r0, 800bf82 <__cvt+0xba>
 800bf7a:	f1c4 0401 	rsb	r4, r4, #1
 800bf7e:	f8ca 4000 	str.w	r4, [sl]
 800bf82:	f8da 3000 	ldr.w	r3, [sl]
 800bf86:	4499      	add	r9, r3
 800bf88:	e7d3      	b.n	800bf32 <__cvt+0x6a>
 800bf8a:	1c59      	adds	r1, r3, #1
 800bf8c:	9103      	str	r1, [sp, #12]
 800bf8e:	701a      	strb	r2, [r3, #0]
 800bf90:	e7d9      	b.n	800bf46 <__cvt+0x7e>

0800bf92 <__exponent>:
 800bf92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf94:	2900      	cmp	r1, #0
 800bf96:	bfba      	itte	lt
 800bf98:	4249      	neglt	r1, r1
 800bf9a:	232d      	movlt	r3, #45	@ 0x2d
 800bf9c:	232b      	movge	r3, #43	@ 0x2b
 800bf9e:	2909      	cmp	r1, #9
 800bfa0:	7002      	strb	r2, [r0, #0]
 800bfa2:	7043      	strb	r3, [r0, #1]
 800bfa4:	dd29      	ble.n	800bffa <__exponent+0x68>
 800bfa6:	f10d 0307 	add.w	r3, sp, #7
 800bfaa:	461d      	mov	r5, r3
 800bfac:	270a      	movs	r7, #10
 800bfae:	461a      	mov	r2, r3
 800bfb0:	fbb1 f6f7 	udiv	r6, r1, r7
 800bfb4:	fb07 1416 	mls	r4, r7, r6, r1
 800bfb8:	3430      	adds	r4, #48	@ 0x30
 800bfba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	2c63      	cmp	r4, #99	@ 0x63
 800bfc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	dcf1      	bgt.n	800bfae <__exponent+0x1c>
 800bfca:	3130      	adds	r1, #48	@ 0x30
 800bfcc:	1e94      	subs	r4, r2, #2
 800bfce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bfd2:	1c41      	adds	r1, r0, #1
 800bfd4:	4623      	mov	r3, r4
 800bfd6:	42ab      	cmp	r3, r5
 800bfd8:	d30a      	bcc.n	800bff0 <__exponent+0x5e>
 800bfda:	f10d 0309 	add.w	r3, sp, #9
 800bfde:	1a9b      	subs	r3, r3, r2
 800bfe0:	42ac      	cmp	r4, r5
 800bfe2:	bf88      	it	hi
 800bfe4:	2300      	movhi	r3, #0
 800bfe6:	3302      	adds	r3, #2
 800bfe8:	4403      	add	r3, r0
 800bfea:	1a18      	subs	r0, r3, r0
 800bfec:	b003      	add	sp, #12
 800bfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bff4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bff8:	e7ed      	b.n	800bfd6 <__exponent+0x44>
 800bffa:	2330      	movs	r3, #48	@ 0x30
 800bffc:	3130      	adds	r1, #48	@ 0x30
 800bffe:	7083      	strb	r3, [r0, #2]
 800c000:	70c1      	strb	r1, [r0, #3]
 800c002:	1d03      	adds	r3, r0, #4
 800c004:	e7f1      	b.n	800bfea <__exponent+0x58>
	...

0800c008 <_printf_float>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	b08d      	sub	sp, #52	@ 0x34
 800c00e:	460c      	mov	r4, r1
 800c010:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c014:	4616      	mov	r6, r2
 800c016:	461f      	mov	r7, r3
 800c018:	4605      	mov	r5, r0
 800c01a:	f000 fcdb 	bl	800c9d4 <_localeconv_r>
 800c01e:	6803      	ldr	r3, [r0, #0]
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	4618      	mov	r0, r3
 800c024:	f7f4 f924 	bl	8000270 <strlen>
 800c028:	2300      	movs	r3, #0
 800c02a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c02c:	f8d8 3000 	ldr.w	r3, [r8]
 800c030:	9005      	str	r0, [sp, #20]
 800c032:	3307      	adds	r3, #7
 800c034:	f023 0307 	bic.w	r3, r3, #7
 800c038:	f103 0208 	add.w	r2, r3, #8
 800c03c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c040:	f8d4 b000 	ldr.w	fp, [r4]
 800c044:	f8c8 2000 	str.w	r2, [r8]
 800c048:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c04c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c050:	9307      	str	r3, [sp, #28]
 800c052:	f8cd 8018 	str.w	r8, [sp, #24]
 800c056:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c05a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c05e:	4b9c      	ldr	r3, [pc, #624]	@ (800c2d0 <_printf_float+0x2c8>)
 800c060:	f04f 32ff 	mov.w	r2, #4294967295
 800c064:	f7f4 fd62 	bl	8000b2c <__aeabi_dcmpun>
 800c068:	bb70      	cbnz	r0, 800c0c8 <_printf_float+0xc0>
 800c06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c06e:	4b98      	ldr	r3, [pc, #608]	@ (800c2d0 <_printf_float+0x2c8>)
 800c070:	f04f 32ff 	mov.w	r2, #4294967295
 800c074:	f7f4 fd3c 	bl	8000af0 <__aeabi_dcmple>
 800c078:	bb30      	cbnz	r0, 800c0c8 <_printf_float+0xc0>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	4640      	mov	r0, r8
 800c080:	4649      	mov	r1, r9
 800c082:	f7f4 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800c086:	b110      	cbz	r0, 800c08e <_printf_float+0x86>
 800c088:	232d      	movs	r3, #45	@ 0x2d
 800c08a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c08e:	4a91      	ldr	r2, [pc, #580]	@ (800c2d4 <_printf_float+0x2cc>)
 800c090:	4b91      	ldr	r3, [pc, #580]	@ (800c2d8 <_printf_float+0x2d0>)
 800c092:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c096:	bf94      	ite	ls
 800c098:	4690      	movls	r8, r2
 800c09a:	4698      	movhi	r8, r3
 800c09c:	2303      	movs	r3, #3
 800c09e:	6123      	str	r3, [r4, #16]
 800c0a0:	f02b 0304 	bic.w	r3, fp, #4
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	f04f 0900 	mov.w	r9, #0
 800c0aa:	9700      	str	r7, [sp, #0]
 800c0ac:	4633      	mov	r3, r6
 800c0ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 f9d2 	bl	800c45c <_printf_common>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	f040 808d 	bne.w	800c1d8 <_printf_float+0x1d0>
 800c0be:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c2:	b00d      	add	sp, #52	@ 0x34
 800c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 fd2c 	bl	8000b2c <__aeabi_dcmpun>
 800c0d4:	b140      	cbz	r0, 800c0e8 <_printf_float+0xe0>
 800c0d6:	464b      	mov	r3, r9
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bfbc      	itt	lt
 800c0dc:	232d      	movlt	r3, #45	@ 0x2d
 800c0de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c0e2:	4a7e      	ldr	r2, [pc, #504]	@ (800c2dc <_printf_float+0x2d4>)
 800c0e4:	4b7e      	ldr	r3, [pc, #504]	@ (800c2e0 <_printf_float+0x2d8>)
 800c0e6:	e7d4      	b.n	800c092 <_printf_float+0x8a>
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c0ee:	9206      	str	r2, [sp, #24]
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	d13b      	bne.n	800c16c <_printf_float+0x164>
 800c0f4:	2306      	movs	r3, #6
 800c0f6:	6063      	str	r3, [r4, #4]
 800c0f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6022      	str	r2, [r4, #0]
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	ab0a      	add	r3, sp, #40	@ 0x28
 800c104:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c108:	ab09      	add	r3, sp, #36	@ 0x24
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	6861      	ldr	r1, [r4, #4]
 800c10e:	ec49 8b10 	vmov	d0, r8, r9
 800c112:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c116:	4628      	mov	r0, r5
 800c118:	f7ff fed6 	bl	800bec8 <__cvt>
 800c11c:	9b06      	ldr	r3, [sp, #24]
 800c11e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c120:	2b47      	cmp	r3, #71	@ 0x47
 800c122:	4680      	mov	r8, r0
 800c124:	d129      	bne.n	800c17a <_printf_float+0x172>
 800c126:	1cc8      	adds	r0, r1, #3
 800c128:	db02      	blt.n	800c130 <_printf_float+0x128>
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	4299      	cmp	r1, r3
 800c12e:	dd41      	ble.n	800c1b4 <_printf_float+0x1ac>
 800c130:	f1aa 0a02 	sub.w	sl, sl, #2
 800c134:	fa5f fa8a 	uxtb.w	sl, sl
 800c138:	3901      	subs	r1, #1
 800c13a:	4652      	mov	r2, sl
 800c13c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c140:	9109      	str	r1, [sp, #36]	@ 0x24
 800c142:	f7ff ff26 	bl	800bf92 <__exponent>
 800c146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c148:	1813      	adds	r3, r2, r0
 800c14a:	2a01      	cmp	r2, #1
 800c14c:	4681      	mov	r9, r0
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	dc02      	bgt.n	800c158 <_printf_float+0x150>
 800c152:	6822      	ldr	r2, [r4, #0]
 800c154:	07d2      	lsls	r2, r2, #31
 800c156:	d501      	bpl.n	800c15c <_printf_float+0x154>
 800c158:	3301      	adds	r3, #1
 800c15a:	6123      	str	r3, [r4, #16]
 800c15c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0a2      	beq.n	800c0aa <_printf_float+0xa2>
 800c164:	232d      	movs	r3, #45	@ 0x2d
 800c166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c16a:	e79e      	b.n	800c0aa <_printf_float+0xa2>
 800c16c:	9a06      	ldr	r2, [sp, #24]
 800c16e:	2a47      	cmp	r2, #71	@ 0x47
 800c170:	d1c2      	bne.n	800c0f8 <_printf_float+0xf0>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1c0      	bne.n	800c0f8 <_printf_float+0xf0>
 800c176:	2301      	movs	r3, #1
 800c178:	e7bd      	b.n	800c0f6 <_printf_float+0xee>
 800c17a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c17e:	d9db      	bls.n	800c138 <_printf_float+0x130>
 800c180:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c184:	d118      	bne.n	800c1b8 <_printf_float+0x1b0>
 800c186:	2900      	cmp	r1, #0
 800c188:	6863      	ldr	r3, [r4, #4]
 800c18a:	dd0b      	ble.n	800c1a4 <_printf_float+0x19c>
 800c18c:	6121      	str	r1, [r4, #16]
 800c18e:	b913      	cbnz	r3, 800c196 <_printf_float+0x18e>
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	07d0      	lsls	r0, r2, #31
 800c194:	d502      	bpl.n	800c19c <_printf_float+0x194>
 800c196:	3301      	adds	r3, #1
 800c198:	440b      	add	r3, r1
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c19e:	f04f 0900 	mov.w	r9, #0
 800c1a2:	e7db      	b.n	800c15c <_printf_float+0x154>
 800c1a4:	b913      	cbnz	r3, 800c1ac <_printf_float+0x1a4>
 800c1a6:	6822      	ldr	r2, [r4, #0]
 800c1a8:	07d2      	lsls	r2, r2, #31
 800c1aa:	d501      	bpl.n	800c1b0 <_printf_float+0x1a8>
 800c1ac:	3302      	adds	r3, #2
 800c1ae:	e7f4      	b.n	800c19a <_printf_float+0x192>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e7f2      	b.n	800c19a <_printf_float+0x192>
 800c1b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c1b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	db05      	blt.n	800c1ca <_printf_float+0x1c2>
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	6121      	str	r1, [r4, #16]
 800c1c2:	07d8      	lsls	r0, r3, #31
 800c1c4:	d5ea      	bpl.n	800c19c <_printf_float+0x194>
 800c1c6:	1c4b      	adds	r3, r1, #1
 800c1c8:	e7e7      	b.n	800c19a <_printf_float+0x192>
 800c1ca:	2900      	cmp	r1, #0
 800c1cc:	bfd4      	ite	le
 800c1ce:	f1c1 0202 	rsble	r2, r1, #2
 800c1d2:	2201      	movgt	r2, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	e7e0      	b.n	800c19a <_printf_float+0x192>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	055a      	lsls	r2, r3, #21
 800c1dc:	d407      	bmi.n	800c1ee <_printf_float+0x1e6>
 800c1de:	6923      	ldr	r3, [r4, #16]
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b8      	blx	r7
 800c1e8:	3001      	adds	r0, #1
 800c1ea:	d12b      	bne.n	800c244 <_printf_float+0x23c>
 800c1ec:	e767      	b.n	800c0be <_printf_float+0xb6>
 800c1ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c1f2:	f240 80dd 	bls.w	800c3b0 <_printf_float+0x3a8>
 800c1f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f7f4 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800c202:	2800      	cmp	r0, #0
 800c204:	d033      	beq.n	800c26e <_printf_float+0x266>
 800c206:	4a37      	ldr	r2, [pc, #220]	@ (800c2e4 <_printf_float+0x2dc>)
 800c208:	2301      	movs	r3, #1
 800c20a:	4631      	mov	r1, r6
 800c20c:	4628      	mov	r0, r5
 800c20e:	47b8      	blx	r7
 800c210:	3001      	adds	r0, #1
 800c212:	f43f af54 	beq.w	800c0be <_printf_float+0xb6>
 800c216:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c21a:	4543      	cmp	r3, r8
 800c21c:	db02      	blt.n	800c224 <_printf_float+0x21c>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	07d8      	lsls	r0, r3, #31
 800c222:	d50f      	bpl.n	800c244 <_printf_float+0x23c>
 800c224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c228:	4631      	mov	r1, r6
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b8      	blx	r7
 800c22e:	3001      	adds	r0, #1
 800c230:	f43f af45 	beq.w	800c0be <_printf_float+0xb6>
 800c234:	f04f 0900 	mov.w	r9, #0
 800c238:	f108 38ff 	add.w	r8, r8, #4294967295
 800c23c:	f104 0a1a 	add.w	sl, r4, #26
 800c240:	45c8      	cmp	r8, r9
 800c242:	dc09      	bgt.n	800c258 <_printf_float+0x250>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	079b      	lsls	r3, r3, #30
 800c248:	f100 8103 	bmi.w	800c452 <_printf_float+0x44a>
 800c24c:	68e0      	ldr	r0, [r4, #12]
 800c24e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c250:	4298      	cmp	r0, r3
 800c252:	bfb8      	it	lt
 800c254:	4618      	movlt	r0, r3
 800c256:	e734      	b.n	800c0c2 <_printf_float+0xba>
 800c258:	2301      	movs	r3, #1
 800c25a:	4652      	mov	r2, sl
 800c25c:	4631      	mov	r1, r6
 800c25e:	4628      	mov	r0, r5
 800c260:	47b8      	blx	r7
 800c262:	3001      	adds	r0, #1
 800c264:	f43f af2b 	beq.w	800c0be <_printf_float+0xb6>
 800c268:	f109 0901 	add.w	r9, r9, #1
 800c26c:	e7e8      	b.n	800c240 <_printf_float+0x238>
 800c26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc39      	bgt.n	800c2e8 <_printf_float+0x2e0>
 800c274:	4a1b      	ldr	r2, [pc, #108]	@ (800c2e4 <_printf_float+0x2dc>)
 800c276:	2301      	movs	r3, #1
 800c278:	4631      	mov	r1, r6
 800c27a:	4628      	mov	r0, r5
 800c27c:	47b8      	blx	r7
 800c27e:	3001      	adds	r0, #1
 800c280:	f43f af1d 	beq.w	800c0be <_printf_float+0xb6>
 800c284:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c288:	ea59 0303 	orrs.w	r3, r9, r3
 800c28c:	d102      	bne.n	800c294 <_printf_float+0x28c>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	07d9      	lsls	r1, r3, #31
 800c292:	d5d7      	bpl.n	800c244 <_printf_float+0x23c>
 800c294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c298:	4631      	mov	r1, r6
 800c29a:	4628      	mov	r0, r5
 800c29c:	47b8      	blx	r7
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f43f af0d 	beq.w	800c0be <_printf_float+0xb6>
 800c2a4:	f04f 0a00 	mov.w	sl, #0
 800c2a8:	f104 0b1a 	add.w	fp, r4, #26
 800c2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ae:	425b      	negs	r3, r3
 800c2b0:	4553      	cmp	r3, sl
 800c2b2:	dc01      	bgt.n	800c2b8 <_printf_float+0x2b0>
 800c2b4:	464b      	mov	r3, r9
 800c2b6:	e793      	b.n	800c1e0 <_printf_float+0x1d8>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	465a      	mov	r2, fp
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4628      	mov	r0, r5
 800c2c0:	47b8      	blx	r7
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	f43f aefb 	beq.w	800c0be <_printf_float+0xb6>
 800c2c8:	f10a 0a01 	add.w	sl, sl, #1
 800c2cc:	e7ee      	b.n	800c2ac <_printf_float+0x2a4>
 800c2ce:	bf00      	nop
 800c2d0:	7fefffff 	.word	0x7fefffff
 800c2d4:	0800f890 	.word	0x0800f890
 800c2d8:	0800f894 	.word	0x0800f894
 800c2dc:	0800f898 	.word	0x0800f898
 800c2e0:	0800f89c 	.word	0x0800f89c
 800c2e4:	0800f8a0 	.word	0x0800f8a0
 800c2e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c2ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c2ee:	4553      	cmp	r3, sl
 800c2f0:	bfa8      	it	ge
 800c2f2:	4653      	movge	r3, sl
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	4699      	mov	r9, r3
 800c2f8:	dc36      	bgt.n	800c368 <_printf_float+0x360>
 800c2fa:	f04f 0b00 	mov.w	fp, #0
 800c2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c302:	f104 021a 	add.w	r2, r4, #26
 800c306:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c308:	9306      	str	r3, [sp, #24]
 800c30a:	eba3 0309 	sub.w	r3, r3, r9
 800c30e:	455b      	cmp	r3, fp
 800c310:	dc31      	bgt.n	800c376 <_printf_float+0x36e>
 800c312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c314:	459a      	cmp	sl, r3
 800c316:	dc3a      	bgt.n	800c38e <_printf_float+0x386>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	07da      	lsls	r2, r3, #31
 800c31c:	d437      	bmi.n	800c38e <_printf_float+0x386>
 800c31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c320:	ebaa 0903 	sub.w	r9, sl, r3
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	ebaa 0303 	sub.w	r3, sl, r3
 800c32a:	4599      	cmp	r9, r3
 800c32c:	bfa8      	it	ge
 800c32e:	4699      	movge	r9, r3
 800c330:	f1b9 0f00 	cmp.w	r9, #0
 800c334:	dc33      	bgt.n	800c39e <_printf_float+0x396>
 800c336:	f04f 0800 	mov.w	r8, #0
 800c33a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c33e:	f104 0b1a 	add.w	fp, r4, #26
 800c342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c344:	ebaa 0303 	sub.w	r3, sl, r3
 800c348:	eba3 0309 	sub.w	r3, r3, r9
 800c34c:	4543      	cmp	r3, r8
 800c34e:	f77f af79 	ble.w	800c244 <_printf_float+0x23c>
 800c352:	2301      	movs	r3, #1
 800c354:	465a      	mov	r2, fp
 800c356:	4631      	mov	r1, r6
 800c358:	4628      	mov	r0, r5
 800c35a:	47b8      	blx	r7
 800c35c:	3001      	adds	r0, #1
 800c35e:	f43f aeae 	beq.w	800c0be <_printf_float+0xb6>
 800c362:	f108 0801 	add.w	r8, r8, #1
 800c366:	e7ec      	b.n	800c342 <_printf_float+0x33a>
 800c368:	4642      	mov	r2, r8
 800c36a:	4631      	mov	r1, r6
 800c36c:	4628      	mov	r0, r5
 800c36e:	47b8      	blx	r7
 800c370:	3001      	adds	r0, #1
 800c372:	d1c2      	bne.n	800c2fa <_printf_float+0x2f2>
 800c374:	e6a3      	b.n	800c0be <_printf_float+0xb6>
 800c376:	2301      	movs	r3, #1
 800c378:	4631      	mov	r1, r6
 800c37a:	4628      	mov	r0, r5
 800c37c:	9206      	str	r2, [sp, #24]
 800c37e:	47b8      	blx	r7
 800c380:	3001      	adds	r0, #1
 800c382:	f43f ae9c 	beq.w	800c0be <_printf_float+0xb6>
 800c386:	9a06      	ldr	r2, [sp, #24]
 800c388:	f10b 0b01 	add.w	fp, fp, #1
 800c38c:	e7bb      	b.n	800c306 <_printf_float+0x2fe>
 800c38e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c392:	4631      	mov	r1, r6
 800c394:	4628      	mov	r0, r5
 800c396:	47b8      	blx	r7
 800c398:	3001      	adds	r0, #1
 800c39a:	d1c0      	bne.n	800c31e <_printf_float+0x316>
 800c39c:	e68f      	b.n	800c0be <_printf_float+0xb6>
 800c39e:	9a06      	ldr	r2, [sp, #24]
 800c3a0:	464b      	mov	r3, r9
 800c3a2:	4442      	add	r2, r8
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b8      	blx	r7
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d1c3      	bne.n	800c336 <_printf_float+0x32e>
 800c3ae:	e686      	b.n	800c0be <_printf_float+0xb6>
 800c3b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c3b4:	f1ba 0f01 	cmp.w	sl, #1
 800c3b8:	dc01      	bgt.n	800c3be <_printf_float+0x3b6>
 800c3ba:	07db      	lsls	r3, r3, #31
 800c3bc:	d536      	bpl.n	800c42c <_printf_float+0x424>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b8      	blx	r7
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	f43f ae78 	beq.w	800c0be <_printf_float+0xb6>
 800c3ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	47b8      	blx	r7
 800c3d8:	3001      	adds	r0, #1
 800c3da:	f43f ae70 	beq.w	800c0be <_printf_float+0xb6>
 800c3de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3ea:	f7f4 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3ee:	b9c0      	cbnz	r0, 800c422 <_printf_float+0x41a>
 800c3f0:	4653      	mov	r3, sl
 800c3f2:	f108 0201 	add.w	r2, r8, #1
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b8      	blx	r7
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d10c      	bne.n	800c41a <_printf_float+0x412>
 800c400:	e65d      	b.n	800c0be <_printf_float+0xb6>
 800c402:	2301      	movs	r3, #1
 800c404:	465a      	mov	r2, fp
 800c406:	4631      	mov	r1, r6
 800c408:	4628      	mov	r0, r5
 800c40a:	47b8      	blx	r7
 800c40c:	3001      	adds	r0, #1
 800c40e:	f43f ae56 	beq.w	800c0be <_printf_float+0xb6>
 800c412:	f108 0801 	add.w	r8, r8, #1
 800c416:	45d0      	cmp	r8, sl
 800c418:	dbf3      	blt.n	800c402 <_printf_float+0x3fa>
 800c41a:	464b      	mov	r3, r9
 800c41c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c420:	e6df      	b.n	800c1e2 <_printf_float+0x1da>
 800c422:	f04f 0800 	mov.w	r8, #0
 800c426:	f104 0b1a 	add.w	fp, r4, #26
 800c42a:	e7f4      	b.n	800c416 <_printf_float+0x40e>
 800c42c:	2301      	movs	r3, #1
 800c42e:	4642      	mov	r2, r8
 800c430:	e7e1      	b.n	800c3f6 <_printf_float+0x3ee>
 800c432:	2301      	movs	r3, #1
 800c434:	464a      	mov	r2, r9
 800c436:	4631      	mov	r1, r6
 800c438:	4628      	mov	r0, r5
 800c43a:	47b8      	blx	r7
 800c43c:	3001      	adds	r0, #1
 800c43e:	f43f ae3e 	beq.w	800c0be <_printf_float+0xb6>
 800c442:	f108 0801 	add.w	r8, r8, #1
 800c446:	68e3      	ldr	r3, [r4, #12]
 800c448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c44a:	1a5b      	subs	r3, r3, r1
 800c44c:	4543      	cmp	r3, r8
 800c44e:	dcf0      	bgt.n	800c432 <_printf_float+0x42a>
 800c450:	e6fc      	b.n	800c24c <_printf_float+0x244>
 800c452:	f04f 0800 	mov.w	r8, #0
 800c456:	f104 0919 	add.w	r9, r4, #25
 800c45a:	e7f4      	b.n	800c446 <_printf_float+0x43e>

0800c45c <_printf_common>:
 800c45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	4616      	mov	r6, r2
 800c462:	4698      	mov	r8, r3
 800c464:	688a      	ldr	r2, [r1, #8]
 800c466:	690b      	ldr	r3, [r1, #16]
 800c468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	bfb8      	it	lt
 800c470:	4613      	movlt	r3, r2
 800c472:	6033      	str	r3, [r6, #0]
 800c474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c478:	4607      	mov	r7, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	b10a      	cbz	r2, 800c482 <_printf_common+0x26>
 800c47e:	3301      	adds	r3, #1
 800c480:	6033      	str	r3, [r6, #0]
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	0699      	lsls	r1, r3, #26
 800c486:	bf42      	ittt	mi
 800c488:	6833      	ldrmi	r3, [r6, #0]
 800c48a:	3302      	addmi	r3, #2
 800c48c:	6033      	strmi	r3, [r6, #0]
 800c48e:	6825      	ldr	r5, [r4, #0]
 800c490:	f015 0506 	ands.w	r5, r5, #6
 800c494:	d106      	bne.n	800c4a4 <_printf_common+0x48>
 800c496:	f104 0a19 	add.w	sl, r4, #25
 800c49a:	68e3      	ldr	r3, [r4, #12]
 800c49c:	6832      	ldr	r2, [r6, #0]
 800c49e:	1a9b      	subs	r3, r3, r2
 800c4a0:	42ab      	cmp	r3, r5
 800c4a2:	dc26      	bgt.n	800c4f2 <_printf_common+0x96>
 800c4a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4a8:	6822      	ldr	r2, [r4, #0]
 800c4aa:	3b00      	subs	r3, #0
 800c4ac:	bf18      	it	ne
 800c4ae:	2301      	movne	r3, #1
 800c4b0:	0692      	lsls	r2, r2, #26
 800c4b2:	d42b      	bmi.n	800c50c <_printf_common+0xb0>
 800c4b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4b8:	4641      	mov	r1, r8
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	47c8      	blx	r9
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d01e      	beq.n	800c500 <_printf_common+0xa4>
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	f003 0306 	and.w	r3, r3, #6
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	bf02      	ittt	eq
 800c4ce:	68e5      	ldreq	r5, [r4, #12]
 800c4d0:	6833      	ldreq	r3, [r6, #0]
 800c4d2:	1aed      	subeq	r5, r5, r3
 800c4d4:	68a3      	ldr	r3, [r4, #8]
 800c4d6:	bf0c      	ite	eq
 800c4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4dc:	2500      	movne	r5, #0
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	bfc4      	itt	gt
 800c4e2:	1a9b      	subgt	r3, r3, r2
 800c4e4:	18ed      	addgt	r5, r5, r3
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	341a      	adds	r4, #26
 800c4ea:	42b5      	cmp	r5, r6
 800c4ec:	d11a      	bne.n	800c524 <_printf_common+0xc8>
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	e008      	b.n	800c504 <_printf_common+0xa8>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	4652      	mov	r2, sl
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	47c8      	blx	r9
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d103      	bne.n	800c508 <_printf_common+0xac>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c508:	3501      	adds	r5, #1
 800c50a:	e7c6      	b.n	800c49a <_printf_common+0x3e>
 800c50c:	18e1      	adds	r1, r4, r3
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	2030      	movs	r0, #48	@ 0x30
 800c512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c516:	4422      	add	r2, r4
 800c518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c51c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c520:	3302      	adds	r3, #2
 800c522:	e7c7      	b.n	800c4b4 <_printf_common+0x58>
 800c524:	2301      	movs	r3, #1
 800c526:	4622      	mov	r2, r4
 800c528:	4641      	mov	r1, r8
 800c52a:	4638      	mov	r0, r7
 800c52c:	47c8      	blx	r9
 800c52e:	3001      	adds	r0, #1
 800c530:	d0e6      	beq.n	800c500 <_printf_common+0xa4>
 800c532:	3601      	adds	r6, #1
 800c534:	e7d9      	b.n	800c4ea <_printf_common+0x8e>
	...

0800c538 <_printf_i>:
 800c538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c53c:	7e0f      	ldrb	r7, [r1, #24]
 800c53e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c540:	2f78      	cmp	r7, #120	@ 0x78
 800c542:	4691      	mov	r9, r2
 800c544:	4680      	mov	r8, r0
 800c546:	460c      	mov	r4, r1
 800c548:	469a      	mov	sl, r3
 800c54a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c54e:	d807      	bhi.n	800c560 <_printf_i+0x28>
 800c550:	2f62      	cmp	r7, #98	@ 0x62
 800c552:	d80a      	bhi.n	800c56a <_printf_i+0x32>
 800c554:	2f00      	cmp	r7, #0
 800c556:	f000 80d2 	beq.w	800c6fe <_printf_i+0x1c6>
 800c55a:	2f58      	cmp	r7, #88	@ 0x58
 800c55c:	f000 80b9 	beq.w	800c6d2 <_printf_i+0x19a>
 800c560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c568:	e03a      	b.n	800c5e0 <_printf_i+0xa8>
 800c56a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c56e:	2b15      	cmp	r3, #21
 800c570:	d8f6      	bhi.n	800c560 <_printf_i+0x28>
 800c572:	a101      	add	r1, pc, #4	@ (adr r1, 800c578 <_printf_i+0x40>)
 800c574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c578:	0800c5d1 	.word	0x0800c5d1
 800c57c:	0800c5e5 	.word	0x0800c5e5
 800c580:	0800c561 	.word	0x0800c561
 800c584:	0800c561 	.word	0x0800c561
 800c588:	0800c561 	.word	0x0800c561
 800c58c:	0800c561 	.word	0x0800c561
 800c590:	0800c5e5 	.word	0x0800c5e5
 800c594:	0800c561 	.word	0x0800c561
 800c598:	0800c561 	.word	0x0800c561
 800c59c:	0800c561 	.word	0x0800c561
 800c5a0:	0800c561 	.word	0x0800c561
 800c5a4:	0800c6e5 	.word	0x0800c6e5
 800c5a8:	0800c60f 	.word	0x0800c60f
 800c5ac:	0800c69f 	.word	0x0800c69f
 800c5b0:	0800c561 	.word	0x0800c561
 800c5b4:	0800c561 	.word	0x0800c561
 800c5b8:	0800c707 	.word	0x0800c707
 800c5bc:	0800c561 	.word	0x0800c561
 800c5c0:	0800c60f 	.word	0x0800c60f
 800c5c4:	0800c561 	.word	0x0800c561
 800c5c8:	0800c561 	.word	0x0800c561
 800c5cc:	0800c6a7 	.word	0x0800c6a7
 800c5d0:	6833      	ldr	r3, [r6, #0]
 800c5d2:	1d1a      	adds	r2, r3, #4
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6032      	str	r2, [r6, #0]
 800c5d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e09d      	b.n	800c720 <_printf_i+0x1e8>
 800c5e4:	6833      	ldr	r3, [r6, #0]
 800c5e6:	6820      	ldr	r0, [r4, #0]
 800c5e8:	1d19      	adds	r1, r3, #4
 800c5ea:	6031      	str	r1, [r6, #0]
 800c5ec:	0606      	lsls	r6, r0, #24
 800c5ee:	d501      	bpl.n	800c5f4 <_printf_i+0xbc>
 800c5f0:	681d      	ldr	r5, [r3, #0]
 800c5f2:	e003      	b.n	800c5fc <_printf_i+0xc4>
 800c5f4:	0645      	lsls	r5, r0, #25
 800c5f6:	d5fb      	bpl.n	800c5f0 <_printf_i+0xb8>
 800c5f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c5fc:	2d00      	cmp	r5, #0
 800c5fe:	da03      	bge.n	800c608 <_printf_i+0xd0>
 800c600:	232d      	movs	r3, #45	@ 0x2d
 800c602:	426d      	negs	r5, r5
 800c604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c608:	4859      	ldr	r0, [pc, #356]	@ (800c770 <_printf_i+0x238>)
 800c60a:	230a      	movs	r3, #10
 800c60c:	e011      	b.n	800c632 <_printf_i+0xfa>
 800c60e:	6821      	ldr	r1, [r4, #0]
 800c610:	6833      	ldr	r3, [r6, #0]
 800c612:	0608      	lsls	r0, r1, #24
 800c614:	f853 5b04 	ldr.w	r5, [r3], #4
 800c618:	d402      	bmi.n	800c620 <_printf_i+0xe8>
 800c61a:	0649      	lsls	r1, r1, #25
 800c61c:	bf48      	it	mi
 800c61e:	b2ad      	uxthmi	r5, r5
 800c620:	2f6f      	cmp	r7, #111	@ 0x6f
 800c622:	4853      	ldr	r0, [pc, #332]	@ (800c770 <_printf_i+0x238>)
 800c624:	6033      	str	r3, [r6, #0]
 800c626:	bf14      	ite	ne
 800c628:	230a      	movne	r3, #10
 800c62a:	2308      	moveq	r3, #8
 800c62c:	2100      	movs	r1, #0
 800c62e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c632:	6866      	ldr	r6, [r4, #4]
 800c634:	60a6      	str	r6, [r4, #8]
 800c636:	2e00      	cmp	r6, #0
 800c638:	bfa2      	ittt	ge
 800c63a:	6821      	ldrge	r1, [r4, #0]
 800c63c:	f021 0104 	bicge.w	r1, r1, #4
 800c640:	6021      	strge	r1, [r4, #0]
 800c642:	b90d      	cbnz	r5, 800c648 <_printf_i+0x110>
 800c644:	2e00      	cmp	r6, #0
 800c646:	d04b      	beq.n	800c6e0 <_printf_i+0x1a8>
 800c648:	4616      	mov	r6, r2
 800c64a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c64e:	fb03 5711 	mls	r7, r3, r1, r5
 800c652:	5dc7      	ldrb	r7, [r0, r7]
 800c654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c658:	462f      	mov	r7, r5
 800c65a:	42bb      	cmp	r3, r7
 800c65c:	460d      	mov	r5, r1
 800c65e:	d9f4      	bls.n	800c64a <_printf_i+0x112>
 800c660:	2b08      	cmp	r3, #8
 800c662:	d10b      	bne.n	800c67c <_printf_i+0x144>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	07df      	lsls	r7, r3, #31
 800c668:	d508      	bpl.n	800c67c <_printf_i+0x144>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	6861      	ldr	r1, [r4, #4]
 800c66e:	4299      	cmp	r1, r3
 800c670:	bfde      	ittt	le
 800c672:	2330      	movle	r3, #48	@ 0x30
 800c674:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c678:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c67c:	1b92      	subs	r2, r2, r6
 800c67e:	6122      	str	r2, [r4, #16]
 800c680:	f8cd a000 	str.w	sl, [sp]
 800c684:	464b      	mov	r3, r9
 800c686:	aa03      	add	r2, sp, #12
 800c688:	4621      	mov	r1, r4
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7ff fee6 	bl	800c45c <_printf_common>
 800c690:	3001      	adds	r0, #1
 800c692:	d14a      	bne.n	800c72a <_printf_i+0x1f2>
 800c694:	f04f 30ff 	mov.w	r0, #4294967295
 800c698:	b004      	add	sp, #16
 800c69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f043 0320 	orr.w	r3, r3, #32
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	4833      	ldr	r0, [pc, #204]	@ (800c774 <_printf_i+0x23c>)
 800c6a8:	2778      	movs	r7, #120	@ 0x78
 800c6aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	6831      	ldr	r1, [r6, #0]
 800c6b2:	061f      	lsls	r7, r3, #24
 800c6b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6b8:	d402      	bmi.n	800c6c0 <_printf_i+0x188>
 800c6ba:	065f      	lsls	r7, r3, #25
 800c6bc:	bf48      	it	mi
 800c6be:	b2ad      	uxthmi	r5, r5
 800c6c0:	6031      	str	r1, [r6, #0]
 800c6c2:	07d9      	lsls	r1, r3, #31
 800c6c4:	bf44      	itt	mi
 800c6c6:	f043 0320 	orrmi.w	r3, r3, #32
 800c6ca:	6023      	strmi	r3, [r4, #0]
 800c6cc:	b11d      	cbz	r5, 800c6d6 <_printf_i+0x19e>
 800c6ce:	2310      	movs	r3, #16
 800c6d0:	e7ac      	b.n	800c62c <_printf_i+0xf4>
 800c6d2:	4827      	ldr	r0, [pc, #156]	@ (800c770 <_printf_i+0x238>)
 800c6d4:	e7e9      	b.n	800c6aa <_printf_i+0x172>
 800c6d6:	6823      	ldr	r3, [r4, #0]
 800c6d8:	f023 0320 	bic.w	r3, r3, #32
 800c6dc:	6023      	str	r3, [r4, #0]
 800c6de:	e7f6      	b.n	800c6ce <_printf_i+0x196>
 800c6e0:	4616      	mov	r6, r2
 800c6e2:	e7bd      	b.n	800c660 <_printf_i+0x128>
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	6825      	ldr	r5, [r4, #0]
 800c6e8:	6961      	ldr	r1, [r4, #20]
 800c6ea:	1d18      	adds	r0, r3, #4
 800c6ec:	6030      	str	r0, [r6, #0]
 800c6ee:	062e      	lsls	r6, r5, #24
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	d501      	bpl.n	800c6f8 <_printf_i+0x1c0>
 800c6f4:	6019      	str	r1, [r3, #0]
 800c6f6:	e002      	b.n	800c6fe <_printf_i+0x1c6>
 800c6f8:	0668      	lsls	r0, r5, #25
 800c6fa:	d5fb      	bpl.n	800c6f4 <_printf_i+0x1bc>
 800c6fc:	8019      	strh	r1, [r3, #0]
 800c6fe:	2300      	movs	r3, #0
 800c700:	6123      	str	r3, [r4, #16]
 800c702:	4616      	mov	r6, r2
 800c704:	e7bc      	b.n	800c680 <_printf_i+0x148>
 800c706:	6833      	ldr	r3, [r6, #0]
 800c708:	1d1a      	adds	r2, r3, #4
 800c70a:	6032      	str	r2, [r6, #0]
 800c70c:	681e      	ldr	r6, [r3, #0]
 800c70e:	6862      	ldr	r2, [r4, #4]
 800c710:	2100      	movs	r1, #0
 800c712:	4630      	mov	r0, r6
 800c714:	f7f3 fd5c 	bl	80001d0 <memchr>
 800c718:	b108      	cbz	r0, 800c71e <_printf_i+0x1e6>
 800c71a:	1b80      	subs	r0, r0, r6
 800c71c:	6060      	str	r0, [r4, #4]
 800c71e:	6863      	ldr	r3, [r4, #4]
 800c720:	6123      	str	r3, [r4, #16]
 800c722:	2300      	movs	r3, #0
 800c724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c728:	e7aa      	b.n	800c680 <_printf_i+0x148>
 800c72a:	6923      	ldr	r3, [r4, #16]
 800c72c:	4632      	mov	r2, r6
 800c72e:	4649      	mov	r1, r9
 800c730:	4640      	mov	r0, r8
 800c732:	47d0      	blx	sl
 800c734:	3001      	adds	r0, #1
 800c736:	d0ad      	beq.n	800c694 <_printf_i+0x15c>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	079b      	lsls	r3, r3, #30
 800c73c:	d413      	bmi.n	800c766 <_printf_i+0x22e>
 800c73e:	68e0      	ldr	r0, [r4, #12]
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	4298      	cmp	r0, r3
 800c744:	bfb8      	it	lt
 800c746:	4618      	movlt	r0, r3
 800c748:	e7a6      	b.n	800c698 <_printf_i+0x160>
 800c74a:	2301      	movs	r3, #1
 800c74c:	4632      	mov	r2, r6
 800c74e:	4649      	mov	r1, r9
 800c750:	4640      	mov	r0, r8
 800c752:	47d0      	blx	sl
 800c754:	3001      	adds	r0, #1
 800c756:	d09d      	beq.n	800c694 <_printf_i+0x15c>
 800c758:	3501      	adds	r5, #1
 800c75a:	68e3      	ldr	r3, [r4, #12]
 800c75c:	9903      	ldr	r1, [sp, #12]
 800c75e:	1a5b      	subs	r3, r3, r1
 800c760:	42ab      	cmp	r3, r5
 800c762:	dcf2      	bgt.n	800c74a <_printf_i+0x212>
 800c764:	e7eb      	b.n	800c73e <_printf_i+0x206>
 800c766:	2500      	movs	r5, #0
 800c768:	f104 0619 	add.w	r6, r4, #25
 800c76c:	e7f5      	b.n	800c75a <_printf_i+0x222>
 800c76e:	bf00      	nop
 800c770:	0800f8a2 	.word	0x0800f8a2
 800c774:	0800f8b3 	.word	0x0800f8b3

0800c778 <std>:
 800c778:	2300      	movs	r3, #0
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	e9c0 3300 	strd	r3, r3, [r0]
 800c782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c786:	6083      	str	r3, [r0, #8]
 800c788:	8181      	strh	r1, [r0, #12]
 800c78a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c78c:	81c2      	strh	r2, [r0, #14]
 800c78e:	6183      	str	r3, [r0, #24]
 800c790:	4619      	mov	r1, r3
 800c792:	2208      	movs	r2, #8
 800c794:	305c      	adds	r0, #92	@ 0x5c
 800c796:	f000 f914 	bl	800c9c2 <memset>
 800c79a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d0 <std+0x58>)
 800c79c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c79e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d4 <std+0x5c>)
 800c7a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <std+0x60>)
 800c7a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c7dc <std+0x64>)
 800c7a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e0 <std+0x68>)
 800c7ac:	6224      	str	r4, [r4, #32]
 800c7ae:	429c      	cmp	r4, r3
 800c7b0:	d006      	beq.n	800c7c0 <std+0x48>
 800c7b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c7b6:	4294      	cmp	r4, r2
 800c7b8:	d002      	beq.n	800c7c0 <std+0x48>
 800c7ba:	33d0      	adds	r3, #208	@ 0xd0
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	d105      	bne.n	800c7cc <std+0x54>
 800c7c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7c8:	f000 b9ce 	b.w	800cb68 <__retarget_lock_init_recursive>
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800c93d 	.word	0x0800c93d
 800c7d4:	0800c95f 	.word	0x0800c95f
 800c7d8:	0800c997 	.word	0x0800c997
 800c7dc:	0800c9bb 	.word	0x0800c9bb
 800c7e0:	2000532c 	.word	0x2000532c

0800c7e4 <stdio_exit_handler>:
 800c7e4:	4a02      	ldr	r2, [pc, #8]	@ (800c7f0 <stdio_exit_handler+0xc>)
 800c7e6:	4903      	ldr	r1, [pc, #12]	@ (800c7f4 <stdio_exit_handler+0x10>)
 800c7e8:	4803      	ldr	r0, [pc, #12]	@ (800c7f8 <stdio_exit_handler+0x14>)
 800c7ea:	f000 b869 	b.w	800c8c0 <_fwalk_sglue>
 800c7ee:	bf00      	nop
 800c7f0:	2000001c 	.word	0x2000001c
 800c7f4:	0800e4e5 	.word	0x0800e4e5
 800c7f8:	2000002c 	.word	0x2000002c

0800c7fc <cleanup_stdio>:
 800c7fc:	6841      	ldr	r1, [r0, #4]
 800c7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c830 <cleanup_stdio+0x34>)
 800c800:	4299      	cmp	r1, r3
 800c802:	b510      	push	{r4, lr}
 800c804:	4604      	mov	r4, r0
 800c806:	d001      	beq.n	800c80c <cleanup_stdio+0x10>
 800c808:	f001 fe6c 	bl	800e4e4 <_fflush_r>
 800c80c:	68a1      	ldr	r1, [r4, #8]
 800c80e:	4b09      	ldr	r3, [pc, #36]	@ (800c834 <cleanup_stdio+0x38>)
 800c810:	4299      	cmp	r1, r3
 800c812:	d002      	beq.n	800c81a <cleanup_stdio+0x1e>
 800c814:	4620      	mov	r0, r4
 800c816:	f001 fe65 	bl	800e4e4 <_fflush_r>
 800c81a:	68e1      	ldr	r1, [r4, #12]
 800c81c:	4b06      	ldr	r3, [pc, #24]	@ (800c838 <cleanup_stdio+0x3c>)
 800c81e:	4299      	cmp	r1, r3
 800c820:	d004      	beq.n	800c82c <cleanup_stdio+0x30>
 800c822:	4620      	mov	r0, r4
 800c824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c828:	f001 be5c 	b.w	800e4e4 <_fflush_r>
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop
 800c830:	2000532c 	.word	0x2000532c
 800c834:	20005394 	.word	0x20005394
 800c838:	200053fc 	.word	0x200053fc

0800c83c <global_stdio_init.part.0>:
 800c83c:	b510      	push	{r4, lr}
 800c83e:	4b0b      	ldr	r3, [pc, #44]	@ (800c86c <global_stdio_init.part.0+0x30>)
 800c840:	4c0b      	ldr	r4, [pc, #44]	@ (800c870 <global_stdio_init.part.0+0x34>)
 800c842:	4a0c      	ldr	r2, [pc, #48]	@ (800c874 <global_stdio_init.part.0+0x38>)
 800c844:	601a      	str	r2, [r3, #0]
 800c846:	4620      	mov	r0, r4
 800c848:	2200      	movs	r2, #0
 800c84a:	2104      	movs	r1, #4
 800c84c:	f7ff ff94 	bl	800c778 <std>
 800c850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c854:	2201      	movs	r2, #1
 800c856:	2109      	movs	r1, #9
 800c858:	f7ff ff8e 	bl	800c778 <std>
 800c85c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c860:	2202      	movs	r2, #2
 800c862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c866:	2112      	movs	r1, #18
 800c868:	f7ff bf86 	b.w	800c778 <std>
 800c86c:	20005464 	.word	0x20005464
 800c870:	2000532c 	.word	0x2000532c
 800c874:	0800c7e5 	.word	0x0800c7e5

0800c878 <__sfp_lock_acquire>:
 800c878:	4801      	ldr	r0, [pc, #4]	@ (800c880 <__sfp_lock_acquire+0x8>)
 800c87a:	f000 b976 	b.w	800cb6a <__retarget_lock_acquire_recursive>
 800c87e:	bf00      	nop
 800c880:	2000546d 	.word	0x2000546d

0800c884 <__sfp_lock_release>:
 800c884:	4801      	ldr	r0, [pc, #4]	@ (800c88c <__sfp_lock_release+0x8>)
 800c886:	f000 b971 	b.w	800cb6c <__retarget_lock_release_recursive>
 800c88a:	bf00      	nop
 800c88c:	2000546d 	.word	0x2000546d

0800c890 <__sinit>:
 800c890:	b510      	push	{r4, lr}
 800c892:	4604      	mov	r4, r0
 800c894:	f7ff fff0 	bl	800c878 <__sfp_lock_acquire>
 800c898:	6a23      	ldr	r3, [r4, #32]
 800c89a:	b11b      	cbz	r3, 800c8a4 <__sinit+0x14>
 800c89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a0:	f7ff bff0 	b.w	800c884 <__sfp_lock_release>
 800c8a4:	4b04      	ldr	r3, [pc, #16]	@ (800c8b8 <__sinit+0x28>)
 800c8a6:	6223      	str	r3, [r4, #32]
 800c8a8:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__sinit+0x2c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f5      	bne.n	800c89c <__sinit+0xc>
 800c8b0:	f7ff ffc4 	bl	800c83c <global_stdio_init.part.0>
 800c8b4:	e7f2      	b.n	800c89c <__sinit+0xc>
 800c8b6:	bf00      	nop
 800c8b8:	0800c7fd 	.word	0x0800c7fd
 800c8bc:	20005464 	.word	0x20005464

0800c8c0 <_fwalk_sglue>:
 800c8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	4688      	mov	r8, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8d0:	f1b9 0901 	subs.w	r9, r9, #1
 800c8d4:	d505      	bpl.n	800c8e2 <_fwalk_sglue+0x22>
 800c8d6:	6824      	ldr	r4, [r4, #0]
 800c8d8:	2c00      	cmp	r4, #0
 800c8da:	d1f7      	bne.n	800c8cc <_fwalk_sglue+0xc>
 800c8dc:	4630      	mov	r0, r6
 800c8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e2:	89ab      	ldrh	r3, [r5, #12]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d907      	bls.n	800c8f8 <_fwalk_sglue+0x38>
 800c8e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	d003      	beq.n	800c8f8 <_fwalk_sglue+0x38>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c0      	blx	r8
 800c8f6:	4306      	orrs	r6, r0
 800c8f8:	3568      	adds	r5, #104	@ 0x68
 800c8fa:	e7e9      	b.n	800c8d0 <_fwalk_sglue+0x10>

0800c8fc <siprintf>:
 800c8fc:	b40e      	push	{r1, r2, r3}
 800c8fe:	b500      	push	{lr}
 800c900:	b09c      	sub	sp, #112	@ 0x70
 800c902:	ab1d      	add	r3, sp, #116	@ 0x74
 800c904:	9002      	str	r0, [sp, #8]
 800c906:	9006      	str	r0, [sp, #24]
 800c908:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c90c:	4809      	ldr	r0, [pc, #36]	@ (800c934 <siprintf+0x38>)
 800c90e:	9107      	str	r1, [sp, #28]
 800c910:	9104      	str	r1, [sp, #16]
 800c912:	4909      	ldr	r1, [pc, #36]	@ (800c938 <siprintf+0x3c>)
 800c914:	f853 2b04 	ldr.w	r2, [r3], #4
 800c918:	9105      	str	r1, [sp, #20]
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	a902      	add	r1, sp, #8
 800c920:	f001 fc60 	bl	800e1e4 <_svfiprintf_r>
 800c924:	9b02      	ldr	r3, [sp, #8]
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
 800c92a:	b01c      	add	sp, #112	@ 0x70
 800c92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c930:	b003      	add	sp, #12
 800c932:	4770      	bx	lr
 800c934:	20000028 	.word	0x20000028
 800c938:	ffff0208 	.word	0xffff0208

0800c93c <__sread>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	460c      	mov	r4, r1
 800c940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c944:	f000 f8c2 	bl	800cacc <_read_r>
 800c948:	2800      	cmp	r0, #0
 800c94a:	bfab      	itete	ge
 800c94c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c94e:	89a3      	ldrhlt	r3, [r4, #12]
 800c950:	181b      	addge	r3, r3, r0
 800c952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c956:	bfac      	ite	ge
 800c958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c95a:	81a3      	strhlt	r3, [r4, #12]
 800c95c:	bd10      	pop	{r4, pc}

0800c95e <__swrite>:
 800c95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	461f      	mov	r7, r3
 800c964:	898b      	ldrh	r3, [r1, #12]
 800c966:	05db      	lsls	r3, r3, #23
 800c968:	4605      	mov	r5, r0
 800c96a:	460c      	mov	r4, r1
 800c96c:	4616      	mov	r6, r2
 800c96e:	d505      	bpl.n	800c97c <__swrite+0x1e>
 800c970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c974:	2302      	movs	r3, #2
 800c976:	2200      	movs	r2, #0
 800c978:	f000 f896 	bl	800caa8 <_lseek_r>
 800c97c:	89a3      	ldrh	r3, [r4, #12]
 800c97e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c986:	81a3      	strh	r3, [r4, #12]
 800c988:	4632      	mov	r2, r6
 800c98a:	463b      	mov	r3, r7
 800c98c:	4628      	mov	r0, r5
 800c98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	f000 b8ad 	b.w	800caf0 <_write_r>

0800c996 <__sseek>:
 800c996:	b510      	push	{r4, lr}
 800c998:	460c      	mov	r4, r1
 800c99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99e:	f000 f883 	bl	800caa8 <_lseek_r>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	89a3      	ldrh	r3, [r4, #12]
 800c9a6:	bf15      	itete	ne
 800c9a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c9aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9b2:	81a3      	strheq	r3, [r4, #12]
 800c9b4:	bf18      	it	ne
 800c9b6:	81a3      	strhne	r3, [r4, #12]
 800c9b8:	bd10      	pop	{r4, pc}

0800c9ba <__sclose>:
 800c9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9be:	f000 b80d 	b.w	800c9dc <_close_r>

0800c9c2 <memset>:
 800c9c2:	4402      	add	r2, r0
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d100      	bne.n	800c9cc <memset+0xa>
 800c9ca:	4770      	bx	lr
 800c9cc:	f803 1b01 	strb.w	r1, [r3], #1
 800c9d0:	e7f9      	b.n	800c9c6 <memset+0x4>
	...

0800c9d4 <_localeconv_r>:
 800c9d4:	4800      	ldr	r0, [pc, #0]	@ (800c9d8 <_localeconv_r+0x4>)
 800c9d6:	4770      	bx	lr
 800c9d8:	20000168 	.word	0x20000168

0800c9dc <_close_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d06      	ldr	r5, [pc, #24]	@ (800c9f8 <_close_r+0x1c>)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	602b      	str	r3, [r5, #0]
 800c9e8:	f7f6 ff42 	bl	8003870 <_close>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_close_r+0x1a>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_close_r+0x1a>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	20005468 	.word	0x20005468

0800c9fc <_reclaim_reent>:
 800c9fc:	4b29      	ldr	r3, [pc, #164]	@ (800caa4 <_reclaim_reent+0xa8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4283      	cmp	r3, r0
 800ca02:	b570      	push	{r4, r5, r6, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	d04b      	beq.n	800caa0 <_reclaim_reent+0xa4>
 800ca08:	69c3      	ldr	r3, [r0, #28]
 800ca0a:	b1ab      	cbz	r3, 800ca38 <_reclaim_reent+0x3c>
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	b16b      	cbz	r3, 800ca2c <_reclaim_reent+0x30>
 800ca10:	2500      	movs	r5, #0
 800ca12:	69e3      	ldr	r3, [r4, #28]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	5959      	ldr	r1, [r3, r5]
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	d13b      	bne.n	800ca94 <_reclaim_reent+0x98>
 800ca1c:	3504      	adds	r5, #4
 800ca1e:	2d80      	cmp	r5, #128	@ 0x80
 800ca20:	d1f7      	bne.n	800ca12 <_reclaim_reent+0x16>
 800ca22:	69e3      	ldr	r3, [r4, #28]
 800ca24:	4620      	mov	r0, r4
 800ca26:	68d9      	ldr	r1, [r3, #12]
 800ca28:	f000 fefe 	bl	800d828 <_free_r>
 800ca2c:	69e3      	ldr	r3, [r4, #28]
 800ca2e:	6819      	ldr	r1, [r3, #0]
 800ca30:	b111      	cbz	r1, 800ca38 <_reclaim_reent+0x3c>
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fef8 	bl	800d828 <_free_r>
 800ca38:	6961      	ldr	r1, [r4, #20]
 800ca3a:	b111      	cbz	r1, 800ca42 <_reclaim_reent+0x46>
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 fef3 	bl	800d828 <_free_r>
 800ca42:	69e1      	ldr	r1, [r4, #28]
 800ca44:	b111      	cbz	r1, 800ca4c <_reclaim_reent+0x50>
 800ca46:	4620      	mov	r0, r4
 800ca48:	f000 feee 	bl	800d828 <_free_r>
 800ca4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca4e:	b111      	cbz	r1, 800ca56 <_reclaim_reent+0x5a>
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 fee9 	bl	800d828 <_free_r>
 800ca56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca58:	b111      	cbz	r1, 800ca60 <_reclaim_reent+0x64>
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fee4 	bl	800d828 <_free_r>
 800ca60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca62:	b111      	cbz	r1, 800ca6a <_reclaim_reent+0x6e>
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fedf 	bl	800d828 <_free_r>
 800ca6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca6c:	b111      	cbz	r1, 800ca74 <_reclaim_reent+0x78>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 feda 	bl	800d828 <_free_r>
 800ca74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ca76:	b111      	cbz	r1, 800ca7e <_reclaim_reent+0x82>
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 fed5 	bl	800d828 <_free_r>
 800ca7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca80:	b111      	cbz	r1, 800ca88 <_reclaim_reent+0x8c>
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 fed0 	bl	800d828 <_free_r>
 800ca88:	6a23      	ldr	r3, [r4, #32]
 800ca8a:	b14b      	cbz	r3, 800caa0 <_reclaim_reent+0xa4>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca92:	4718      	bx	r3
 800ca94:	680e      	ldr	r6, [r1, #0]
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fec6 	bl	800d828 <_free_r>
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	e7bb      	b.n	800ca18 <_reclaim_reent+0x1c>
 800caa0:	bd70      	pop	{r4, r5, r6, pc}
 800caa2:	bf00      	nop
 800caa4:	20000028 	.word	0x20000028

0800caa8 <_lseek_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	@ (800cac8 <_lseek_r+0x20>)
 800caac:	4604      	mov	r4, r0
 800caae:	4608      	mov	r0, r1
 800cab0:	4611      	mov	r1, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	602a      	str	r2, [r5, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	f7f6 ff01 	bl	80038be <_lseek>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_lseek_r+0x1e>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_lseek_r+0x1e>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20005468 	.word	0x20005468

0800cacc <_read_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d07      	ldr	r5, [pc, #28]	@ (800caec <_read_r+0x20>)
 800cad0:	4604      	mov	r4, r0
 800cad2:	4608      	mov	r0, r1
 800cad4:	4611      	mov	r1, r2
 800cad6:	2200      	movs	r2, #0
 800cad8:	602a      	str	r2, [r5, #0]
 800cada:	461a      	mov	r2, r3
 800cadc:	f7f6 fe8f 	bl	80037fe <_read>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_read_r+0x1e>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b103      	cbz	r3, 800caea <_read_r+0x1e>
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	20005468 	.word	0x20005468

0800caf0 <_write_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	@ (800cb10 <_write_r+0x20>)
 800caf4:	4604      	mov	r4, r0
 800caf6:	4608      	mov	r0, r1
 800caf8:	4611      	mov	r1, r2
 800cafa:	2200      	movs	r2, #0
 800cafc:	602a      	str	r2, [r5, #0]
 800cafe:	461a      	mov	r2, r3
 800cb00:	f7f6 fe9a 	bl	8003838 <_write>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_write_r+0x1e>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_write_r+0x1e>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	20005468 	.word	0x20005468

0800cb14 <__errno>:
 800cb14:	4b01      	ldr	r3, [pc, #4]	@ (800cb1c <__errno+0x8>)
 800cb16:	6818      	ldr	r0, [r3, #0]
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20000028 	.word	0x20000028

0800cb20 <__libc_init_array>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	4d0d      	ldr	r5, [pc, #52]	@ (800cb58 <__libc_init_array+0x38>)
 800cb24:	4c0d      	ldr	r4, [pc, #52]	@ (800cb5c <__libc_init_array+0x3c>)
 800cb26:	1b64      	subs	r4, r4, r5
 800cb28:	10a4      	asrs	r4, r4, #2
 800cb2a:	2600      	movs	r6, #0
 800cb2c:	42a6      	cmp	r6, r4
 800cb2e:	d109      	bne.n	800cb44 <__libc_init_array+0x24>
 800cb30:	4d0b      	ldr	r5, [pc, #44]	@ (800cb60 <__libc_init_array+0x40>)
 800cb32:	4c0c      	ldr	r4, [pc, #48]	@ (800cb64 <__libc_init_array+0x44>)
 800cb34:	f002 f866 	bl	800ec04 <_init>
 800cb38:	1b64      	subs	r4, r4, r5
 800cb3a:	10a4      	asrs	r4, r4, #2
 800cb3c:	2600      	movs	r6, #0
 800cb3e:	42a6      	cmp	r6, r4
 800cb40:	d105      	bne.n	800cb4e <__libc_init_array+0x2e>
 800cb42:	bd70      	pop	{r4, r5, r6, pc}
 800cb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb48:	4798      	blx	r3
 800cb4a:	3601      	adds	r6, #1
 800cb4c:	e7ee      	b.n	800cb2c <__libc_init_array+0xc>
 800cb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb52:	4798      	blx	r3
 800cb54:	3601      	adds	r6, #1
 800cb56:	e7f2      	b.n	800cb3e <__libc_init_array+0x1e>
 800cb58:	0800fc08 	.word	0x0800fc08
 800cb5c:	0800fc08 	.word	0x0800fc08
 800cb60:	0800fc08 	.word	0x0800fc08
 800cb64:	0800fc0c 	.word	0x0800fc0c

0800cb68 <__retarget_lock_init_recursive>:
 800cb68:	4770      	bx	lr

0800cb6a <__retarget_lock_acquire_recursive>:
 800cb6a:	4770      	bx	lr

0800cb6c <__retarget_lock_release_recursive>:
 800cb6c:	4770      	bx	lr

0800cb6e <memcpy>:
 800cb6e:	440a      	add	r2, r1
 800cb70:	4291      	cmp	r1, r2
 800cb72:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb76:	d100      	bne.n	800cb7a <memcpy+0xc>
 800cb78:	4770      	bx	lr
 800cb7a:	b510      	push	{r4, lr}
 800cb7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb84:	4291      	cmp	r1, r2
 800cb86:	d1f9      	bne.n	800cb7c <memcpy+0xe>
 800cb88:	bd10      	pop	{r4, pc}

0800cb8a <quorem>:
 800cb8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8e:	6903      	ldr	r3, [r0, #16]
 800cb90:	690c      	ldr	r4, [r1, #16]
 800cb92:	42a3      	cmp	r3, r4
 800cb94:	4607      	mov	r7, r0
 800cb96:	db7e      	blt.n	800cc96 <quorem+0x10c>
 800cb98:	3c01      	subs	r4, #1
 800cb9a:	f101 0814 	add.w	r8, r1, #20
 800cb9e:	00a3      	lsls	r3, r4, #2
 800cba0:	f100 0514 	add.w	r5, r0, #20
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbaa:	9301      	str	r3, [sp, #4]
 800cbac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbc0:	d32e      	bcc.n	800cc20 <quorem+0x96>
 800cbc2:	f04f 0a00 	mov.w	sl, #0
 800cbc6:	46c4      	mov	ip, r8
 800cbc8:	46ae      	mov	lr, r5
 800cbca:	46d3      	mov	fp, sl
 800cbcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbd0:	b298      	uxth	r0, r3
 800cbd2:	fb06 a000 	mla	r0, r6, r0, sl
 800cbd6:	0c02      	lsrs	r2, r0, #16
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	fb06 2303 	mla	r3, r6, r3, r2
 800cbde:	f8de 2000 	ldr.w	r2, [lr]
 800cbe2:	b280      	uxth	r0, r0
 800cbe4:	b292      	uxth	r2, r2
 800cbe6:	1a12      	subs	r2, r2, r0
 800cbe8:	445a      	add	r2, fp
 800cbea:	f8de 0000 	ldr.w	r0, [lr]
 800cbee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cbf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cbfc:	b292      	uxth	r2, r2
 800cbfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc02:	45e1      	cmp	r9, ip
 800cc04:	f84e 2b04 	str.w	r2, [lr], #4
 800cc08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc0c:	d2de      	bcs.n	800cbcc <quorem+0x42>
 800cc0e:	9b00      	ldr	r3, [sp, #0]
 800cc10:	58eb      	ldr	r3, [r5, r3]
 800cc12:	b92b      	cbnz	r3, 800cc20 <quorem+0x96>
 800cc14:	9b01      	ldr	r3, [sp, #4]
 800cc16:	3b04      	subs	r3, #4
 800cc18:	429d      	cmp	r5, r3
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	d32f      	bcc.n	800cc7e <quorem+0xf4>
 800cc1e:	613c      	str	r4, [r7, #16]
 800cc20:	4638      	mov	r0, r7
 800cc22:	f001 f97b 	bl	800df1c <__mcmp>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	db25      	blt.n	800cc76 <quorem+0xec>
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc32:	f8d1 c000 	ldr.w	ip, [r1]
 800cc36:	fa1f fe82 	uxth.w	lr, r2
 800cc3a:	fa1f f38c 	uxth.w	r3, ip
 800cc3e:	eba3 030e 	sub.w	r3, r3, lr
 800cc42:	4403      	add	r3, r0
 800cc44:	0c12      	lsrs	r2, r2, #16
 800cc46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc54:	45c1      	cmp	r9, r8
 800cc56:	f841 3b04 	str.w	r3, [r1], #4
 800cc5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc5e:	d2e6      	bcs.n	800cc2e <quorem+0xa4>
 800cc60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc68:	b922      	cbnz	r2, 800cc74 <quorem+0xea>
 800cc6a:	3b04      	subs	r3, #4
 800cc6c:	429d      	cmp	r5, r3
 800cc6e:	461a      	mov	r2, r3
 800cc70:	d30b      	bcc.n	800cc8a <quorem+0x100>
 800cc72:	613c      	str	r4, [r7, #16]
 800cc74:	3601      	adds	r6, #1
 800cc76:	4630      	mov	r0, r6
 800cc78:	b003      	add	sp, #12
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	6812      	ldr	r2, [r2, #0]
 800cc80:	3b04      	subs	r3, #4
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	d1cb      	bne.n	800cc1e <quorem+0x94>
 800cc86:	3c01      	subs	r4, #1
 800cc88:	e7c6      	b.n	800cc18 <quorem+0x8e>
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	3b04      	subs	r3, #4
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	d1ef      	bne.n	800cc72 <quorem+0xe8>
 800cc92:	3c01      	subs	r4, #1
 800cc94:	e7ea      	b.n	800cc6c <quorem+0xe2>
 800cc96:	2000      	movs	r0, #0
 800cc98:	e7ee      	b.n	800cc78 <quorem+0xee>
 800cc9a:	0000      	movs	r0, r0
 800cc9c:	0000      	movs	r0, r0
	...

0800cca0 <_dtoa_r>:
 800cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	69c7      	ldr	r7, [r0, #28]
 800cca6:	b099      	sub	sp, #100	@ 0x64
 800cca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ccac:	ec55 4b10 	vmov	r4, r5, d0
 800ccb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ccb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccb4:	4683      	mov	fp, r0
 800ccb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccba:	b97f      	cbnz	r7, 800ccdc <_dtoa_r+0x3c>
 800ccbc:	2010      	movs	r0, #16
 800ccbe:	f000 fdfd 	bl	800d8bc <malloc>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800ccc8:	b920      	cbnz	r0, 800ccd4 <_dtoa_r+0x34>
 800ccca:	4ba7      	ldr	r3, [pc, #668]	@ (800cf68 <_dtoa_r+0x2c8>)
 800cccc:	21ef      	movs	r1, #239	@ 0xef
 800ccce:	48a7      	ldr	r0, [pc, #668]	@ (800cf6c <_dtoa_r+0x2cc>)
 800ccd0:	f001 fc5a 	bl	800e588 <__assert_func>
 800ccd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ccd8:	6007      	str	r7, [r0, #0]
 800ccda:	60c7      	str	r7, [r0, #12]
 800ccdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cce0:	6819      	ldr	r1, [r3, #0]
 800cce2:	b159      	cbz	r1, 800ccfc <_dtoa_r+0x5c>
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	604a      	str	r2, [r1, #4]
 800cce8:	2301      	movs	r3, #1
 800ccea:	4093      	lsls	r3, r2
 800ccec:	608b      	str	r3, [r1, #8]
 800ccee:	4658      	mov	r0, fp
 800ccf0:	f000 feda 	bl	800daa8 <_Bfree>
 800ccf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	1e2b      	subs	r3, r5, #0
 800ccfe:	bfb9      	ittee	lt
 800cd00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd04:	9303      	strlt	r3, [sp, #12]
 800cd06:	2300      	movge	r3, #0
 800cd08:	6033      	strge	r3, [r6, #0]
 800cd0a:	9f03      	ldr	r7, [sp, #12]
 800cd0c:	4b98      	ldr	r3, [pc, #608]	@ (800cf70 <_dtoa_r+0x2d0>)
 800cd0e:	bfbc      	itt	lt
 800cd10:	2201      	movlt	r2, #1
 800cd12:	6032      	strlt	r2, [r6, #0]
 800cd14:	43bb      	bics	r3, r7
 800cd16:	d112      	bne.n	800cd3e <_dtoa_r+0x9e>
 800cd18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd24:	4323      	orrs	r3, r4
 800cd26:	f000 854d 	beq.w	800d7c4 <_dtoa_r+0xb24>
 800cd2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cf84 <_dtoa_r+0x2e4>
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f000 854f 	beq.w	800d7d4 <_dtoa_r+0xb34>
 800cd36:	f10a 0303 	add.w	r3, sl, #3
 800cd3a:	f000 bd49 	b.w	800d7d0 <_dtoa_r+0xb30>
 800cd3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd42:	2200      	movs	r2, #0
 800cd44:	ec51 0b17 	vmov	r0, r1, d7
 800cd48:	2300      	movs	r3, #0
 800cd4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cd4e:	f7f3 febb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd52:	4680      	mov	r8, r0
 800cd54:	b158      	cbz	r0, 800cd6e <_dtoa_r+0xce>
 800cd56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd58:	2301      	movs	r3, #1
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd5e:	b113      	cbz	r3, 800cd66 <_dtoa_r+0xc6>
 800cd60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd62:	4b84      	ldr	r3, [pc, #528]	@ (800cf74 <_dtoa_r+0x2d4>)
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cf88 <_dtoa_r+0x2e8>
 800cd6a:	f000 bd33 	b.w	800d7d4 <_dtoa_r+0xb34>
 800cd6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd72:	aa16      	add	r2, sp, #88	@ 0x58
 800cd74:	a917      	add	r1, sp, #92	@ 0x5c
 800cd76:	4658      	mov	r0, fp
 800cd78:	f001 f980 	bl	800e07c <__d2b>
 800cd7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd80:	4681      	mov	r9, r0
 800cd82:	2e00      	cmp	r6, #0
 800cd84:	d077      	beq.n	800ce76 <_dtoa_r+0x1d6>
 800cd86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cd8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cda0:	4619      	mov	r1, r3
 800cda2:	2200      	movs	r2, #0
 800cda4:	4b74      	ldr	r3, [pc, #464]	@ (800cf78 <_dtoa_r+0x2d8>)
 800cda6:	f7f3 fa6f 	bl	8000288 <__aeabi_dsub>
 800cdaa:	a369      	add	r3, pc, #420	@ (adr r3, 800cf50 <_dtoa_r+0x2b0>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	a368      	add	r3, pc, #416	@ (adr r3, 800cf58 <_dtoa_r+0x2b8>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7f3 fa67 	bl	800028c <__adddf3>
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	f7f3 fbae 	bl	8000524 <__aeabi_i2d>
 800cdc8:	a365      	add	r3, pc, #404	@ (adr r3, 800cf60 <_dtoa_r+0x2c0>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	f7f3 fc13 	bl	80005f8 <__aeabi_dmul>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 fa57 	bl	800028c <__adddf3>
 800cdde:	4604      	mov	r4, r0
 800cde0:	460d      	mov	r5, r1
 800cde2:	f7f3 feb9 	bl	8000b58 <__aeabi_d2iz>
 800cde6:	2200      	movs	r2, #0
 800cde8:	4607      	mov	r7, r0
 800cdea:	2300      	movs	r3, #0
 800cdec:	4620      	mov	r0, r4
 800cdee:	4629      	mov	r1, r5
 800cdf0:	f7f3 fe74 	bl	8000adc <__aeabi_dcmplt>
 800cdf4:	b140      	cbz	r0, 800ce08 <_dtoa_r+0x168>
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f7f3 fb94 	bl	8000524 <__aeabi_i2d>
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	462b      	mov	r3, r5
 800ce00:	f7f3 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce04:	b900      	cbnz	r0, 800ce08 <_dtoa_r+0x168>
 800ce06:	3f01      	subs	r7, #1
 800ce08:	2f16      	cmp	r7, #22
 800ce0a:	d851      	bhi.n	800ceb0 <_dtoa_r+0x210>
 800ce0c:	4b5b      	ldr	r3, [pc, #364]	@ (800cf7c <_dtoa_r+0x2dc>)
 800ce0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce1a:	f7f3 fe5f 	bl	8000adc <__aeabi_dcmplt>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d048      	beq.n	800ceb4 <_dtoa_r+0x214>
 800ce22:	3f01      	subs	r7, #1
 800ce24:	2300      	movs	r3, #0
 800ce26:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce2a:	1b9b      	subs	r3, r3, r6
 800ce2c:	1e5a      	subs	r2, r3, #1
 800ce2e:	bf44      	itt	mi
 800ce30:	f1c3 0801 	rsbmi	r8, r3, #1
 800ce34:	2300      	movmi	r3, #0
 800ce36:	9208      	str	r2, [sp, #32]
 800ce38:	bf54      	ite	pl
 800ce3a:	f04f 0800 	movpl.w	r8, #0
 800ce3e:	9308      	strmi	r3, [sp, #32]
 800ce40:	2f00      	cmp	r7, #0
 800ce42:	db39      	blt.n	800ceb8 <_dtoa_r+0x218>
 800ce44:	9b08      	ldr	r3, [sp, #32]
 800ce46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ce48:	443b      	add	r3, r7
 800ce4a:	9308      	str	r3, [sp, #32]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce52:	2b09      	cmp	r3, #9
 800ce54:	d864      	bhi.n	800cf20 <_dtoa_r+0x280>
 800ce56:	2b05      	cmp	r3, #5
 800ce58:	bfc4      	itt	gt
 800ce5a:	3b04      	subgt	r3, #4
 800ce5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ce5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce60:	f1a3 0302 	sub.w	r3, r3, #2
 800ce64:	bfcc      	ite	gt
 800ce66:	2400      	movgt	r4, #0
 800ce68:	2401      	movle	r4, #1
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d863      	bhi.n	800cf36 <_dtoa_r+0x296>
 800ce6e:	e8df f003 	tbb	[pc, r3]
 800ce72:	372a      	.short	0x372a
 800ce74:	5535      	.short	0x5535
 800ce76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ce7a:	441e      	add	r6, r3
 800ce7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce80:	2b20      	cmp	r3, #32
 800ce82:	bfc1      	itttt	gt
 800ce84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce88:	409f      	lslgt	r7, r3
 800ce8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce92:	bfd6      	itet	le
 800ce94:	f1c3 0320 	rsble	r3, r3, #32
 800ce98:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce9c:	fa04 f003 	lslle.w	r0, r4, r3
 800cea0:	f7f3 fb30 	bl	8000504 <__aeabi_ui2d>
 800cea4:	2201      	movs	r2, #1
 800cea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ceaa:	3e01      	subs	r6, #1
 800ceac:	9214      	str	r2, [sp, #80]	@ 0x50
 800ceae:	e777      	b.n	800cda0 <_dtoa_r+0x100>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e7b8      	b.n	800ce26 <_dtoa_r+0x186>
 800ceb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800ceb6:	e7b7      	b.n	800ce28 <_dtoa_r+0x188>
 800ceb8:	427b      	negs	r3, r7
 800ceba:	930a      	str	r3, [sp, #40]	@ 0x28
 800cebc:	2300      	movs	r3, #0
 800cebe:	eba8 0807 	sub.w	r8, r8, r7
 800cec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cec4:	e7c4      	b.n	800ce50 <_dtoa_r+0x1b0>
 800cec6:	2300      	movs	r3, #0
 800cec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ceca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dc35      	bgt.n	800cf3c <_dtoa_r+0x29c>
 800ced0:	2301      	movs	r3, #1
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	9307      	str	r3, [sp, #28]
 800ced6:	461a      	mov	r2, r3
 800ced8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ceda:	e00b      	b.n	800cef4 <_dtoa_r+0x254>
 800cedc:	2301      	movs	r3, #1
 800cede:	e7f3      	b.n	800cec8 <_dtoa_r+0x228>
 800cee0:	2300      	movs	r3, #0
 800cee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cee6:	18fb      	adds	r3, r7, r3
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	3301      	adds	r3, #1
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	9307      	str	r3, [sp, #28]
 800cef0:	bfb8      	it	lt
 800cef2:	2301      	movlt	r3, #1
 800cef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cef8:	2100      	movs	r1, #0
 800cefa:	2204      	movs	r2, #4
 800cefc:	f102 0514 	add.w	r5, r2, #20
 800cf00:	429d      	cmp	r5, r3
 800cf02:	d91f      	bls.n	800cf44 <_dtoa_r+0x2a4>
 800cf04:	6041      	str	r1, [r0, #4]
 800cf06:	4658      	mov	r0, fp
 800cf08:	f000 fd8e 	bl	800da28 <_Balloc>
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d13c      	bne.n	800cf8c <_dtoa_r+0x2ec>
 800cf12:	4b1b      	ldr	r3, [pc, #108]	@ (800cf80 <_dtoa_r+0x2e0>)
 800cf14:	4602      	mov	r2, r0
 800cf16:	f240 11af 	movw	r1, #431	@ 0x1af
 800cf1a:	e6d8      	b.n	800ccce <_dtoa_r+0x2e>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e7e0      	b.n	800cee2 <_dtoa_r+0x242>
 800cf20:	2401      	movs	r4, #1
 800cf22:	2300      	movs	r3, #0
 800cf24:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf28:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	2200      	movs	r2, #0
 800cf32:	2312      	movs	r3, #18
 800cf34:	e7d0      	b.n	800ced8 <_dtoa_r+0x238>
 800cf36:	2301      	movs	r3, #1
 800cf38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf3a:	e7f5      	b.n	800cf28 <_dtoa_r+0x288>
 800cf3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	9307      	str	r3, [sp, #28]
 800cf42:	e7d7      	b.n	800cef4 <_dtoa_r+0x254>
 800cf44:	3101      	adds	r1, #1
 800cf46:	0052      	lsls	r2, r2, #1
 800cf48:	e7d8      	b.n	800cefc <_dtoa_r+0x25c>
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	636f4361 	.word	0x636f4361
 800cf54:	3fd287a7 	.word	0x3fd287a7
 800cf58:	8b60c8b3 	.word	0x8b60c8b3
 800cf5c:	3fc68a28 	.word	0x3fc68a28
 800cf60:	509f79fb 	.word	0x509f79fb
 800cf64:	3fd34413 	.word	0x3fd34413
 800cf68:	0800f8d1 	.word	0x0800f8d1
 800cf6c:	0800f8e8 	.word	0x0800f8e8
 800cf70:	7ff00000 	.word	0x7ff00000
 800cf74:	0800f8a1 	.word	0x0800f8a1
 800cf78:	3ff80000 	.word	0x3ff80000
 800cf7c:	0800f9e0 	.word	0x0800f9e0
 800cf80:	0800f940 	.word	0x0800f940
 800cf84:	0800f8cd 	.word	0x0800f8cd
 800cf88:	0800f8a0 	.word	0x0800f8a0
 800cf8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf90:	6018      	str	r0, [r3, #0]
 800cf92:	9b07      	ldr	r3, [sp, #28]
 800cf94:	2b0e      	cmp	r3, #14
 800cf96:	f200 80a4 	bhi.w	800d0e2 <_dtoa_r+0x442>
 800cf9a:	2c00      	cmp	r4, #0
 800cf9c:	f000 80a1 	beq.w	800d0e2 <_dtoa_r+0x442>
 800cfa0:	2f00      	cmp	r7, #0
 800cfa2:	dd33      	ble.n	800d00c <_dtoa_r+0x36c>
 800cfa4:	4bad      	ldr	r3, [pc, #692]	@ (800d25c <_dtoa_r+0x5bc>)
 800cfa6:	f007 020f 	and.w	r2, r7, #15
 800cfaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfae:	ed93 7b00 	vldr	d7, [r3]
 800cfb2:	05f8      	lsls	r0, r7, #23
 800cfb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cfb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cfbc:	d516      	bpl.n	800cfec <_dtoa_r+0x34c>
 800cfbe:	4ba8      	ldr	r3, [pc, #672]	@ (800d260 <_dtoa_r+0x5c0>)
 800cfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfc8:	f7f3 fc40 	bl	800084c <__aeabi_ddiv>
 800cfcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfd0:	f004 040f 	and.w	r4, r4, #15
 800cfd4:	2603      	movs	r6, #3
 800cfd6:	4da2      	ldr	r5, [pc, #648]	@ (800d260 <_dtoa_r+0x5c0>)
 800cfd8:	b954      	cbnz	r4, 800cff0 <_dtoa_r+0x350>
 800cfda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfe2:	f7f3 fc33 	bl	800084c <__aeabi_ddiv>
 800cfe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfea:	e028      	b.n	800d03e <_dtoa_r+0x39e>
 800cfec:	2602      	movs	r6, #2
 800cfee:	e7f2      	b.n	800cfd6 <_dtoa_r+0x336>
 800cff0:	07e1      	lsls	r1, r4, #31
 800cff2:	d508      	bpl.n	800d006 <_dtoa_r+0x366>
 800cff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cffc:	f7f3 fafc 	bl	80005f8 <__aeabi_dmul>
 800d000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d004:	3601      	adds	r6, #1
 800d006:	1064      	asrs	r4, r4, #1
 800d008:	3508      	adds	r5, #8
 800d00a:	e7e5      	b.n	800cfd8 <_dtoa_r+0x338>
 800d00c:	f000 80d2 	beq.w	800d1b4 <_dtoa_r+0x514>
 800d010:	427c      	negs	r4, r7
 800d012:	4b92      	ldr	r3, [pc, #584]	@ (800d25c <_dtoa_r+0x5bc>)
 800d014:	4d92      	ldr	r5, [pc, #584]	@ (800d260 <_dtoa_r+0x5c0>)
 800d016:	f004 020f 	and.w	r2, r4, #15
 800d01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d026:	f7f3 fae7 	bl	80005f8 <__aeabi_dmul>
 800d02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d02e:	1124      	asrs	r4, r4, #4
 800d030:	2300      	movs	r3, #0
 800d032:	2602      	movs	r6, #2
 800d034:	2c00      	cmp	r4, #0
 800d036:	f040 80b2 	bne.w	800d19e <_dtoa_r+0x4fe>
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1d3      	bne.n	800cfe6 <_dtoa_r+0x346>
 800d03e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 80b7 	beq.w	800d1b8 <_dtoa_r+0x518>
 800d04a:	4b86      	ldr	r3, [pc, #536]	@ (800d264 <_dtoa_r+0x5c4>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	4620      	mov	r0, r4
 800d050:	4629      	mov	r1, r5
 800d052:	f7f3 fd43 	bl	8000adc <__aeabi_dcmplt>
 800d056:	2800      	cmp	r0, #0
 800d058:	f000 80ae 	beq.w	800d1b8 <_dtoa_r+0x518>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 80aa 	beq.w	800d1b8 <_dtoa_r+0x518>
 800d064:	9b00      	ldr	r3, [sp, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd37      	ble.n	800d0da <_dtoa_r+0x43a>
 800d06a:	1e7b      	subs	r3, r7, #1
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	4620      	mov	r0, r4
 800d070:	4b7d      	ldr	r3, [pc, #500]	@ (800d268 <_dtoa_r+0x5c8>)
 800d072:	2200      	movs	r2, #0
 800d074:	4629      	mov	r1, r5
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d07e:	9c00      	ldr	r4, [sp, #0]
 800d080:	3601      	adds	r6, #1
 800d082:	4630      	mov	r0, r6
 800d084:	f7f3 fa4e 	bl	8000524 <__aeabi_i2d>
 800d088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d08c:	f7f3 fab4 	bl	80005f8 <__aeabi_dmul>
 800d090:	4b76      	ldr	r3, [pc, #472]	@ (800d26c <_dtoa_r+0x5cc>)
 800d092:	2200      	movs	r2, #0
 800d094:	f7f3 f8fa 	bl	800028c <__adddf3>
 800d098:	4605      	mov	r5, r0
 800d09a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d09e:	2c00      	cmp	r4, #0
 800d0a0:	f040 808d 	bne.w	800d1be <_dtoa_r+0x51e>
 800d0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0a8:	4b71      	ldr	r3, [pc, #452]	@ (800d270 <_dtoa_r+0x5d0>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f7f3 f8ec 	bl	8000288 <__aeabi_dsub>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0b8:	462a      	mov	r2, r5
 800d0ba:	4633      	mov	r3, r6
 800d0bc:	f7f3 fd2c 	bl	8000b18 <__aeabi_dcmpgt>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	f040 828b 	bne.w	800d5dc <_dtoa_r+0x93c>
 800d0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d0d0:	f7f3 fd04 	bl	8000adc <__aeabi_dcmplt>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	f040 8128 	bne.w	800d32a <_dtoa_r+0x68a>
 800d0da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f2c0 815a 	blt.w	800d39e <_dtoa_r+0x6fe>
 800d0ea:	2f0e      	cmp	r7, #14
 800d0ec:	f300 8157 	bgt.w	800d39e <_dtoa_r+0x6fe>
 800d0f0:	4b5a      	ldr	r3, [pc, #360]	@ (800d25c <_dtoa_r+0x5bc>)
 800d0f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0f6:	ed93 7b00 	vldr	d7, [r3]
 800d0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	ed8d 7b00 	vstr	d7, [sp]
 800d102:	da03      	bge.n	800d10c <_dtoa_r+0x46c>
 800d104:	9b07      	ldr	r3, [sp, #28]
 800d106:	2b00      	cmp	r3, #0
 800d108:	f340 8101 	ble.w	800d30e <_dtoa_r+0x66e>
 800d10c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d110:	4656      	mov	r6, sl
 800d112:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 fb97 	bl	800084c <__aeabi_ddiv>
 800d11e:	f7f3 fd1b 	bl	8000b58 <__aeabi_d2iz>
 800d122:	4680      	mov	r8, r0
 800d124:	f7f3 f9fe 	bl	8000524 <__aeabi_i2d>
 800d128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4620      	mov	r0, r4
 800d136:	4629      	mov	r1, r5
 800d138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d13c:	f7f3 f8a4 	bl	8000288 <__aeabi_dsub>
 800d140:	f806 4b01 	strb.w	r4, [r6], #1
 800d144:	9d07      	ldr	r5, [sp, #28]
 800d146:	eba6 040a 	sub.w	r4, r6, sl
 800d14a:	42a5      	cmp	r5, r4
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	f040 8117 	bne.w	800d382 <_dtoa_r+0x6e2>
 800d154:	f7f3 f89a 	bl	800028c <__adddf3>
 800d158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	f7f3 fcda 	bl	8000b18 <__aeabi_dcmpgt>
 800d164:	2800      	cmp	r0, #0
 800d166:	f040 80f9 	bne.w	800d35c <_dtoa_r+0x6bc>
 800d16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d16e:	4620      	mov	r0, r4
 800d170:	4629      	mov	r1, r5
 800d172:	f7f3 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d176:	b118      	cbz	r0, 800d180 <_dtoa_r+0x4e0>
 800d178:	f018 0f01 	tst.w	r8, #1
 800d17c:	f040 80ee 	bne.w	800d35c <_dtoa_r+0x6bc>
 800d180:	4649      	mov	r1, r9
 800d182:	4658      	mov	r0, fp
 800d184:	f000 fc90 	bl	800daa8 <_Bfree>
 800d188:	2300      	movs	r3, #0
 800d18a:	7033      	strb	r3, [r6, #0]
 800d18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d18e:	3701      	adds	r7, #1
 800d190:	601f      	str	r7, [r3, #0]
 800d192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 831d 	beq.w	800d7d4 <_dtoa_r+0xb34>
 800d19a:	601e      	str	r6, [r3, #0]
 800d19c:	e31a      	b.n	800d7d4 <_dtoa_r+0xb34>
 800d19e:	07e2      	lsls	r2, r4, #31
 800d1a0:	d505      	bpl.n	800d1ae <_dtoa_r+0x50e>
 800d1a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1a6:	f7f3 fa27 	bl	80005f8 <__aeabi_dmul>
 800d1aa:	3601      	adds	r6, #1
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	1064      	asrs	r4, r4, #1
 800d1b0:	3508      	adds	r5, #8
 800d1b2:	e73f      	b.n	800d034 <_dtoa_r+0x394>
 800d1b4:	2602      	movs	r6, #2
 800d1b6:	e742      	b.n	800d03e <_dtoa_r+0x39e>
 800d1b8:	9c07      	ldr	r4, [sp, #28]
 800d1ba:	9704      	str	r7, [sp, #16]
 800d1bc:	e761      	b.n	800d082 <_dtoa_r+0x3e2>
 800d1be:	4b27      	ldr	r3, [pc, #156]	@ (800d25c <_dtoa_r+0x5bc>)
 800d1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d1ca:	4454      	add	r4, sl
 800d1cc:	2900      	cmp	r1, #0
 800d1ce:	d053      	beq.n	800d278 <_dtoa_r+0x5d8>
 800d1d0:	4928      	ldr	r1, [pc, #160]	@ (800d274 <_dtoa_r+0x5d4>)
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	f7f3 fb3a 	bl	800084c <__aeabi_ddiv>
 800d1d8:	4633      	mov	r3, r6
 800d1da:	462a      	mov	r2, r5
 800d1dc:	f7f3 f854 	bl	8000288 <__aeabi_dsub>
 800d1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1e4:	4656      	mov	r6, sl
 800d1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ea:	f7f3 fcb5 	bl	8000b58 <__aeabi_d2iz>
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	f7f3 f998 	bl	8000524 <__aeabi_i2d>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1fc:	f7f3 f844 	bl	8000288 <__aeabi_dsub>
 800d200:	3530      	adds	r5, #48	@ 0x30
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d20a:	f806 5b01 	strb.w	r5, [r6], #1
 800d20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d212:	f7f3 fc63 	bl	8000adc <__aeabi_dcmplt>
 800d216:	2800      	cmp	r0, #0
 800d218:	d171      	bne.n	800d2fe <_dtoa_r+0x65e>
 800d21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d21e:	4911      	ldr	r1, [pc, #68]	@ (800d264 <_dtoa_r+0x5c4>)
 800d220:	2000      	movs	r0, #0
 800d222:	f7f3 f831 	bl	8000288 <__aeabi_dsub>
 800d226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d22a:	f7f3 fc57 	bl	8000adc <__aeabi_dcmplt>
 800d22e:	2800      	cmp	r0, #0
 800d230:	f040 8095 	bne.w	800d35e <_dtoa_r+0x6be>
 800d234:	42a6      	cmp	r6, r4
 800d236:	f43f af50 	beq.w	800d0da <_dtoa_r+0x43a>
 800d23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d23e:	4b0a      	ldr	r3, [pc, #40]	@ (800d268 <_dtoa_r+0x5c8>)
 800d240:	2200      	movs	r2, #0
 800d242:	f7f3 f9d9 	bl	80005f8 <__aeabi_dmul>
 800d246:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <_dtoa_r+0x5c8>)
 800d248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d24c:	2200      	movs	r2, #0
 800d24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d252:	f7f3 f9d1 	bl	80005f8 <__aeabi_dmul>
 800d256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d25a:	e7c4      	b.n	800d1e6 <_dtoa_r+0x546>
 800d25c:	0800f9e0 	.word	0x0800f9e0
 800d260:	0800f9b8 	.word	0x0800f9b8
 800d264:	3ff00000 	.word	0x3ff00000
 800d268:	40240000 	.word	0x40240000
 800d26c:	401c0000 	.word	0x401c0000
 800d270:	40140000 	.word	0x40140000
 800d274:	3fe00000 	.word	0x3fe00000
 800d278:	4631      	mov	r1, r6
 800d27a:	4628      	mov	r0, r5
 800d27c:	f7f3 f9bc 	bl	80005f8 <__aeabi_dmul>
 800d280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d284:	9415      	str	r4, [sp, #84]	@ 0x54
 800d286:	4656      	mov	r6, sl
 800d288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d28c:	f7f3 fc64 	bl	8000b58 <__aeabi_d2iz>
 800d290:	4605      	mov	r5, r0
 800d292:	f7f3 f947 	bl	8000524 <__aeabi_i2d>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	3530      	adds	r5, #48	@ 0x30
 800d2a4:	f806 5b01 	strb.w	r5, [r6], #1
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	42a6      	cmp	r6, r4
 800d2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2b2:	f04f 0200 	mov.w	r2, #0
 800d2b6:	d124      	bne.n	800d302 <_dtoa_r+0x662>
 800d2b8:	4bac      	ldr	r3, [pc, #688]	@ (800d56c <_dtoa_r+0x8cc>)
 800d2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d2be:	f7f2 ffe5 	bl	800028c <__adddf3>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ca:	f7f3 fc25 	bl	8000b18 <__aeabi_dcmpgt>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d145      	bne.n	800d35e <_dtoa_r+0x6be>
 800d2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d2d6:	49a5      	ldr	r1, [pc, #660]	@ (800d56c <_dtoa_r+0x8cc>)
 800d2d8:	2000      	movs	r0, #0
 800d2da:	f7f2 ffd5 	bl	8000288 <__aeabi_dsub>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2e6:	f7f3 fbf9 	bl	8000adc <__aeabi_dcmplt>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	f43f aef5 	beq.w	800d0da <_dtoa_r+0x43a>
 800d2f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d2f2:	1e73      	subs	r3, r6, #1
 800d2f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d2f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2fa:	2b30      	cmp	r3, #48	@ 0x30
 800d2fc:	d0f8      	beq.n	800d2f0 <_dtoa_r+0x650>
 800d2fe:	9f04      	ldr	r7, [sp, #16]
 800d300:	e73e      	b.n	800d180 <_dtoa_r+0x4e0>
 800d302:	4b9b      	ldr	r3, [pc, #620]	@ (800d570 <_dtoa_r+0x8d0>)
 800d304:	f7f3 f978 	bl	80005f8 <__aeabi_dmul>
 800d308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d30c:	e7bc      	b.n	800d288 <_dtoa_r+0x5e8>
 800d30e:	d10c      	bne.n	800d32a <_dtoa_r+0x68a>
 800d310:	4b98      	ldr	r3, [pc, #608]	@ (800d574 <_dtoa_r+0x8d4>)
 800d312:	2200      	movs	r2, #0
 800d314:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d318:	f7f3 f96e 	bl	80005f8 <__aeabi_dmul>
 800d31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d320:	f7f3 fbf0 	bl	8000b04 <__aeabi_dcmpge>
 800d324:	2800      	cmp	r0, #0
 800d326:	f000 8157 	beq.w	800d5d8 <_dtoa_r+0x938>
 800d32a:	2400      	movs	r4, #0
 800d32c:	4625      	mov	r5, r4
 800d32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d330:	43db      	mvns	r3, r3
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	4656      	mov	r6, sl
 800d336:	2700      	movs	r7, #0
 800d338:	4621      	mov	r1, r4
 800d33a:	4658      	mov	r0, fp
 800d33c:	f000 fbb4 	bl	800daa8 <_Bfree>
 800d340:	2d00      	cmp	r5, #0
 800d342:	d0dc      	beq.n	800d2fe <_dtoa_r+0x65e>
 800d344:	b12f      	cbz	r7, 800d352 <_dtoa_r+0x6b2>
 800d346:	42af      	cmp	r7, r5
 800d348:	d003      	beq.n	800d352 <_dtoa_r+0x6b2>
 800d34a:	4639      	mov	r1, r7
 800d34c:	4658      	mov	r0, fp
 800d34e:	f000 fbab 	bl	800daa8 <_Bfree>
 800d352:	4629      	mov	r1, r5
 800d354:	4658      	mov	r0, fp
 800d356:	f000 fba7 	bl	800daa8 <_Bfree>
 800d35a:	e7d0      	b.n	800d2fe <_dtoa_r+0x65e>
 800d35c:	9704      	str	r7, [sp, #16]
 800d35e:	4633      	mov	r3, r6
 800d360:	461e      	mov	r6, r3
 800d362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d366:	2a39      	cmp	r2, #57	@ 0x39
 800d368:	d107      	bne.n	800d37a <_dtoa_r+0x6da>
 800d36a:	459a      	cmp	sl, r3
 800d36c:	d1f8      	bne.n	800d360 <_dtoa_r+0x6c0>
 800d36e:	9a04      	ldr	r2, [sp, #16]
 800d370:	3201      	adds	r2, #1
 800d372:	9204      	str	r2, [sp, #16]
 800d374:	2230      	movs	r2, #48	@ 0x30
 800d376:	f88a 2000 	strb.w	r2, [sl]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	3201      	adds	r2, #1
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	e7bd      	b.n	800d2fe <_dtoa_r+0x65e>
 800d382:	4b7b      	ldr	r3, [pc, #492]	@ (800d570 <_dtoa_r+0x8d0>)
 800d384:	2200      	movs	r2, #0
 800d386:	f7f3 f937 	bl	80005f8 <__aeabi_dmul>
 800d38a:	2200      	movs	r2, #0
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	460d      	mov	r5, r1
 800d392:	f7f3 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 800d396:	2800      	cmp	r0, #0
 800d398:	f43f aebb 	beq.w	800d112 <_dtoa_r+0x472>
 800d39c:	e6f0      	b.n	800d180 <_dtoa_r+0x4e0>
 800d39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d3a0:	2a00      	cmp	r2, #0
 800d3a2:	f000 80db 	beq.w	800d55c <_dtoa_r+0x8bc>
 800d3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3a8:	2a01      	cmp	r2, #1
 800d3aa:	f300 80bf 	bgt.w	800d52c <_dtoa_r+0x88c>
 800d3ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d3b0:	2a00      	cmp	r2, #0
 800d3b2:	f000 80b7 	beq.w	800d524 <_dtoa_r+0x884>
 800d3b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d3ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3bc:	4646      	mov	r6, r8
 800d3be:	9a08      	ldr	r2, [sp, #32]
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	441a      	add	r2, r3
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	4498      	add	r8, r3
 800d3c8:	9208      	str	r2, [sp, #32]
 800d3ca:	f000 fc21 	bl	800dc10 <__i2b>
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	b15e      	cbz	r6, 800d3ea <_dtoa_r+0x74a>
 800d3d2:	9b08      	ldr	r3, [sp, #32]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dd08      	ble.n	800d3ea <_dtoa_r+0x74a>
 800d3d8:	42b3      	cmp	r3, r6
 800d3da:	9a08      	ldr	r2, [sp, #32]
 800d3dc:	bfa8      	it	ge
 800d3de:	4633      	movge	r3, r6
 800d3e0:	eba8 0803 	sub.w	r8, r8, r3
 800d3e4:	1af6      	subs	r6, r6, r3
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	9308      	str	r3, [sp, #32]
 800d3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ec:	b1f3      	cbz	r3, 800d42c <_dtoa_r+0x78c>
 800d3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80b7 	beq.w	800d564 <_dtoa_r+0x8c4>
 800d3f6:	b18c      	cbz	r4, 800d41c <_dtoa_r+0x77c>
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	4658      	mov	r0, fp
 800d3fe:	f000 fcc7 	bl	800dd90 <__pow5mult>
 800d402:	464a      	mov	r2, r9
 800d404:	4601      	mov	r1, r0
 800d406:	4605      	mov	r5, r0
 800d408:	4658      	mov	r0, fp
 800d40a:	f000 fc17 	bl	800dc3c <__multiply>
 800d40e:	4649      	mov	r1, r9
 800d410:	9004      	str	r0, [sp, #16]
 800d412:	4658      	mov	r0, fp
 800d414:	f000 fb48 	bl	800daa8 <_Bfree>
 800d418:	9b04      	ldr	r3, [sp, #16]
 800d41a:	4699      	mov	r9, r3
 800d41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d41e:	1b1a      	subs	r2, r3, r4
 800d420:	d004      	beq.n	800d42c <_dtoa_r+0x78c>
 800d422:	4649      	mov	r1, r9
 800d424:	4658      	mov	r0, fp
 800d426:	f000 fcb3 	bl	800dd90 <__pow5mult>
 800d42a:	4681      	mov	r9, r0
 800d42c:	2101      	movs	r1, #1
 800d42e:	4658      	mov	r0, fp
 800d430:	f000 fbee 	bl	800dc10 <__i2b>
 800d434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d436:	4604      	mov	r4, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 81cf 	beq.w	800d7dc <_dtoa_r+0xb3c>
 800d43e:	461a      	mov	r2, r3
 800d440:	4601      	mov	r1, r0
 800d442:	4658      	mov	r0, fp
 800d444:	f000 fca4 	bl	800dd90 <__pow5mult>
 800d448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	4604      	mov	r4, r0
 800d44e:	f300 8095 	bgt.w	800d57c <_dtoa_r+0x8dc>
 800d452:	9b02      	ldr	r3, [sp, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f040 8087 	bne.w	800d568 <_dtoa_r+0x8c8>
 800d45a:	9b03      	ldr	r3, [sp, #12]
 800d45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d460:	2b00      	cmp	r3, #0
 800d462:	f040 8089 	bne.w	800d578 <_dtoa_r+0x8d8>
 800d466:	9b03      	ldr	r3, [sp, #12]
 800d468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d46c:	0d1b      	lsrs	r3, r3, #20
 800d46e:	051b      	lsls	r3, r3, #20
 800d470:	b12b      	cbz	r3, 800d47e <_dtoa_r+0x7de>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	3301      	adds	r3, #1
 800d476:	9308      	str	r3, [sp, #32]
 800d478:	f108 0801 	add.w	r8, r8, #1
 800d47c:	2301      	movs	r3, #1
 800d47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 81b0 	beq.w	800d7e8 <_dtoa_r+0xb48>
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d48e:	6918      	ldr	r0, [r3, #16]
 800d490:	f000 fb72 	bl	800db78 <__hi0bits>
 800d494:	f1c0 0020 	rsb	r0, r0, #32
 800d498:	9b08      	ldr	r3, [sp, #32]
 800d49a:	4418      	add	r0, r3
 800d49c:	f010 001f 	ands.w	r0, r0, #31
 800d4a0:	d077      	beq.n	800d592 <_dtoa_r+0x8f2>
 800d4a2:	f1c0 0320 	rsb	r3, r0, #32
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	dd6b      	ble.n	800d582 <_dtoa_r+0x8e2>
 800d4aa:	9b08      	ldr	r3, [sp, #32]
 800d4ac:	f1c0 001c 	rsb	r0, r0, #28
 800d4b0:	4403      	add	r3, r0
 800d4b2:	4480      	add	r8, r0
 800d4b4:	4406      	add	r6, r0
 800d4b6:	9308      	str	r3, [sp, #32]
 800d4b8:	f1b8 0f00 	cmp.w	r8, #0
 800d4bc:	dd05      	ble.n	800d4ca <_dtoa_r+0x82a>
 800d4be:	4649      	mov	r1, r9
 800d4c0:	4642      	mov	r2, r8
 800d4c2:	4658      	mov	r0, fp
 800d4c4:	f000 fcbe 	bl	800de44 <__lshift>
 800d4c8:	4681      	mov	r9, r0
 800d4ca:	9b08      	ldr	r3, [sp, #32]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dd05      	ble.n	800d4dc <_dtoa_r+0x83c>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	4658      	mov	r0, fp
 800d4d6:	f000 fcb5 	bl	800de44 <__lshift>
 800d4da:	4604      	mov	r4, r0
 800d4dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d059      	beq.n	800d596 <_dtoa_r+0x8f6>
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	f000 fd19 	bl	800df1c <__mcmp>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	da53      	bge.n	800d596 <_dtoa_r+0x8f6>
 800d4ee:	1e7b      	subs	r3, r7, #1
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	220a      	movs	r2, #10
 800d4f8:	4658      	mov	r0, fp
 800d4fa:	f000 faf7 	bl	800daec <__multadd>
 800d4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d500:	4681      	mov	r9, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 8172 	beq.w	800d7ec <_dtoa_r+0xb4c>
 800d508:	2300      	movs	r3, #0
 800d50a:	4629      	mov	r1, r5
 800d50c:	220a      	movs	r2, #10
 800d50e:	4658      	mov	r0, fp
 800d510:	f000 faec 	bl	800daec <__multadd>
 800d514:	9b00      	ldr	r3, [sp, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	4605      	mov	r5, r0
 800d51a:	dc67      	bgt.n	800d5ec <_dtoa_r+0x94c>
 800d51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51e:	2b02      	cmp	r3, #2
 800d520:	dc41      	bgt.n	800d5a6 <_dtoa_r+0x906>
 800d522:	e063      	b.n	800d5ec <_dtoa_r+0x94c>
 800d524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d52a:	e746      	b.n	800d3ba <_dtoa_r+0x71a>
 800d52c:	9b07      	ldr	r3, [sp, #28]
 800d52e:	1e5c      	subs	r4, r3, #1
 800d530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d532:	42a3      	cmp	r3, r4
 800d534:	bfbf      	itttt	lt
 800d536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d53a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d53c:	1ae3      	sublt	r3, r4, r3
 800d53e:	bfb4      	ite	lt
 800d540:	18d2      	addlt	r2, r2, r3
 800d542:	1b1c      	subge	r4, r3, r4
 800d544:	9b07      	ldr	r3, [sp, #28]
 800d546:	bfbc      	itt	lt
 800d548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d54a:	2400      	movlt	r4, #0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfb5      	itete	lt
 800d550:	eba8 0603 	sublt.w	r6, r8, r3
 800d554:	9b07      	ldrge	r3, [sp, #28]
 800d556:	2300      	movlt	r3, #0
 800d558:	4646      	movge	r6, r8
 800d55a:	e730      	b.n	800d3be <_dtoa_r+0x71e>
 800d55c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d55e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d560:	4646      	mov	r6, r8
 800d562:	e735      	b.n	800d3d0 <_dtoa_r+0x730>
 800d564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d566:	e75c      	b.n	800d422 <_dtoa_r+0x782>
 800d568:	2300      	movs	r3, #0
 800d56a:	e788      	b.n	800d47e <_dtoa_r+0x7de>
 800d56c:	3fe00000 	.word	0x3fe00000
 800d570:	40240000 	.word	0x40240000
 800d574:	40140000 	.word	0x40140000
 800d578:	9b02      	ldr	r3, [sp, #8]
 800d57a:	e780      	b.n	800d47e <_dtoa_r+0x7de>
 800d57c:	2300      	movs	r3, #0
 800d57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d580:	e782      	b.n	800d488 <_dtoa_r+0x7e8>
 800d582:	d099      	beq.n	800d4b8 <_dtoa_r+0x818>
 800d584:	9a08      	ldr	r2, [sp, #32]
 800d586:	331c      	adds	r3, #28
 800d588:	441a      	add	r2, r3
 800d58a:	4498      	add	r8, r3
 800d58c:	441e      	add	r6, r3
 800d58e:	9208      	str	r2, [sp, #32]
 800d590:	e792      	b.n	800d4b8 <_dtoa_r+0x818>
 800d592:	4603      	mov	r3, r0
 800d594:	e7f6      	b.n	800d584 <_dtoa_r+0x8e4>
 800d596:	9b07      	ldr	r3, [sp, #28]
 800d598:	9704      	str	r7, [sp, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	dc20      	bgt.n	800d5e0 <_dtoa_r+0x940>
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	dd1e      	ble.n	800d5e4 <_dtoa_r+0x944>
 800d5a6:	9b00      	ldr	r3, [sp, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f47f aec0 	bne.w	800d32e <_dtoa_r+0x68e>
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	2205      	movs	r2, #5
 800d5b2:	4658      	mov	r0, fp
 800d5b4:	f000 fa9a 	bl	800daec <__multadd>
 800d5b8:	4601      	mov	r1, r0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4648      	mov	r0, r9
 800d5be:	f000 fcad 	bl	800df1c <__mcmp>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	f77f aeb3 	ble.w	800d32e <_dtoa_r+0x68e>
 800d5c8:	4656      	mov	r6, sl
 800d5ca:	2331      	movs	r3, #49	@ 0x31
 800d5cc:	f806 3b01 	strb.w	r3, [r6], #1
 800d5d0:	9b04      	ldr	r3, [sp, #16]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	e6ae      	b.n	800d336 <_dtoa_r+0x696>
 800d5d8:	9c07      	ldr	r4, [sp, #28]
 800d5da:	9704      	str	r7, [sp, #16]
 800d5dc:	4625      	mov	r5, r4
 800d5de:	e7f3      	b.n	800d5c8 <_dtoa_r+0x928>
 800d5e0:	9b07      	ldr	r3, [sp, #28]
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f000 8104 	beq.w	800d7f4 <_dtoa_r+0xb54>
 800d5ec:	2e00      	cmp	r6, #0
 800d5ee:	dd05      	ble.n	800d5fc <_dtoa_r+0x95c>
 800d5f0:	4629      	mov	r1, r5
 800d5f2:	4632      	mov	r2, r6
 800d5f4:	4658      	mov	r0, fp
 800d5f6:	f000 fc25 	bl	800de44 <__lshift>
 800d5fa:	4605      	mov	r5, r0
 800d5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d05a      	beq.n	800d6b8 <_dtoa_r+0xa18>
 800d602:	6869      	ldr	r1, [r5, #4]
 800d604:	4658      	mov	r0, fp
 800d606:	f000 fa0f 	bl	800da28 <_Balloc>
 800d60a:	4606      	mov	r6, r0
 800d60c:	b928      	cbnz	r0, 800d61a <_dtoa_r+0x97a>
 800d60e:	4b84      	ldr	r3, [pc, #528]	@ (800d820 <_dtoa_r+0xb80>)
 800d610:	4602      	mov	r2, r0
 800d612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d616:	f7ff bb5a 	b.w	800ccce <_dtoa_r+0x2e>
 800d61a:	692a      	ldr	r2, [r5, #16]
 800d61c:	3202      	adds	r2, #2
 800d61e:	0092      	lsls	r2, r2, #2
 800d620:	f105 010c 	add.w	r1, r5, #12
 800d624:	300c      	adds	r0, #12
 800d626:	f7ff faa2 	bl	800cb6e <memcpy>
 800d62a:	2201      	movs	r2, #1
 800d62c:	4631      	mov	r1, r6
 800d62e:	4658      	mov	r0, fp
 800d630:	f000 fc08 	bl	800de44 <__lshift>
 800d634:	f10a 0301 	add.w	r3, sl, #1
 800d638:	9307      	str	r3, [sp, #28]
 800d63a:	9b00      	ldr	r3, [sp, #0]
 800d63c:	4453      	add	r3, sl
 800d63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d640:	9b02      	ldr	r3, [sp, #8]
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	462f      	mov	r7, r5
 800d648:	930a      	str	r3, [sp, #40]	@ 0x28
 800d64a:	4605      	mov	r5, r0
 800d64c:	9b07      	ldr	r3, [sp, #28]
 800d64e:	4621      	mov	r1, r4
 800d650:	3b01      	subs	r3, #1
 800d652:	4648      	mov	r0, r9
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	f7ff fa98 	bl	800cb8a <quorem>
 800d65a:	4639      	mov	r1, r7
 800d65c:	9002      	str	r0, [sp, #8]
 800d65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d662:	4648      	mov	r0, r9
 800d664:	f000 fc5a 	bl	800df1c <__mcmp>
 800d668:	462a      	mov	r2, r5
 800d66a:	9008      	str	r0, [sp, #32]
 800d66c:	4621      	mov	r1, r4
 800d66e:	4658      	mov	r0, fp
 800d670:	f000 fc70 	bl	800df54 <__mdiff>
 800d674:	68c2      	ldr	r2, [r0, #12]
 800d676:	4606      	mov	r6, r0
 800d678:	bb02      	cbnz	r2, 800d6bc <_dtoa_r+0xa1c>
 800d67a:	4601      	mov	r1, r0
 800d67c:	4648      	mov	r0, r9
 800d67e:	f000 fc4d 	bl	800df1c <__mcmp>
 800d682:	4602      	mov	r2, r0
 800d684:	4631      	mov	r1, r6
 800d686:	4658      	mov	r0, fp
 800d688:	920e      	str	r2, [sp, #56]	@ 0x38
 800d68a:	f000 fa0d 	bl	800daa8 <_Bfree>
 800d68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d692:	9e07      	ldr	r6, [sp, #28]
 800d694:	ea43 0102 	orr.w	r1, r3, r2
 800d698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d69a:	4319      	orrs	r1, r3
 800d69c:	d110      	bne.n	800d6c0 <_dtoa_r+0xa20>
 800d69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6a2:	d029      	beq.n	800d6f8 <_dtoa_r+0xa58>
 800d6a4:	9b08      	ldr	r3, [sp, #32]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dd02      	ble.n	800d6b0 <_dtoa_r+0xa10>
 800d6aa:	9b02      	ldr	r3, [sp, #8]
 800d6ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d6b0:	9b00      	ldr	r3, [sp, #0]
 800d6b2:	f883 8000 	strb.w	r8, [r3]
 800d6b6:	e63f      	b.n	800d338 <_dtoa_r+0x698>
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	e7bb      	b.n	800d634 <_dtoa_r+0x994>
 800d6bc:	2201      	movs	r2, #1
 800d6be:	e7e1      	b.n	800d684 <_dtoa_r+0x9e4>
 800d6c0:	9b08      	ldr	r3, [sp, #32]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	db04      	blt.n	800d6d0 <_dtoa_r+0xa30>
 800d6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d6c8:	430b      	orrs	r3, r1
 800d6ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	d120      	bne.n	800d712 <_dtoa_r+0xa72>
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	dded      	ble.n	800d6b0 <_dtoa_r+0xa10>
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	4658      	mov	r0, fp
 800d6da:	f000 fbb3 	bl	800de44 <__lshift>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4681      	mov	r9, r0
 800d6e2:	f000 fc1b 	bl	800df1c <__mcmp>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	dc03      	bgt.n	800d6f2 <_dtoa_r+0xa52>
 800d6ea:	d1e1      	bne.n	800d6b0 <_dtoa_r+0xa10>
 800d6ec:	f018 0f01 	tst.w	r8, #1
 800d6f0:	d0de      	beq.n	800d6b0 <_dtoa_r+0xa10>
 800d6f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6f6:	d1d8      	bne.n	800d6aa <_dtoa_r+0xa0a>
 800d6f8:	9a00      	ldr	r2, [sp, #0]
 800d6fa:	2339      	movs	r3, #57	@ 0x39
 800d6fc:	7013      	strb	r3, [r2, #0]
 800d6fe:	4633      	mov	r3, r6
 800d700:	461e      	mov	r6, r3
 800d702:	3b01      	subs	r3, #1
 800d704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d708:	2a39      	cmp	r2, #57	@ 0x39
 800d70a:	d052      	beq.n	800d7b2 <_dtoa_r+0xb12>
 800d70c:	3201      	adds	r2, #1
 800d70e:	701a      	strb	r2, [r3, #0]
 800d710:	e612      	b.n	800d338 <_dtoa_r+0x698>
 800d712:	2a00      	cmp	r2, #0
 800d714:	dd07      	ble.n	800d726 <_dtoa_r+0xa86>
 800d716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d71a:	d0ed      	beq.n	800d6f8 <_dtoa_r+0xa58>
 800d71c:	9a00      	ldr	r2, [sp, #0]
 800d71e:	f108 0301 	add.w	r3, r8, #1
 800d722:	7013      	strb	r3, [r2, #0]
 800d724:	e608      	b.n	800d338 <_dtoa_r+0x698>
 800d726:	9b07      	ldr	r3, [sp, #28]
 800d728:	9a07      	ldr	r2, [sp, #28]
 800d72a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d730:	4293      	cmp	r3, r2
 800d732:	d028      	beq.n	800d786 <_dtoa_r+0xae6>
 800d734:	4649      	mov	r1, r9
 800d736:	2300      	movs	r3, #0
 800d738:	220a      	movs	r2, #10
 800d73a:	4658      	mov	r0, fp
 800d73c:	f000 f9d6 	bl	800daec <__multadd>
 800d740:	42af      	cmp	r7, r5
 800d742:	4681      	mov	r9, r0
 800d744:	f04f 0300 	mov.w	r3, #0
 800d748:	f04f 020a 	mov.w	r2, #10
 800d74c:	4639      	mov	r1, r7
 800d74e:	4658      	mov	r0, fp
 800d750:	d107      	bne.n	800d762 <_dtoa_r+0xac2>
 800d752:	f000 f9cb 	bl	800daec <__multadd>
 800d756:	4607      	mov	r7, r0
 800d758:	4605      	mov	r5, r0
 800d75a:	9b07      	ldr	r3, [sp, #28]
 800d75c:	3301      	adds	r3, #1
 800d75e:	9307      	str	r3, [sp, #28]
 800d760:	e774      	b.n	800d64c <_dtoa_r+0x9ac>
 800d762:	f000 f9c3 	bl	800daec <__multadd>
 800d766:	4629      	mov	r1, r5
 800d768:	4607      	mov	r7, r0
 800d76a:	2300      	movs	r3, #0
 800d76c:	220a      	movs	r2, #10
 800d76e:	4658      	mov	r0, fp
 800d770:	f000 f9bc 	bl	800daec <__multadd>
 800d774:	4605      	mov	r5, r0
 800d776:	e7f0      	b.n	800d75a <_dtoa_r+0xaba>
 800d778:	9b00      	ldr	r3, [sp, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bfcc      	ite	gt
 800d77e:	461e      	movgt	r6, r3
 800d780:	2601      	movle	r6, #1
 800d782:	4456      	add	r6, sl
 800d784:	2700      	movs	r7, #0
 800d786:	4649      	mov	r1, r9
 800d788:	2201      	movs	r2, #1
 800d78a:	4658      	mov	r0, fp
 800d78c:	f000 fb5a 	bl	800de44 <__lshift>
 800d790:	4621      	mov	r1, r4
 800d792:	4681      	mov	r9, r0
 800d794:	f000 fbc2 	bl	800df1c <__mcmp>
 800d798:	2800      	cmp	r0, #0
 800d79a:	dcb0      	bgt.n	800d6fe <_dtoa_r+0xa5e>
 800d79c:	d102      	bne.n	800d7a4 <_dtoa_r+0xb04>
 800d79e:	f018 0f01 	tst.w	r8, #1
 800d7a2:	d1ac      	bne.n	800d6fe <_dtoa_r+0xa5e>
 800d7a4:	4633      	mov	r3, r6
 800d7a6:	461e      	mov	r6, r3
 800d7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7ac:	2a30      	cmp	r2, #48	@ 0x30
 800d7ae:	d0fa      	beq.n	800d7a6 <_dtoa_r+0xb06>
 800d7b0:	e5c2      	b.n	800d338 <_dtoa_r+0x698>
 800d7b2:	459a      	cmp	sl, r3
 800d7b4:	d1a4      	bne.n	800d700 <_dtoa_r+0xa60>
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	9304      	str	r3, [sp, #16]
 800d7bc:	2331      	movs	r3, #49	@ 0x31
 800d7be:	f88a 3000 	strb.w	r3, [sl]
 800d7c2:	e5b9      	b.n	800d338 <_dtoa_r+0x698>
 800d7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d824 <_dtoa_r+0xb84>
 800d7ca:	b11b      	cbz	r3, 800d7d4 <_dtoa_r+0xb34>
 800d7cc:	f10a 0308 	add.w	r3, sl, #8
 800d7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	b019      	add	sp, #100	@ 0x64
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	f77f ae37 	ble.w	800d452 <_dtoa_r+0x7b2>
 800d7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e655      	b.n	800d498 <_dtoa_r+0x7f8>
 800d7ec:	9b00      	ldr	r3, [sp, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f77f aed6 	ble.w	800d5a0 <_dtoa_r+0x900>
 800d7f4:	4656      	mov	r6, sl
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4648      	mov	r0, r9
 800d7fa:	f7ff f9c6 	bl	800cb8a <quorem>
 800d7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d802:	f806 8b01 	strb.w	r8, [r6], #1
 800d806:	9b00      	ldr	r3, [sp, #0]
 800d808:	eba6 020a 	sub.w	r2, r6, sl
 800d80c:	4293      	cmp	r3, r2
 800d80e:	ddb3      	ble.n	800d778 <_dtoa_r+0xad8>
 800d810:	4649      	mov	r1, r9
 800d812:	2300      	movs	r3, #0
 800d814:	220a      	movs	r2, #10
 800d816:	4658      	mov	r0, fp
 800d818:	f000 f968 	bl	800daec <__multadd>
 800d81c:	4681      	mov	r9, r0
 800d81e:	e7ea      	b.n	800d7f6 <_dtoa_r+0xb56>
 800d820:	0800f940 	.word	0x0800f940
 800d824:	0800f8c4 	.word	0x0800f8c4

0800d828 <_free_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4605      	mov	r5, r0
 800d82c:	2900      	cmp	r1, #0
 800d82e:	d041      	beq.n	800d8b4 <_free_r+0x8c>
 800d830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d834:	1f0c      	subs	r4, r1, #4
 800d836:	2b00      	cmp	r3, #0
 800d838:	bfb8      	it	lt
 800d83a:	18e4      	addlt	r4, r4, r3
 800d83c:	f000 f8e8 	bl	800da10 <__malloc_lock>
 800d840:	4a1d      	ldr	r2, [pc, #116]	@ (800d8b8 <_free_r+0x90>)
 800d842:	6813      	ldr	r3, [r2, #0]
 800d844:	b933      	cbnz	r3, 800d854 <_free_r+0x2c>
 800d846:	6063      	str	r3, [r4, #4]
 800d848:	6014      	str	r4, [r2, #0]
 800d84a:	4628      	mov	r0, r5
 800d84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d850:	f000 b8e4 	b.w	800da1c <__malloc_unlock>
 800d854:	42a3      	cmp	r3, r4
 800d856:	d908      	bls.n	800d86a <_free_r+0x42>
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	1821      	adds	r1, r4, r0
 800d85c:	428b      	cmp	r3, r1
 800d85e:	bf01      	itttt	eq
 800d860:	6819      	ldreq	r1, [r3, #0]
 800d862:	685b      	ldreq	r3, [r3, #4]
 800d864:	1809      	addeq	r1, r1, r0
 800d866:	6021      	streq	r1, [r4, #0]
 800d868:	e7ed      	b.n	800d846 <_free_r+0x1e>
 800d86a:	461a      	mov	r2, r3
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	b10b      	cbz	r3, 800d874 <_free_r+0x4c>
 800d870:	42a3      	cmp	r3, r4
 800d872:	d9fa      	bls.n	800d86a <_free_r+0x42>
 800d874:	6811      	ldr	r1, [r2, #0]
 800d876:	1850      	adds	r0, r2, r1
 800d878:	42a0      	cmp	r0, r4
 800d87a:	d10b      	bne.n	800d894 <_free_r+0x6c>
 800d87c:	6820      	ldr	r0, [r4, #0]
 800d87e:	4401      	add	r1, r0
 800d880:	1850      	adds	r0, r2, r1
 800d882:	4283      	cmp	r3, r0
 800d884:	6011      	str	r1, [r2, #0]
 800d886:	d1e0      	bne.n	800d84a <_free_r+0x22>
 800d888:	6818      	ldr	r0, [r3, #0]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	6053      	str	r3, [r2, #4]
 800d88e:	4408      	add	r0, r1
 800d890:	6010      	str	r0, [r2, #0]
 800d892:	e7da      	b.n	800d84a <_free_r+0x22>
 800d894:	d902      	bls.n	800d89c <_free_r+0x74>
 800d896:	230c      	movs	r3, #12
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	e7d6      	b.n	800d84a <_free_r+0x22>
 800d89c:	6820      	ldr	r0, [r4, #0]
 800d89e:	1821      	adds	r1, r4, r0
 800d8a0:	428b      	cmp	r3, r1
 800d8a2:	bf04      	itt	eq
 800d8a4:	6819      	ldreq	r1, [r3, #0]
 800d8a6:	685b      	ldreq	r3, [r3, #4]
 800d8a8:	6063      	str	r3, [r4, #4]
 800d8aa:	bf04      	itt	eq
 800d8ac:	1809      	addeq	r1, r1, r0
 800d8ae:	6021      	streq	r1, [r4, #0]
 800d8b0:	6054      	str	r4, [r2, #4]
 800d8b2:	e7ca      	b.n	800d84a <_free_r+0x22>
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20005474 	.word	0x20005474

0800d8bc <malloc>:
 800d8bc:	4b02      	ldr	r3, [pc, #8]	@ (800d8c8 <malloc+0xc>)
 800d8be:	4601      	mov	r1, r0
 800d8c0:	6818      	ldr	r0, [r3, #0]
 800d8c2:	f000 b825 	b.w	800d910 <_malloc_r>
 800d8c6:	bf00      	nop
 800d8c8:	20000028 	.word	0x20000028

0800d8cc <sbrk_aligned>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	4e0f      	ldr	r6, [pc, #60]	@ (800d90c <sbrk_aligned+0x40>)
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	6831      	ldr	r1, [r6, #0]
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	b911      	cbnz	r1, 800d8de <sbrk_aligned+0x12>
 800d8d8:	f000 fe46 	bl	800e568 <_sbrk_r>
 800d8dc:	6030      	str	r0, [r6, #0]
 800d8de:	4621      	mov	r1, r4
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	f000 fe41 	bl	800e568 <_sbrk_r>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	d103      	bne.n	800d8f2 <sbrk_aligned+0x26>
 800d8ea:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	bd70      	pop	{r4, r5, r6, pc}
 800d8f2:	1cc4      	adds	r4, r0, #3
 800d8f4:	f024 0403 	bic.w	r4, r4, #3
 800d8f8:	42a0      	cmp	r0, r4
 800d8fa:	d0f8      	beq.n	800d8ee <sbrk_aligned+0x22>
 800d8fc:	1a21      	subs	r1, r4, r0
 800d8fe:	4628      	mov	r0, r5
 800d900:	f000 fe32 	bl	800e568 <_sbrk_r>
 800d904:	3001      	adds	r0, #1
 800d906:	d1f2      	bne.n	800d8ee <sbrk_aligned+0x22>
 800d908:	e7ef      	b.n	800d8ea <sbrk_aligned+0x1e>
 800d90a:	bf00      	nop
 800d90c:	20005470 	.word	0x20005470

0800d910 <_malloc_r>:
 800d910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d914:	1ccd      	adds	r5, r1, #3
 800d916:	f025 0503 	bic.w	r5, r5, #3
 800d91a:	3508      	adds	r5, #8
 800d91c:	2d0c      	cmp	r5, #12
 800d91e:	bf38      	it	cc
 800d920:	250c      	movcc	r5, #12
 800d922:	2d00      	cmp	r5, #0
 800d924:	4606      	mov	r6, r0
 800d926:	db01      	blt.n	800d92c <_malloc_r+0x1c>
 800d928:	42a9      	cmp	r1, r5
 800d92a:	d904      	bls.n	800d936 <_malloc_r+0x26>
 800d92c:	230c      	movs	r3, #12
 800d92e:	6033      	str	r3, [r6, #0]
 800d930:	2000      	movs	r0, #0
 800d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da0c <_malloc_r+0xfc>
 800d93a:	f000 f869 	bl	800da10 <__malloc_lock>
 800d93e:	f8d8 3000 	ldr.w	r3, [r8]
 800d942:	461c      	mov	r4, r3
 800d944:	bb44      	cbnz	r4, 800d998 <_malloc_r+0x88>
 800d946:	4629      	mov	r1, r5
 800d948:	4630      	mov	r0, r6
 800d94a:	f7ff ffbf 	bl	800d8cc <sbrk_aligned>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	4604      	mov	r4, r0
 800d952:	d158      	bne.n	800da06 <_malloc_r+0xf6>
 800d954:	f8d8 4000 	ldr.w	r4, [r8]
 800d958:	4627      	mov	r7, r4
 800d95a:	2f00      	cmp	r7, #0
 800d95c:	d143      	bne.n	800d9e6 <_malloc_r+0xd6>
 800d95e:	2c00      	cmp	r4, #0
 800d960:	d04b      	beq.n	800d9fa <_malloc_r+0xea>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	4639      	mov	r1, r7
 800d966:	4630      	mov	r0, r6
 800d968:	eb04 0903 	add.w	r9, r4, r3
 800d96c:	f000 fdfc 	bl	800e568 <_sbrk_r>
 800d970:	4581      	cmp	r9, r0
 800d972:	d142      	bne.n	800d9fa <_malloc_r+0xea>
 800d974:	6821      	ldr	r1, [r4, #0]
 800d976:	1a6d      	subs	r5, r5, r1
 800d978:	4629      	mov	r1, r5
 800d97a:	4630      	mov	r0, r6
 800d97c:	f7ff ffa6 	bl	800d8cc <sbrk_aligned>
 800d980:	3001      	adds	r0, #1
 800d982:	d03a      	beq.n	800d9fa <_malloc_r+0xea>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	442b      	add	r3, r5
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	f8d8 3000 	ldr.w	r3, [r8]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	bb62      	cbnz	r2, 800d9ec <_malloc_r+0xdc>
 800d992:	f8c8 7000 	str.w	r7, [r8]
 800d996:	e00f      	b.n	800d9b8 <_malloc_r+0xa8>
 800d998:	6822      	ldr	r2, [r4, #0]
 800d99a:	1b52      	subs	r2, r2, r5
 800d99c:	d420      	bmi.n	800d9e0 <_malloc_r+0xd0>
 800d99e:	2a0b      	cmp	r2, #11
 800d9a0:	d917      	bls.n	800d9d2 <_malloc_r+0xc2>
 800d9a2:	1961      	adds	r1, r4, r5
 800d9a4:	42a3      	cmp	r3, r4
 800d9a6:	6025      	str	r5, [r4, #0]
 800d9a8:	bf18      	it	ne
 800d9aa:	6059      	strne	r1, [r3, #4]
 800d9ac:	6863      	ldr	r3, [r4, #4]
 800d9ae:	bf08      	it	eq
 800d9b0:	f8c8 1000 	streq.w	r1, [r8]
 800d9b4:	5162      	str	r2, [r4, r5]
 800d9b6:	604b      	str	r3, [r1, #4]
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f000 f82f 	bl	800da1c <__malloc_unlock>
 800d9be:	f104 000b 	add.w	r0, r4, #11
 800d9c2:	1d23      	adds	r3, r4, #4
 800d9c4:	f020 0007 	bic.w	r0, r0, #7
 800d9c8:	1ac2      	subs	r2, r0, r3
 800d9ca:	bf1c      	itt	ne
 800d9cc:	1a1b      	subne	r3, r3, r0
 800d9ce:	50a3      	strne	r3, [r4, r2]
 800d9d0:	e7af      	b.n	800d932 <_malloc_r+0x22>
 800d9d2:	6862      	ldr	r2, [r4, #4]
 800d9d4:	42a3      	cmp	r3, r4
 800d9d6:	bf0c      	ite	eq
 800d9d8:	f8c8 2000 	streq.w	r2, [r8]
 800d9dc:	605a      	strne	r2, [r3, #4]
 800d9de:	e7eb      	b.n	800d9b8 <_malloc_r+0xa8>
 800d9e0:	4623      	mov	r3, r4
 800d9e2:	6864      	ldr	r4, [r4, #4]
 800d9e4:	e7ae      	b.n	800d944 <_malloc_r+0x34>
 800d9e6:	463c      	mov	r4, r7
 800d9e8:	687f      	ldr	r7, [r7, #4]
 800d9ea:	e7b6      	b.n	800d95a <_malloc_r+0x4a>
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d1fb      	bne.n	800d9ec <_malloc_r+0xdc>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	6053      	str	r3, [r2, #4]
 800d9f8:	e7de      	b.n	800d9b8 <_malloc_r+0xa8>
 800d9fa:	230c      	movs	r3, #12
 800d9fc:	6033      	str	r3, [r6, #0]
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 f80c 	bl	800da1c <__malloc_unlock>
 800da04:	e794      	b.n	800d930 <_malloc_r+0x20>
 800da06:	6005      	str	r5, [r0, #0]
 800da08:	e7d6      	b.n	800d9b8 <_malloc_r+0xa8>
 800da0a:	bf00      	nop
 800da0c:	20005474 	.word	0x20005474

0800da10 <__malloc_lock>:
 800da10:	4801      	ldr	r0, [pc, #4]	@ (800da18 <__malloc_lock+0x8>)
 800da12:	f7ff b8aa 	b.w	800cb6a <__retarget_lock_acquire_recursive>
 800da16:	bf00      	nop
 800da18:	2000546c 	.word	0x2000546c

0800da1c <__malloc_unlock>:
 800da1c:	4801      	ldr	r0, [pc, #4]	@ (800da24 <__malloc_unlock+0x8>)
 800da1e:	f7ff b8a5 	b.w	800cb6c <__retarget_lock_release_recursive>
 800da22:	bf00      	nop
 800da24:	2000546c 	.word	0x2000546c

0800da28 <_Balloc>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	69c6      	ldr	r6, [r0, #28]
 800da2c:	4604      	mov	r4, r0
 800da2e:	460d      	mov	r5, r1
 800da30:	b976      	cbnz	r6, 800da50 <_Balloc+0x28>
 800da32:	2010      	movs	r0, #16
 800da34:	f7ff ff42 	bl	800d8bc <malloc>
 800da38:	4602      	mov	r2, r0
 800da3a:	61e0      	str	r0, [r4, #28]
 800da3c:	b920      	cbnz	r0, 800da48 <_Balloc+0x20>
 800da3e:	4b18      	ldr	r3, [pc, #96]	@ (800daa0 <_Balloc+0x78>)
 800da40:	4818      	ldr	r0, [pc, #96]	@ (800daa4 <_Balloc+0x7c>)
 800da42:	216b      	movs	r1, #107	@ 0x6b
 800da44:	f000 fda0 	bl	800e588 <__assert_func>
 800da48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da4c:	6006      	str	r6, [r0, #0]
 800da4e:	60c6      	str	r6, [r0, #12]
 800da50:	69e6      	ldr	r6, [r4, #28]
 800da52:	68f3      	ldr	r3, [r6, #12]
 800da54:	b183      	cbz	r3, 800da78 <_Balloc+0x50>
 800da56:	69e3      	ldr	r3, [r4, #28]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da5e:	b9b8      	cbnz	r0, 800da90 <_Balloc+0x68>
 800da60:	2101      	movs	r1, #1
 800da62:	fa01 f605 	lsl.w	r6, r1, r5
 800da66:	1d72      	adds	r2, r6, #5
 800da68:	0092      	lsls	r2, r2, #2
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fdaa 	bl	800e5c4 <_calloc_r>
 800da70:	b160      	cbz	r0, 800da8c <_Balloc+0x64>
 800da72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da76:	e00e      	b.n	800da96 <_Balloc+0x6e>
 800da78:	2221      	movs	r2, #33	@ 0x21
 800da7a:	2104      	movs	r1, #4
 800da7c:	4620      	mov	r0, r4
 800da7e:	f000 fda1 	bl	800e5c4 <_calloc_r>
 800da82:	69e3      	ldr	r3, [r4, #28]
 800da84:	60f0      	str	r0, [r6, #12]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e4      	bne.n	800da56 <_Balloc+0x2e>
 800da8c:	2000      	movs	r0, #0
 800da8e:	bd70      	pop	{r4, r5, r6, pc}
 800da90:	6802      	ldr	r2, [r0, #0]
 800da92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da96:	2300      	movs	r3, #0
 800da98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da9c:	e7f7      	b.n	800da8e <_Balloc+0x66>
 800da9e:	bf00      	nop
 800daa0:	0800f8d1 	.word	0x0800f8d1
 800daa4:	0800f951 	.word	0x0800f951

0800daa8 <_Bfree>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	69c6      	ldr	r6, [r0, #28]
 800daac:	4605      	mov	r5, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	b976      	cbnz	r6, 800dad0 <_Bfree+0x28>
 800dab2:	2010      	movs	r0, #16
 800dab4:	f7ff ff02 	bl	800d8bc <malloc>
 800dab8:	4602      	mov	r2, r0
 800daba:	61e8      	str	r0, [r5, #28]
 800dabc:	b920      	cbnz	r0, 800dac8 <_Bfree+0x20>
 800dabe:	4b09      	ldr	r3, [pc, #36]	@ (800dae4 <_Bfree+0x3c>)
 800dac0:	4809      	ldr	r0, [pc, #36]	@ (800dae8 <_Bfree+0x40>)
 800dac2:	218f      	movs	r1, #143	@ 0x8f
 800dac4:	f000 fd60 	bl	800e588 <__assert_func>
 800dac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dacc:	6006      	str	r6, [r0, #0]
 800dace:	60c6      	str	r6, [r0, #12]
 800dad0:	b13c      	cbz	r4, 800dae2 <_Bfree+0x3a>
 800dad2:	69eb      	ldr	r3, [r5, #28]
 800dad4:	6862      	ldr	r2, [r4, #4]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dadc:	6021      	str	r1, [r4, #0]
 800dade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dae2:	bd70      	pop	{r4, r5, r6, pc}
 800dae4:	0800f8d1 	.word	0x0800f8d1
 800dae8:	0800f951 	.word	0x0800f951

0800daec <__multadd>:
 800daec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf0:	690d      	ldr	r5, [r1, #16]
 800daf2:	4607      	mov	r7, r0
 800daf4:	460c      	mov	r4, r1
 800daf6:	461e      	mov	r6, r3
 800daf8:	f101 0c14 	add.w	ip, r1, #20
 800dafc:	2000      	movs	r0, #0
 800dafe:	f8dc 3000 	ldr.w	r3, [ip]
 800db02:	b299      	uxth	r1, r3
 800db04:	fb02 6101 	mla	r1, r2, r1, r6
 800db08:	0c1e      	lsrs	r6, r3, #16
 800db0a:	0c0b      	lsrs	r3, r1, #16
 800db0c:	fb02 3306 	mla	r3, r2, r6, r3
 800db10:	b289      	uxth	r1, r1
 800db12:	3001      	adds	r0, #1
 800db14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db18:	4285      	cmp	r5, r0
 800db1a:	f84c 1b04 	str.w	r1, [ip], #4
 800db1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db22:	dcec      	bgt.n	800dafe <__multadd+0x12>
 800db24:	b30e      	cbz	r6, 800db6a <__multadd+0x7e>
 800db26:	68a3      	ldr	r3, [r4, #8]
 800db28:	42ab      	cmp	r3, r5
 800db2a:	dc19      	bgt.n	800db60 <__multadd+0x74>
 800db2c:	6861      	ldr	r1, [r4, #4]
 800db2e:	4638      	mov	r0, r7
 800db30:	3101      	adds	r1, #1
 800db32:	f7ff ff79 	bl	800da28 <_Balloc>
 800db36:	4680      	mov	r8, r0
 800db38:	b928      	cbnz	r0, 800db46 <__multadd+0x5a>
 800db3a:	4602      	mov	r2, r0
 800db3c:	4b0c      	ldr	r3, [pc, #48]	@ (800db70 <__multadd+0x84>)
 800db3e:	480d      	ldr	r0, [pc, #52]	@ (800db74 <__multadd+0x88>)
 800db40:	21ba      	movs	r1, #186	@ 0xba
 800db42:	f000 fd21 	bl	800e588 <__assert_func>
 800db46:	6922      	ldr	r2, [r4, #16]
 800db48:	3202      	adds	r2, #2
 800db4a:	f104 010c 	add.w	r1, r4, #12
 800db4e:	0092      	lsls	r2, r2, #2
 800db50:	300c      	adds	r0, #12
 800db52:	f7ff f80c 	bl	800cb6e <memcpy>
 800db56:	4621      	mov	r1, r4
 800db58:	4638      	mov	r0, r7
 800db5a:	f7ff ffa5 	bl	800daa8 <_Bfree>
 800db5e:	4644      	mov	r4, r8
 800db60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db64:	3501      	adds	r5, #1
 800db66:	615e      	str	r6, [r3, #20]
 800db68:	6125      	str	r5, [r4, #16]
 800db6a:	4620      	mov	r0, r4
 800db6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db70:	0800f940 	.word	0x0800f940
 800db74:	0800f951 	.word	0x0800f951

0800db78 <__hi0bits>:
 800db78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db7c:	4603      	mov	r3, r0
 800db7e:	bf36      	itet	cc
 800db80:	0403      	lslcc	r3, r0, #16
 800db82:	2000      	movcs	r0, #0
 800db84:	2010      	movcc	r0, #16
 800db86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db8a:	bf3c      	itt	cc
 800db8c:	021b      	lslcc	r3, r3, #8
 800db8e:	3008      	addcc	r0, #8
 800db90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db94:	bf3c      	itt	cc
 800db96:	011b      	lslcc	r3, r3, #4
 800db98:	3004      	addcc	r0, #4
 800db9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db9e:	bf3c      	itt	cc
 800dba0:	009b      	lslcc	r3, r3, #2
 800dba2:	3002      	addcc	r0, #2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	db05      	blt.n	800dbb4 <__hi0bits+0x3c>
 800dba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dbac:	f100 0001 	add.w	r0, r0, #1
 800dbb0:	bf08      	it	eq
 800dbb2:	2020      	moveq	r0, #32
 800dbb4:	4770      	bx	lr

0800dbb6 <__lo0bits>:
 800dbb6:	6803      	ldr	r3, [r0, #0]
 800dbb8:	4602      	mov	r2, r0
 800dbba:	f013 0007 	ands.w	r0, r3, #7
 800dbbe:	d00b      	beq.n	800dbd8 <__lo0bits+0x22>
 800dbc0:	07d9      	lsls	r1, r3, #31
 800dbc2:	d421      	bmi.n	800dc08 <__lo0bits+0x52>
 800dbc4:	0798      	lsls	r0, r3, #30
 800dbc6:	bf49      	itett	mi
 800dbc8:	085b      	lsrmi	r3, r3, #1
 800dbca:	089b      	lsrpl	r3, r3, #2
 800dbcc:	2001      	movmi	r0, #1
 800dbce:	6013      	strmi	r3, [r2, #0]
 800dbd0:	bf5c      	itt	pl
 800dbd2:	6013      	strpl	r3, [r2, #0]
 800dbd4:	2002      	movpl	r0, #2
 800dbd6:	4770      	bx	lr
 800dbd8:	b299      	uxth	r1, r3
 800dbda:	b909      	cbnz	r1, 800dbe0 <__lo0bits+0x2a>
 800dbdc:	0c1b      	lsrs	r3, r3, #16
 800dbde:	2010      	movs	r0, #16
 800dbe0:	b2d9      	uxtb	r1, r3
 800dbe2:	b909      	cbnz	r1, 800dbe8 <__lo0bits+0x32>
 800dbe4:	3008      	adds	r0, #8
 800dbe6:	0a1b      	lsrs	r3, r3, #8
 800dbe8:	0719      	lsls	r1, r3, #28
 800dbea:	bf04      	itt	eq
 800dbec:	091b      	lsreq	r3, r3, #4
 800dbee:	3004      	addeq	r0, #4
 800dbf0:	0799      	lsls	r1, r3, #30
 800dbf2:	bf04      	itt	eq
 800dbf4:	089b      	lsreq	r3, r3, #2
 800dbf6:	3002      	addeq	r0, #2
 800dbf8:	07d9      	lsls	r1, r3, #31
 800dbfa:	d403      	bmi.n	800dc04 <__lo0bits+0x4e>
 800dbfc:	085b      	lsrs	r3, r3, #1
 800dbfe:	f100 0001 	add.w	r0, r0, #1
 800dc02:	d003      	beq.n	800dc0c <__lo0bits+0x56>
 800dc04:	6013      	str	r3, [r2, #0]
 800dc06:	4770      	bx	lr
 800dc08:	2000      	movs	r0, #0
 800dc0a:	4770      	bx	lr
 800dc0c:	2020      	movs	r0, #32
 800dc0e:	4770      	bx	lr

0800dc10 <__i2b>:
 800dc10:	b510      	push	{r4, lr}
 800dc12:	460c      	mov	r4, r1
 800dc14:	2101      	movs	r1, #1
 800dc16:	f7ff ff07 	bl	800da28 <_Balloc>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	b928      	cbnz	r0, 800dc2a <__i2b+0x1a>
 800dc1e:	4b05      	ldr	r3, [pc, #20]	@ (800dc34 <__i2b+0x24>)
 800dc20:	4805      	ldr	r0, [pc, #20]	@ (800dc38 <__i2b+0x28>)
 800dc22:	f240 1145 	movw	r1, #325	@ 0x145
 800dc26:	f000 fcaf 	bl	800e588 <__assert_func>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	6144      	str	r4, [r0, #20]
 800dc2e:	6103      	str	r3, [r0, #16]
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	bf00      	nop
 800dc34:	0800f940 	.word	0x0800f940
 800dc38:	0800f951 	.word	0x0800f951

0800dc3c <__multiply>:
 800dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc40:	4614      	mov	r4, r2
 800dc42:	690a      	ldr	r2, [r1, #16]
 800dc44:	6923      	ldr	r3, [r4, #16]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	bfa8      	it	ge
 800dc4a:	4623      	movge	r3, r4
 800dc4c:	460f      	mov	r7, r1
 800dc4e:	bfa4      	itt	ge
 800dc50:	460c      	movge	r4, r1
 800dc52:	461f      	movge	r7, r3
 800dc54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc5c:	68a3      	ldr	r3, [r4, #8]
 800dc5e:	6861      	ldr	r1, [r4, #4]
 800dc60:	eb0a 0609 	add.w	r6, sl, r9
 800dc64:	42b3      	cmp	r3, r6
 800dc66:	b085      	sub	sp, #20
 800dc68:	bfb8      	it	lt
 800dc6a:	3101      	addlt	r1, #1
 800dc6c:	f7ff fedc 	bl	800da28 <_Balloc>
 800dc70:	b930      	cbnz	r0, 800dc80 <__multiply+0x44>
 800dc72:	4602      	mov	r2, r0
 800dc74:	4b44      	ldr	r3, [pc, #272]	@ (800dd88 <__multiply+0x14c>)
 800dc76:	4845      	ldr	r0, [pc, #276]	@ (800dd8c <__multiply+0x150>)
 800dc78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc7c:	f000 fc84 	bl	800e588 <__assert_func>
 800dc80:	f100 0514 	add.w	r5, r0, #20
 800dc84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc88:	462b      	mov	r3, r5
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	4543      	cmp	r3, r8
 800dc8e:	d321      	bcc.n	800dcd4 <__multiply+0x98>
 800dc90:	f107 0114 	add.w	r1, r7, #20
 800dc94:	f104 0214 	add.w	r2, r4, #20
 800dc98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dca0:	9302      	str	r3, [sp, #8]
 800dca2:	1b13      	subs	r3, r2, r4
 800dca4:	3b15      	subs	r3, #21
 800dca6:	f023 0303 	bic.w	r3, r3, #3
 800dcaa:	3304      	adds	r3, #4
 800dcac:	f104 0715 	add.w	r7, r4, #21
 800dcb0:	42ba      	cmp	r2, r7
 800dcb2:	bf38      	it	cc
 800dcb4:	2304      	movcc	r3, #4
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	9b02      	ldr	r3, [sp, #8]
 800dcba:	9103      	str	r1, [sp, #12]
 800dcbc:	428b      	cmp	r3, r1
 800dcbe:	d80c      	bhi.n	800dcda <__multiply+0x9e>
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	dd03      	ble.n	800dccc <__multiply+0x90>
 800dcc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d05b      	beq.n	800dd84 <__multiply+0x148>
 800dccc:	6106      	str	r6, [r0, #16]
 800dcce:	b005      	add	sp, #20
 800dcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd4:	f843 2b04 	str.w	r2, [r3], #4
 800dcd8:	e7d8      	b.n	800dc8c <__multiply+0x50>
 800dcda:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcde:	f1ba 0f00 	cmp.w	sl, #0
 800dce2:	d024      	beq.n	800dd2e <__multiply+0xf2>
 800dce4:	f104 0e14 	add.w	lr, r4, #20
 800dce8:	46a9      	mov	r9, r5
 800dcea:	f04f 0c00 	mov.w	ip, #0
 800dcee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcf2:	f8d9 3000 	ldr.w	r3, [r9]
 800dcf6:	fa1f fb87 	uxth.w	fp, r7
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dd04:	f8d9 7000 	ldr.w	r7, [r9]
 800dd08:	4463      	add	r3, ip
 800dd0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd0e:	fb0a c70b 	mla	r7, sl, fp, ip
 800dd12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd1c:	4572      	cmp	r2, lr
 800dd1e:	f849 3b04 	str.w	r3, [r9], #4
 800dd22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd26:	d8e2      	bhi.n	800dcee <__multiply+0xb2>
 800dd28:	9b01      	ldr	r3, [sp, #4]
 800dd2a:	f845 c003 	str.w	ip, [r5, r3]
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd34:	3104      	adds	r1, #4
 800dd36:	f1b9 0f00 	cmp.w	r9, #0
 800dd3a:	d021      	beq.n	800dd80 <__multiply+0x144>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	f104 0c14 	add.w	ip, r4, #20
 800dd42:	46ae      	mov	lr, r5
 800dd44:	f04f 0a00 	mov.w	sl, #0
 800dd48:	f8bc b000 	ldrh.w	fp, [ip]
 800dd4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd50:	fb09 770b 	mla	r7, r9, fp, r7
 800dd54:	4457      	add	r7, sl
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd5c:	f84e 3b04 	str.w	r3, [lr], #4
 800dd60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd68:	f8be 3000 	ldrh.w	r3, [lr]
 800dd6c:	fb09 330a 	mla	r3, r9, sl, r3
 800dd70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd74:	4562      	cmp	r2, ip
 800dd76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd7a:	d8e5      	bhi.n	800dd48 <__multiply+0x10c>
 800dd7c:	9f01      	ldr	r7, [sp, #4]
 800dd7e:	51eb      	str	r3, [r5, r7]
 800dd80:	3504      	adds	r5, #4
 800dd82:	e799      	b.n	800dcb8 <__multiply+0x7c>
 800dd84:	3e01      	subs	r6, #1
 800dd86:	e79b      	b.n	800dcc0 <__multiply+0x84>
 800dd88:	0800f940 	.word	0x0800f940
 800dd8c:	0800f951 	.word	0x0800f951

0800dd90 <__pow5mult>:
 800dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd94:	4615      	mov	r5, r2
 800dd96:	f012 0203 	ands.w	r2, r2, #3
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	460e      	mov	r6, r1
 800dd9e:	d007      	beq.n	800ddb0 <__pow5mult+0x20>
 800dda0:	4c25      	ldr	r4, [pc, #148]	@ (800de38 <__pow5mult+0xa8>)
 800dda2:	3a01      	subs	r2, #1
 800dda4:	2300      	movs	r3, #0
 800dda6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddaa:	f7ff fe9f 	bl	800daec <__multadd>
 800ddae:	4606      	mov	r6, r0
 800ddb0:	10ad      	asrs	r5, r5, #2
 800ddb2:	d03d      	beq.n	800de30 <__pow5mult+0xa0>
 800ddb4:	69fc      	ldr	r4, [r7, #28]
 800ddb6:	b97c      	cbnz	r4, 800ddd8 <__pow5mult+0x48>
 800ddb8:	2010      	movs	r0, #16
 800ddba:	f7ff fd7f 	bl	800d8bc <malloc>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	61f8      	str	r0, [r7, #28]
 800ddc2:	b928      	cbnz	r0, 800ddd0 <__pow5mult+0x40>
 800ddc4:	4b1d      	ldr	r3, [pc, #116]	@ (800de3c <__pow5mult+0xac>)
 800ddc6:	481e      	ldr	r0, [pc, #120]	@ (800de40 <__pow5mult+0xb0>)
 800ddc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ddcc:	f000 fbdc 	bl	800e588 <__assert_func>
 800ddd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddd4:	6004      	str	r4, [r0, #0]
 800ddd6:	60c4      	str	r4, [r0, #12]
 800ddd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dde0:	b94c      	cbnz	r4, 800ddf6 <__pow5mult+0x66>
 800dde2:	f240 2171 	movw	r1, #625	@ 0x271
 800dde6:	4638      	mov	r0, r7
 800dde8:	f7ff ff12 	bl	800dc10 <__i2b>
 800ddec:	2300      	movs	r3, #0
 800ddee:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	6003      	str	r3, [r0, #0]
 800ddf6:	f04f 0900 	mov.w	r9, #0
 800ddfa:	07eb      	lsls	r3, r5, #31
 800ddfc:	d50a      	bpl.n	800de14 <__pow5mult+0x84>
 800ddfe:	4631      	mov	r1, r6
 800de00:	4622      	mov	r2, r4
 800de02:	4638      	mov	r0, r7
 800de04:	f7ff ff1a 	bl	800dc3c <__multiply>
 800de08:	4631      	mov	r1, r6
 800de0a:	4680      	mov	r8, r0
 800de0c:	4638      	mov	r0, r7
 800de0e:	f7ff fe4b 	bl	800daa8 <_Bfree>
 800de12:	4646      	mov	r6, r8
 800de14:	106d      	asrs	r5, r5, #1
 800de16:	d00b      	beq.n	800de30 <__pow5mult+0xa0>
 800de18:	6820      	ldr	r0, [r4, #0]
 800de1a:	b938      	cbnz	r0, 800de2c <__pow5mult+0x9c>
 800de1c:	4622      	mov	r2, r4
 800de1e:	4621      	mov	r1, r4
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff ff0b 	bl	800dc3c <__multiply>
 800de26:	6020      	str	r0, [r4, #0]
 800de28:	f8c0 9000 	str.w	r9, [r0]
 800de2c:	4604      	mov	r4, r0
 800de2e:	e7e4      	b.n	800ddfa <__pow5mult+0x6a>
 800de30:	4630      	mov	r0, r6
 800de32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de36:	bf00      	nop
 800de38:	0800f9ac 	.word	0x0800f9ac
 800de3c:	0800f8d1 	.word	0x0800f8d1
 800de40:	0800f951 	.word	0x0800f951

0800de44 <__lshift>:
 800de44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de48:	460c      	mov	r4, r1
 800de4a:	6849      	ldr	r1, [r1, #4]
 800de4c:	6923      	ldr	r3, [r4, #16]
 800de4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de52:	68a3      	ldr	r3, [r4, #8]
 800de54:	4607      	mov	r7, r0
 800de56:	4691      	mov	r9, r2
 800de58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de5c:	f108 0601 	add.w	r6, r8, #1
 800de60:	42b3      	cmp	r3, r6
 800de62:	db0b      	blt.n	800de7c <__lshift+0x38>
 800de64:	4638      	mov	r0, r7
 800de66:	f7ff fddf 	bl	800da28 <_Balloc>
 800de6a:	4605      	mov	r5, r0
 800de6c:	b948      	cbnz	r0, 800de82 <__lshift+0x3e>
 800de6e:	4602      	mov	r2, r0
 800de70:	4b28      	ldr	r3, [pc, #160]	@ (800df14 <__lshift+0xd0>)
 800de72:	4829      	ldr	r0, [pc, #164]	@ (800df18 <__lshift+0xd4>)
 800de74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de78:	f000 fb86 	bl	800e588 <__assert_func>
 800de7c:	3101      	adds	r1, #1
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	e7ee      	b.n	800de60 <__lshift+0x1c>
 800de82:	2300      	movs	r3, #0
 800de84:	f100 0114 	add.w	r1, r0, #20
 800de88:	f100 0210 	add.w	r2, r0, #16
 800de8c:	4618      	mov	r0, r3
 800de8e:	4553      	cmp	r3, sl
 800de90:	db33      	blt.n	800defa <__lshift+0xb6>
 800de92:	6920      	ldr	r0, [r4, #16]
 800de94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de98:	f104 0314 	add.w	r3, r4, #20
 800de9c:	f019 091f 	ands.w	r9, r9, #31
 800dea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dea8:	d02b      	beq.n	800df02 <__lshift+0xbe>
 800deaa:	f1c9 0e20 	rsb	lr, r9, #32
 800deae:	468a      	mov	sl, r1
 800deb0:	2200      	movs	r2, #0
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	fa00 f009 	lsl.w	r0, r0, r9
 800deb8:	4310      	orrs	r0, r2
 800deba:	f84a 0b04 	str.w	r0, [sl], #4
 800debe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec2:	459c      	cmp	ip, r3
 800dec4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dec8:	d8f3      	bhi.n	800deb2 <__lshift+0x6e>
 800deca:	ebac 0304 	sub.w	r3, ip, r4
 800dece:	3b15      	subs	r3, #21
 800ded0:	f023 0303 	bic.w	r3, r3, #3
 800ded4:	3304      	adds	r3, #4
 800ded6:	f104 0015 	add.w	r0, r4, #21
 800deda:	4584      	cmp	ip, r0
 800dedc:	bf38      	it	cc
 800dede:	2304      	movcc	r3, #4
 800dee0:	50ca      	str	r2, [r1, r3]
 800dee2:	b10a      	cbz	r2, 800dee8 <__lshift+0xa4>
 800dee4:	f108 0602 	add.w	r6, r8, #2
 800dee8:	3e01      	subs	r6, #1
 800deea:	4638      	mov	r0, r7
 800deec:	612e      	str	r6, [r5, #16]
 800deee:	4621      	mov	r1, r4
 800def0:	f7ff fdda 	bl	800daa8 <_Bfree>
 800def4:	4628      	mov	r0, r5
 800def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800defa:	f842 0f04 	str.w	r0, [r2, #4]!
 800defe:	3301      	adds	r3, #1
 800df00:	e7c5      	b.n	800de8e <__lshift+0x4a>
 800df02:	3904      	subs	r1, #4
 800df04:	f853 2b04 	ldr.w	r2, [r3], #4
 800df08:	f841 2f04 	str.w	r2, [r1, #4]!
 800df0c:	459c      	cmp	ip, r3
 800df0e:	d8f9      	bhi.n	800df04 <__lshift+0xc0>
 800df10:	e7ea      	b.n	800dee8 <__lshift+0xa4>
 800df12:	bf00      	nop
 800df14:	0800f940 	.word	0x0800f940
 800df18:	0800f951 	.word	0x0800f951

0800df1c <__mcmp>:
 800df1c:	690a      	ldr	r2, [r1, #16]
 800df1e:	4603      	mov	r3, r0
 800df20:	6900      	ldr	r0, [r0, #16]
 800df22:	1a80      	subs	r0, r0, r2
 800df24:	b530      	push	{r4, r5, lr}
 800df26:	d10e      	bne.n	800df46 <__mcmp+0x2a>
 800df28:	3314      	adds	r3, #20
 800df2a:	3114      	adds	r1, #20
 800df2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df3c:	4295      	cmp	r5, r2
 800df3e:	d003      	beq.n	800df48 <__mcmp+0x2c>
 800df40:	d205      	bcs.n	800df4e <__mcmp+0x32>
 800df42:	f04f 30ff 	mov.w	r0, #4294967295
 800df46:	bd30      	pop	{r4, r5, pc}
 800df48:	42a3      	cmp	r3, r4
 800df4a:	d3f3      	bcc.n	800df34 <__mcmp+0x18>
 800df4c:	e7fb      	b.n	800df46 <__mcmp+0x2a>
 800df4e:	2001      	movs	r0, #1
 800df50:	e7f9      	b.n	800df46 <__mcmp+0x2a>
	...

0800df54 <__mdiff>:
 800df54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df58:	4689      	mov	r9, r1
 800df5a:	4606      	mov	r6, r0
 800df5c:	4611      	mov	r1, r2
 800df5e:	4648      	mov	r0, r9
 800df60:	4614      	mov	r4, r2
 800df62:	f7ff ffdb 	bl	800df1c <__mcmp>
 800df66:	1e05      	subs	r5, r0, #0
 800df68:	d112      	bne.n	800df90 <__mdiff+0x3c>
 800df6a:	4629      	mov	r1, r5
 800df6c:	4630      	mov	r0, r6
 800df6e:	f7ff fd5b 	bl	800da28 <_Balloc>
 800df72:	4602      	mov	r2, r0
 800df74:	b928      	cbnz	r0, 800df82 <__mdiff+0x2e>
 800df76:	4b3f      	ldr	r3, [pc, #252]	@ (800e074 <__mdiff+0x120>)
 800df78:	f240 2137 	movw	r1, #567	@ 0x237
 800df7c:	483e      	ldr	r0, [pc, #248]	@ (800e078 <__mdiff+0x124>)
 800df7e:	f000 fb03 	bl	800e588 <__assert_func>
 800df82:	2301      	movs	r3, #1
 800df84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df88:	4610      	mov	r0, r2
 800df8a:	b003      	add	sp, #12
 800df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df90:	bfbc      	itt	lt
 800df92:	464b      	movlt	r3, r9
 800df94:	46a1      	movlt	r9, r4
 800df96:	4630      	mov	r0, r6
 800df98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df9c:	bfba      	itte	lt
 800df9e:	461c      	movlt	r4, r3
 800dfa0:	2501      	movlt	r5, #1
 800dfa2:	2500      	movge	r5, #0
 800dfa4:	f7ff fd40 	bl	800da28 <_Balloc>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	b918      	cbnz	r0, 800dfb4 <__mdiff+0x60>
 800dfac:	4b31      	ldr	r3, [pc, #196]	@ (800e074 <__mdiff+0x120>)
 800dfae:	f240 2145 	movw	r1, #581	@ 0x245
 800dfb2:	e7e3      	b.n	800df7c <__mdiff+0x28>
 800dfb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dfb8:	6926      	ldr	r6, [r4, #16]
 800dfba:	60c5      	str	r5, [r0, #12]
 800dfbc:	f109 0310 	add.w	r3, r9, #16
 800dfc0:	f109 0514 	add.w	r5, r9, #20
 800dfc4:	f104 0e14 	add.w	lr, r4, #20
 800dfc8:	f100 0b14 	add.w	fp, r0, #20
 800dfcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfd4:	9301      	str	r3, [sp, #4]
 800dfd6:	46d9      	mov	r9, fp
 800dfd8:	f04f 0c00 	mov.w	ip, #0
 800dfdc:	9b01      	ldr	r3, [sp, #4]
 800dfde:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dfe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dfe6:	9301      	str	r3, [sp, #4]
 800dfe8:	fa1f f38a 	uxth.w	r3, sl
 800dfec:	4619      	mov	r1, r3
 800dfee:	b283      	uxth	r3, r0
 800dff0:	1acb      	subs	r3, r1, r3
 800dff2:	0c00      	lsrs	r0, r0, #16
 800dff4:	4463      	add	r3, ip
 800dff6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dffa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dffe:	b29b      	uxth	r3, r3
 800e000:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e004:	4576      	cmp	r6, lr
 800e006:	f849 3b04 	str.w	r3, [r9], #4
 800e00a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e00e:	d8e5      	bhi.n	800dfdc <__mdiff+0x88>
 800e010:	1b33      	subs	r3, r6, r4
 800e012:	3b15      	subs	r3, #21
 800e014:	f023 0303 	bic.w	r3, r3, #3
 800e018:	3415      	adds	r4, #21
 800e01a:	3304      	adds	r3, #4
 800e01c:	42a6      	cmp	r6, r4
 800e01e:	bf38      	it	cc
 800e020:	2304      	movcc	r3, #4
 800e022:	441d      	add	r5, r3
 800e024:	445b      	add	r3, fp
 800e026:	461e      	mov	r6, r3
 800e028:	462c      	mov	r4, r5
 800e02a:	4544      	cmp	r4, r8
 800e02c:	d30e      	bcc.n	800e04c <__mdiff+0xf8>
 800e02e:	f108 0103 	add.w	r1, r8, #3
 800e032:	1b49      	subs	r1, r1, r5
 800e034:	f021 0103 	bic.w	r1, r1, #3
 800e038:	3d03      	subs	r5, #3
 800e03a:	45a8      	cmp	r8, r5
 800e03c:	bf38      	it	cc
 800e03e:	2100      	movcc	r1, #0
 800e040:	440b      	add	r3, r1
 800e042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e046:	b191      	cbz	r1, 800e06e <__mdiff+0x11a>
 800e048:	6117      	str	r7, [r2, #16]
 800e04a:	e79d      	b.n	800df88 <__mdiff+0x34>
 800e04c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e050:	46e6      	mov	lr, ip
 800e052:	0c08      	lsrs	r0, r1, #16
 800e054:	fa1c fc81 	uxtah	ip, ip, r1
 800e058:	4471      	add	r1, lr
 800e05a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e05e:	b289      	uxth	r1, r1
 800e060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e064:	f846 1b04 	str.w	r1, [r6], #4
 800e068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e06c:	e7dd      	b.n	800e02a <__mdiff+0xd6>
 800e06e:	3f01      	subs	r7, #1
 800e070:	e7e7      	b.n	800e042 <__mdiff+0xee>
 800e072:	bf00      	nop
 800e074:	0800f940 	.word	0x0800f940
 800e078:	0800f951 	.word	0x0800f951

0800e07c <__d2b>:
 800e07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e080:	460f      	mov	r7, r1
 800e082:	2101      	movs	r1, #1
 800e084:	ec59 8b10 	vmov	r8, r9, d0
 800e088:	4616      	mov	r6, r2
 800e08a:	f7ff fccd 	bl	800da28 <_Balloc>
 800e08e:	4604      	mov	r4, r0
 800e090:	b930      	cbnz	r0, 800e0a0 <__d2b+0x24>
 800e092:	4602      	mov	r2, r0
 800e094:	4b23      	ldr	r3, [pc, #140]	@ (800e124 <__d2b+0xa8>)
 800e096:	4824      	ldr	r0, [pc, #144]	@ (800e128 <__d2b+0xac>)
 800e098:	f240 310f 	movw	r1, #783	@ 0x30f
 800e09c:	f000 fa74 	bl	800e588 <__assert_func>
 800e0a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0a8:	b10d      	cbz	r5, 800e0ae <__d2b+0x32>
 800e0aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800e0b4:	d023      	beq.n	800e0fe <__d2b+0x82>
 800e0b6:	4668      	mov	r0, sp
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	f7ff fd7c 	bl	800dbb6 <__lo0bits>
 800e0be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0c2:	b1d0      	cbz	r0, 800e0fa <__d2b+0x7e>
 800e0c4:	f1c0 0320 	rsb	r3, r0, #32
 800e0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0cc:	430b      	orrs	r3, r1
 800e0ce:	40c2      	lsrs	r2, r0
 800e0d0:	6163      	str	r3, [r4, #20]
 800e0d2:	9201      	str	r2, [sp, #4]
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	61a3      	str	r3, [r4, #24]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bf0c      	ite	eq
 800e0dc:	2201      	moveq	r2, #1
 800e0de:	2202      	movne	r2, #2
 800e0e0:	6122      	str	r2, [r4, #16]
 800e0e2:	b1a5      	cbz	r5, 800e10e <__d2b+0x92>
 800e0e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0e8:	4405      	add	r5, r0
 800e0ea:	603d      	str	r5, [r7, #0]
 800e0ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0f0:	6030      	str	r0, [r6, #0]
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	b003      	add	sp, #12
 800e0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0fa:	6161      	str	r1, [r4, #20]
 800e0fc:	e7ea      	b.n	800e0d4 <__d2b+0x58>
 800e0fe:	a801      	add	r0, sp, #4
 800e100:	f7ff fd59 	bl	800dbb6 <__lo0bits>
 800e104:	9b01      	ldr	r3, [sp, #4]
 800e106:	6163      	str	r3, [r4, #20]
 800e108:	3020      	adds	r0, #32
 800e10a:	2201      	movs	r2, #1
 800e10c:	e7e8      	b.n	800e0e0 <__d2b+0x64>
 800e10e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e112:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e116:	6038      	str	r0, [r7, #0]
 800e118:	6918      	ldr	r0, [r3, #16]
 800e11a:	f7ff fd2d 	bl	800db78 <__hi0bits>
 800e11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e122:	e7e5      	b.n	800e0f0 <__d2b+0x74>
 800e124:	0800f940 	.word	0x0800f940
 800e128:	0800f951 	.word	0x0800f951

0800e12c <__ssputs_r>:
 800e12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e130:	688e      	ldr	r6, [r1, #8]
 800e132:	461f      	mov	r7, r3
 800e134:	42be      	cmp	r6, r7
 800e136:	680b      	ldr	r3, [r1, #0]
 800e138:	4682      	mov	sl, r0
 800e13a:	460c      	mov	r4, r1
 800e13c:	4690      	mov	r8, r2
 800e13e:	d82d      	bhi.n	800e19c <__ssputs_r+0x70>
 800e140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e144:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e148:	d026      	beq.n	800e198 <__ssputs_r+0x6c>
 800e14a:	6965      	ldr	r5, [r4, #20]
 800e14c:	6909      	ldr	r1, [r1, #16]
 800e14e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e152:	eba3 0901 	sub.w	r9, r3, r1
 800e156:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e15a:	1c7b      	adds	r3, r7, #1
 800e15c:	444b      	add	r3, r9
 800e15e:	106d      	asrs	r5, r5, #1
 800e160:	429d      	cmp	r5, r3
 800e162:	bf38      	it	cc
 800e164:	461d      	movcc	r5, r3
 800e166:	0553      	lsls	r3, r2, #21
 800e168:	d527      	bpl.n	800e1ba <__ssputs_r+0x8e>
 800e16a:	4629      	mov	r1, r5
 800e16c:	f7ff fbd0 	bl	800d910 <_malloc_r>
 800e170:	4606      	mov	r6, r0
 800e172:	b360      	cbz	r0, 800e1ce <__ssputs_r+0xa2>
 800e174:	6921      	ldr	r1, [r4, #16]
 800e176:	464a      	mov	r2, r9
 800e178:	f7fe fcf9 	bl	800cb6e <memcpy>
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e186:	81a3      	strh	r3, [r4, #12]
 800e188:	6126      	str	r6, [r4, #16]
 800e18a:	6165      	str	r5, [r4, #20]
 800e18c:	444e      	add	r6, r9
 800e18e:	eba5 0509 	sub.w	r5, r5, r9
 800e192:	6026      	str	r6, [r4, #0]
 800e194:	60a5      	str	r5, [r4, #8]
 800e196:	463e      	mov	r6, r7
 800e198:	42be      	cmp	r6, r7
 800e19a:	d900      	bls.n	800e19e <__ssputs_r+0x72>
 800e19c:	463e      	mov	r6, r7
 800e19e:	6820      	ldr	r0, [r4, #0]
 800e1a0:	4632      	mov	r2, r6
 800e1a2:	4641      	mov	r1, r8
 800e1a4:	f000 f9c6 	bl	800e534 <memmove>
 800e1a8:	68a3      	ldr	r3, [r4, #8]
 800e1aa:	1b9b      	subs	r3, r3, r6
 800e1ac:	60a3      	str	r3, [r4, #8]
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	4433      	add	r3, r6
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	f000 fa28 	bl	800e610 <_realloc_r>
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d1e0      	bne.n	800e188 <__ssputs_r+0x5c>
 800e1c6:	6921      	ldr	r1, [r4, #16]
 800e1c8:	4650      	mov	r0, sl
 800e1ca:	f7ff fb2d 	bl	800d828 <_free_r>
 800e1ce:	230c      	movs	r3, #12
 800e1d0:	f8ca 3000 	str.w	r3, [sl]
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1da:	81a3      	strh	r3, [r4, #12]
 800e1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1e0:	e7e9      	b.n	800e1b6 <__ssputs_r+0x8a>
	...

0800e1e4 <_svfiprintf_r>:
 800e1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e8:	4698      	mov	r8, r3
 800e1ea:	898b      	ldrh	r3, [r1, #12]
 800e1ec:	061b      	lsls	r3, r3, #24
 800e1ee:	b09d      	sub	sp, #116	@ 0x74
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	d510      	bpl.n	800e21a <_svfiprintf_r+0x36>
 800e1f8:	690b      	ldr	r3, [r1, #16]
 800e1fa:	b973      	cbnz	r3, 800e21a <_svfiprintf_r+0x36>
 800e1fc:	2140      	movs	r1, #64	@ 0x40
 800e1fe:	f7ff fb87 	bl	800d910 <_malloc_r>
 800e202:	6028      	str	r0, [r5, #0]
 800e204:	6128      	str	r0, [r5, #16]
 800e206:	b930      	cbnz	r0, 800e216 <_svfiprintf_r+0x32>
 800e208:	230c      	movs	r3, #12
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	f04f 30ff 	mov.w	r0, #4294967295
 800e210:	b01d      	add	sp, #116	@ 0x74
 800e212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e216:	2340      	movs	r3, #64	@ 0x40
 800e218:	616b      	str	r3, [r5, #20]
 800e21a:	2300      	movs	r3, #0
 800e21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e21e:	2320      	movs	r3, #32
 800e220:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e224:	f8cd 800c 	str.w	r8, [sp, #12]
 800e228:	2330      	movs	r3, #48	@ 0x30
 800e22a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3c8 <_svfiprintf_r+0x1e4>
 800e22e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e232:	f04f 0901 	mov.w	r9, #1
 800e236:	4623      	mov	r3, r4
 800e238:	469a      	mov	sl, r3
 800e23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e23e:	b10a      	cbz	r2, 800e244 <_svfiprintf_r+0x60>
 800e240:	2a25      	cmp	r2, #37	@ 0x25
 800e242:	d1f9      	bne.n	800e238 <_svfiprintf_r+0x54>
 800e244:	ebba 0b04 	subs.w	fp, sl, r4
 800e248:	d00b      	beq.n	800e262 <_svfiprintf_r+0x7e>
 800e24a:	465b      	mov	r3, fp
 800e24c:	4622      	mov	r2, r4
 800e24e:	4629      	mov	r1, r5
 800e250:	4638      	mov	r0, r7
 800e252:	f7ff ff6b 	bl	800e12c <__ssputs_r>
 800e256:	3001      	adds	r0, #1
 800e258:	f000 80a7 	beq.w	800e3aa <_svfiprintf_r+0x1c6>
 800e25c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e25e:	445a      	add	r2, fp
 800e260:	9209      	str	r2, [sp, #36]	@ 0x24
 800e262:	f89a 3000 	ldrb.w	r3, [sl]
 800e266:	2b00      	cmp	r3, #0
 800e268:	f000 809f 	beq.w	800e3aa <_svfiprintf_r+0x1c6>
 800e26c:	2300      	movs	r3, #0
 800e26e:	f04f 32ff 	mov.w	r2, #4294967295
 800e272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e276:	f10a 0a01 	add.w	sl, sl, #1
 800e27a:	9304      	str	r3, [sp, #16]
 800e27c:	9307      	str	r3, [sp, #28]
 800e27e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e282:	931a      	str	r3, [sp, #104]	@ 0x68
 800e284:	4654      	mov	r4, sl
 800e286:	2205      	movs	r2, #5
 800e288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28c:	484e      	ldr	r0, [pc, #312]	@ (800e3c8 <_svfiprintf_r+0x1e4>)
 800e28e:	f7f1 ff9f 	bl	80001d0 <memchr>
 800e292:	9a04      	ldr	r2, [sp, #16]
 800e294:	b9d8      	cbnz	r0, 800e2ce <_svfiprintf_r+0xea>
 800e296:	06d0      	lsls	r0, r2, #27
 800e298:	bf44      	itt	mi
 800e29a:	2320      	movmi	r3, #32
 800e29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2a0:	0711      	lsls	r1, r2, #28
 800e2a2:	bf44      	itt	mi
 800e2a4:	232b      	movmi	r3, #43	@ 0x2b
 800e2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2b0:	d015      	beq.n	800e2de <_svfiprintf_r+0xfa>
 800e2b2:	9a07      	ldr	r2, [sp, #28]
 800e2b4:	4654      	mov	r4, sl
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	f04f 0c0a 	mov.w	ip, #10
 800e2bc:	4621      	mov	r1, r4
 800e2be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2c2:	3b30      	subs	r3, #48	@ 0x30
 800e2c4:	2b09      	cmp	r3, #9
 800e2c6:	d94b      	bls.n	800e360 <_svfiprintf_r+0x17c>
 800e2c8:	b1b0      	cbz	r0, 800e2f8 <_svfiprintf_r+0x114>
 800e2ca:	9207      	str	r2, [sp, #28]
 800e2cc:	e014      	b.n	800e2f8 <_svfiprintf_r+0x114>
 800e2ce:	eba0 0308 	sub.w	r3, r0, r8
 800e2d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	9304      	str	r3, [sp, #16]
 800e2da:	46a2      	mov	sl, r4
 800e2dc:	e7d2      	b.n	800e284 <_svfiprintf_r+0xa0>
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	1d19      	adds	r1, r3, #4
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	9103      	str	r1, [sp, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	bfbb      	ittet	lt
 800e2ea:	425b      	neglt	r3, r3
 800e2ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e2f0:	9307      	strge	r3, [sp, #28]
 800e2f2:	9307      	strlt	r3, [sp, #28]
 800e2f4:	bfb8      	it	lt
 800e2f6:	9204      	strlt	r2, [sp, #16]
 800e2f8:	7823      	ldrb	r3, [r4, #0]
 800e2fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2fc:	d10a      	bne.n	800e314 <_svfiprintf_r+0x130>
 800e2fe:	7863      	ldrb	r3, [r4, #1]
 800e300:	2b2a      	cmp	r3, #42	@ 0x2a
 800e302:	d132      	bne.n	800e36a <_svfiprintf_r+0x186>
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	1d1a      	adds	r2, r3, #4
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	9203      	str	r2, [sp, #12]
 800e30c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e310:	3402      	adds	r4, #2
 800e312:	9305      	str	r3, [sp, #20]
 800e314:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3d8 <_svfiprintf_r+0x1f4>
 800e318:	7821      	ldrb	r1, [r4, #0]
 800e31a:	2203      	movs	r2, #3
 800e31c:	4650      	mov	r0, sl
 800e31e:	f7f1 ff57 	bl	80001d0 <memchr>
 800e322:	b138      	cbz	r0, 800e334 <_svfiprintf_r+0x150>
 800e324:	9b04      	ldr	r3, [sp, #16]
 800e326:	eba0 000a 	sub.w	r0, r0, sl
 800e32a:	2240      	movs	r2, #64	@ 0x40
 800e32c:	4082      	lsls	r2, r0
 800e32e:	4313      	orrs	r3, r2
 800e330:	3401      	adds	r4, #1
 800e332:	9304      	str	r3, [sp, #16]
 800e334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e338:	4824      	ldr	r0, [pc, #144]	@ (800e3cc <_svfiprintf_r+0x1e8>)
 800e33a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e33e:	2206      	movs	r2, #6
 800e340:	f7f1 ff46 	bl	80001d0 <memchr>
 800e344:	2800      	cmp	r0, #0
 800e346:	d036      	beq.n	800e3b6 <_svfiprintf_r+0x1d2>
 800e348:	4b21      	ldr	r3, [pc, #132]	@ (800e3d0 <_svfiprintf_r+0x1ec>)
 800e34a:	bb1b      	cbnz	r3, 800e394 <_svfiprintf_r+0x1b0>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	3307      	adds	r3, #7
 800e350:	f023 0307 	bic.w	r3, r3, #7
 800e354:	3308      	adds	r3, #8
 800e356:	9303      	str	r3, [sp, #12]
 800e358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e35a:	4433      	add	r3, r6
 800e35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e35e:	e76a      	b.n	800e236 <_svfiprintf_r+0x52>
 800e360:	fb0c 3202 	mla	r2, ip, r2, r3
 800e364:	460c      	mov	r4, r1
 800e366:	2001      	movs	r0, #1
 800e368:	e7a8      	b.n	800e2bc <_svfiprintf_r+0xd8>
 800e36a:	2300      	movs	r3, #0
 800e36c:	3401      	adds	r4, #1
 800e36e:	9305      	str	r3, [sp, #20]
 800e370:	4619      	mov	r1, r3
 800e372:	f04f 0c0a 	mov.w	ip, #10
 800e376:	4620      	mov	r0, r4
 800e378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e37c:	3a30      	subs	r2, #48	@ 0x30
 800e37e:	2a09      	cmp	r2, #9
 800e380:	d903      	bls.n	800e38a <_svfiprintf_r+0x1a6>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d0c6      	beq.n	800e314 <_svfiprintf_r+0x130>
 800e386:	9105      	str	r1, [sp, #20]
 800e388:	e7c4      	b.n	800e314 <_svfiprintf_r+0x130>
 800e38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e38e:	4604      	mov	r4, r0
 800e390:	2301      	movs	r3, #1
 800e392:	e7f0      	b.n	800e376 <_svfiprintf_r+0x192>
 800e394:	ab03      	add	r3, sp, #12
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	462a      	mov	r2, r5
 800e39a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3d4 <_svfiprintf_r+0x1f0>)
 800e39c:	a904      	add	r1, sp, #16
 800e39e:	4638      	mov	r0, r7
 800e3a0:	f7fd fe32 	bl	800c008 <_printf_float>
 800e3a4:	1c42      	adds	r2, r0, #1
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	d1d6      	bne.n	800e358 <_svfiprintf_r+0x174>
 800e3aa:	89ab      	ldrh	r3, [r5, #12]
 800e3ac:	065b      	lsls	r3, r3, #25
 800e3ae:	f53f af2d 	bmi.w	800e20c <_svfiprintf_r+0x28>
 800e3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3b4:	e72c      	b.n	800e210 <_svfiprintf_r+0x2c>
 800e3b6:	ab03      	add	r3, sp, #12
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	462a      	mov	r2, r5
 800e3bc:	4b05      	ldr	r3, [pc, #20]	@ (800e3d4 <_svfiprintf_r+0x1f0>)
 800e3be:	a904      	add	r1, sp, #16
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7fe f8b9 	bl	800c538 <_printf_i>
 800e3c6:	e7ed      	b.n	800e3a4 <_svfiprintf_r+0x1c0>
 800e3c8:	0800faa8 	.word	0x0800faa8
 800e3cc:	0800fab2 	.word	0x0800fab2
 800e3d0:	0800c009 	.word	0x0800c009
 800e3d4:	0800e12d 	.word	0x0800e12d
 800e3d8:	0800faae 	.word	0x0800faae

0800e3dc <__sflush_r>:
 800e3dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e4:	0716      	lsls	r6, r2, #28
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	d454      	bmi.n	800e496 <__sflush_r+0xba>
 800e3ec:	684b      	ldr	r3, [r1, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	dc02      	bgt.n	800e3f8 <__sflush_r+0x1c>
 800e3f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dd48      	ble.n	800e48a <__sflush_r+0xae>
 800e3f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e3fa:	2e00      	cmp	r6, #0
 800e3fc:	d045      	beq.n	800e48a <__sflush_r+0xae>
 800e3fe:	2300      	movs	r3, #0
 800e400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e404:	682f      	ldr	r7, [r5, #0]
 800e406:	6a21      	ldr	r1, [r4, #32]
 800e408:	602b      	str	r3, [r5, #0]
 800e40a:	d030      	beq.n	800e46e <__sflush_r+0x92>
 800e40c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e40e:	89a3      	ldrh	r3, [r4, #12]
 800e410:	0759      	lsls	r1, r3, #29
 800e412:	d505      	bpl.n	800e420 <__sflush_r+0x44>
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	1ad2      	subs	r2, r2, r3
 800e418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e41a:	b10b      	cbz	r3, 800e420 <__sflush_r+0x44>
 800e41c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e41e:	1ad2      	subs	r2, r2, r3
 800e420:	2300      	movs	r3, #0
 800e422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e424:	6a21      	ldr	r1, [r4, #32]
 800e426:	4628      	mov	r0, r5
 800e428:	47b0      	blx	r6
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	d106      	bne.n	800e43e <__sflush_r+0x62>
 800e430:	6829      	ldr	r1, [r5, #0]
 800e432:	291d      	cmp	r1, #29
 800e434:	d82b      	bhi.n	800e48e <__sflush_r+0xb2>
 800e436:	4a2a      	ldr	r2, [pc, #168]	@ (800e4e0 <__sflush_r+0x104>)
 800e438:	410a      	asrs	r2, r1
 800e43a:	07d6      	lsls	r6, r2, #31
 800e43c:	d427      	bmi.n	800e48e <__sflush_r+0xb2>
 800e43e:	2200      	movs	r2, #0
 800e440:	6062      	str	r2, [r4, #4]
 800e442:	04d9      	lsls	r1, r3, #19
 800e444:	6922      	ldr	r2, [r4, #16]
 800e446:	6022      	str	r2, [r4, #0]
 800e448:	d504      	bpl.n	800e454 <__sflush_r+0x78>
 800e44a:	1c42      	adds	r2, r0, #1
 800e44c:	d101      	bne.n	800e452 <__sflush_r+0x76>
 800e44e:	682b      	ldr	r3, [r5, #0]
 800e450:	b903      	cbnz	r3, 800e454 <__sflush_r+0x78>
 800e452:	6560      	str	r0, [r4, #84]	@ 0x54
 800e454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e456:	602f      	str	r7, [r5, #0]
 800e458:	b1b9      	cbz	r1, 800e48a <__sflush_r+0xae>
 800e45a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e45e:	4299      	cmp	r1, r3
 800e460:	d002      	beq.n	800e468 <__sflush_r+0x8c>
 800e462:	4628      	mov	r0, r5
 800e464:	f7ff f9e0 	bl	800d828 <_free_r>
 800e468:	2300      	movs	r3, #0
 800e46a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e46c:	e00d      	b.n	800e48a <__sflush_r+0xae>
 800e46e:	2301      	movs	r3, #1
 800e470:	4628      	mov	r0, r5
 800e472:	47b0      	blx	r6
 800e474:	4602      	mov	r2, r0
 800e476:	1c50      	adds	r0, r2, #1
 800e478:	d1c9      	bne.n	800e40e <__sflush_r+0x32>
 800e47a:	682b      	ldr	r3, [r5, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d0c6      	beq.n	800e40e <__sflush_r+0x32>
 800e480:	2b1d      	cmp	r3, #29
 800e482:	d001      	beq.n	800e488 <__sflush_r+0xac>
 800e484:	2b16      	cmp	r3, #22
 800e486:	d11e      	bne.n	800e4c6 <__sflush_r+0xea>
 800e488:	602f      	str	r7, [r5, #0]
 800e48a:	2000      	movs	r0, #0
 800e48c:	e022      	b.n	800e4d4 <__sflush_r+0xf8>
 800e48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e492:	b21b      	sxth	r3, r3
 800e494:	e01b      	b.n	800e4ce <__sflush_r+0xf2>
 800e496:	690f      	ldr	r7, [r1, #16]
 800e498:	2f00      	cmp	r7, #0
 800e49a:	d0f6      	beq.n	800e48a <__sflush_r+0xae>
 800e49c:	0793      	lsls	r3, r2, #30
 800e49e:	680e      	ldr	r6, [r1, #0]
 800e4a0:	bf08      	it	eq
 800e4a2:	694b      	ldreq	r3, [r1, #20]
 800e4a4:	600f      	str	r7, [r1, #0]
 800e4a6:	bf18      	it	ne
 800e4a8:	2300      	movne	r3, #0
 800e4aa:	eba6 0807 	sub.w	r8, r6, r7
 800e4ae:	608b      	str	r3, [r1, #8]
 800e4b0:	f1b8 0f00 	cmp.w	r8, #0
 800e4b4:	dde9      	ble.n	800e48a <__sflush_r+0xae>
 800e4b6:	6a21      	ldr	r1, [r4, #32]
 800e4b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e4ba:	4643      	mov	r3, r8
 800e4bc:	463a      	mov	r2, r7
 800e4be:	4628      	mov	r0, r5
 800e4c0:	47b0      	blx	r6
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	dc08      	bgt.n	800e4d8 <__sflush_r+0xfc>
 800e4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ce:	81a3      	strh	r3, [r4, #12]
 800e4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d8:	4407      	add	r7, r0
 800e4da:	eba8 0800 	sub.w	r8, r8, r0
 800e4de:	e7e7      	b.n	800e4b0 <__sflush_r+0xd4>
 800e4e0:	dfbffffe 	.word	0xdfbffffe

0800e4e4 <_fflush_r>:
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	690b      	ldr	r3, [r1, #16]
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	b913      	cbnz	r3, 800e4f4 <_fflush_r+0x10>
 800e4ee:	2500      	movs	r5, #0
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	b118      	cbz	r0, 800e4fe <_fflush_r+0x1a>
 800e4f6:	6a03      	ldr	r3, [r0, #32]
 800e4f8:	b90b      	cbnz	r3, 800e4fe <_fflush_r+0x1a>
 800e4fa:	f7fe f9c9 	bl	800c890 <__sinit>
 800e4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0f3      	beq.n	800e4ee <_fflush_r+0xa>
 800e506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e508:	07d0      	lsls	r0, r2, #31
 800e50a:	d404      	bmi.n	800e516 <_fflush_r+0x32>
 800e50c:	0599      	lsls	r1, r3, #22
 800e50e:	d402      	bmi.n	800e516 <_fflush_r+0x32>
 800e510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e512:	f7fe fb2a 	bl	800cb6a <__retarget_lock_acquire_recursive>
 800e516:	4628      	mov	r0, r5
 800e518:	4621      	mov	r1, r4
 800e51a:	f7ff ff5f 	bl	800e3dc <__sflush_r>
 800e51e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e520:	07da      	lsls	r2, r3, #31
 800e522:	4605      	mov	r5, r0
 800e524:	d4e4      	bmi.n	800e4f0 <_fflush_r+0xc>
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	059b      	lsls	r3, r3, #22
 800e52a:	d4e1      	bmi.n	800e4f0 <_fflush_r+0xc>
 800e52c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e52e:	f7fe fb1d 	bl	800cb6c <__retarget_lock_release_recursive>
 800e532:	e7dd      	b.n	800e4f0 <_fflush_r+0xc>

0800e534 <memmove>:
 800e534:	4288      	cmp	r0, r1
 800e536:	b510      	push	{r4, lr}
 800e538:	eb01 0402 	add.w	r4, r1, r2
 800e53c:	d902      	bls.n	800e544 <memmove+0x10>
 800e53e:	4284      	cmp	r4, r0
 800e540:	4623      	mov	r3, r4
 800e542:	d807      	bhi.n	800e554 <memmove+0x20>
 800e544:	1e43      	subs	r3, r0, #1
 800e546:	42a1      	cmp	r1, r4
 800e548:	d008      	beq.n	800e55c <memmove+0x28>
 800e54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e552:	e7f8      	b.n	800e546 <memmove+0x12>
 800e554:	4402      	add	r2, r0
 800e556:	4601      	mov	r1, r0
 800e558:	428a      	cmp	r2, r1
 800e55a:	d100      	bne.n	800e55e <memmove+0x2a>
 800e55c:	bd10      	pop	{r4, pc}
 800e55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e566:	e7f7      	b.n	800e558 <memmove+0x24>

0800e568 <_sbrk_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d06      	ldr	r5, [pc, #24]	@ (800e584 <_sbrk_r+0x1c>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	602b      	str	r3, [r5, #0]
 800e574:	f7f5 f9b0 	bl	80038d8 <_sbrk>
 800e578:	1c43      	adds	r3, r0, #1
 800e57a:	d102      	bne.n	800e582 <_sbrk_r+0x1a>
 800e57c:	682b      	ldr	r3, [r5, #0]
 800e57e:	b103      	cbz	r3, 800e582 <_sbrk_r+0x1a>
 800e580:	6023      	str	r3, [r4, #0]
 800e582:	bd38      	pop	{r3, r4, r5, pc}
 800e584:	20005468 	.word	0x20005468

0800e588 <__assert_func>:
 800e588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e58a:	4614      	mov	r4, r2
 800e58c:	461a      	mov	r2, r3
 800e58e:	4b09      	ldr	r3, [pc, #36]	@ (800e5b4 <__assert_func+0x2c>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4605      	mov	r5, r0
 800e594:	68d8      	ldr	r0, [r3, #12]
 800e596:	b954      	cbnz	r4, 800e5ae <__assert_func+0x26>
 800e598:	4b07      	ldr	r3, [pc, #28]	@ (800e5b8 <__assert_func+0x30>)
 800e59a:	461c      	mov	r4, r3
 800e59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5a0:	9100      	str	r1, [sp, #0]
 800e5a2:	462b      	mov	r3, r5
 800e5a4:	4905      	ldr	r1, [pc, #20]	@ (800e5bc <__assert_func+0x34>)
 800e5a6:	f000 f86f 	bl	800e688 <fiprintf>
 800e5aa:	f000 f87f 	bl	800e6ac <abort>
 800e5ae:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <__assert_func+0x38>)
 800e5b0:	e7f4      	b.n	800e59c <__assert_func+0x14>
 800e5b2:	bf00      	nop
 800e5b4:	20000028 	.word	0x20000028
 800e5b8:	0800fafe 	.word	0x0800fafe
 800e5bc:	0800fad0 	.word	0x0800fad0
 800e5c0:	0800fac3 	.word	0x0800fac3

0800e5c4 <_calloc_r>:
 800e5c4:	b570      	push	{r4, r5, r6, lr}
 800e5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800e5ca:	b93c      	cbnz	r4, 800e5dc <_calloc_r+0x18>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	f7ff f99f 	bl	800d910 <_malloc_r>
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	b928      	cbnz	r0, 800e5e2 <_calloc_r+0x1e>
 800e5d6:	2600      	movs	r6, #0
 800e5d8:	4630      	mov	r0, r6
 800e5da:	bd70      	pop	{r4, r5, r6, pc}
 800e5dc:	220c      	movs	r2, #12
 800e5de:	6002      	str	r2, [r0, #0]
 800e5e0:	e7f9      	b.n	800e5d6 <_calloc_r+0x12>
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	f7fe f9ec 	bl	800c9c2 <memset>
 800e5ea:	e7f5      	b.n	800e5d8 <_calloc_r+0x14>

0800e5ec <__ascii_mbtowc>:
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	b901      	cbnz	r1, 800e5f2 <__ascii_mbtowc+0x6>
 800e5f0:	a901      	add	r1, sp, #4
 800e5f2:	b142      	cbz	r2, 800e606 <__ascii_mbtowc+0x1a>
 800e5f4:	b14b      	cbz	r3, 800e60a <__ascii_mbtowc+0x1e>
 800e5f6:	7813      	ldrb	r3, [r2, #0]
 800e5f8:	600b      	str	r3, [r1, #0]
 800e5fa:	7812      	ldrb	r2, [r2, #0]
 800e5fc:	1e10      	subs	r0, r2, #0
 800e5fe:	bf18      	it	ne
 800e600:	2001      	movne	r0, #1
 800e602:	b002      	add	sp, #8
 800e604:	4770      	bx	lr
 800e606:	4610      	mov	r0, r2
 800e608:	e7fb      	b.n	800e602 <__ascii_mbtowc+0x16>
 800e60a:	f06f 0001 	mvn.w	r0, #1
 800e60e:	e7f8      	b.n	800e602 <__ascii_mbtowc+0x16>

0800e610 <_realloc_r>:
 800e610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e614:	4680      	mov	r8, r0
 800e616:	4615      	mov	r5, r2
 800e618:	460c      	mov	r4, r1
 800e61a:	b921      	cbnz	r1, 800e626 <_realloc_r+0x16>
 800e61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e620:	4611      	mov	r1, r2
 800e622:	f7ff b975 	b.w	800d910 <_malloc_r>
 800e626:	b92a      	cbnz	r2, 800e634 <_realloc_r+0x24>
 800e628:	f7ff f8fe 	bl	800d828 <_free_r>
 800e62c:	2400      	movs	r4, #0
 800e62e:	4620      	mov	r0, r4
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e634:	f000 f841 	bl	800e6ba <_malloc_usable_size_r>
 800e638:	4285      	cmp	r5, r0
 800e63a:	4606      	mov	r6, r0
 800e63c:	d802      	bhi.n	800e644 <_realloc_r+0x34>
 800e63e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e642:	d8f4      	bhi.n	800e62e <_realloc_r+0x1e>
 800e644:	4629      	mov	r1, r5
 800e646:	4640      	mov	r0, r8
 800e648:	f7ff f962 	bl	800d910 <_malloc_r>
 800e64c:	4607      	mov	r7, r0
 800e64e:	2800      	cmp	r0, #0
 800e650:	d0ec      	beq.n	800e62c <_realloc_r+0x1c>
 800e652:	42b5      	cmp	r5, r6
 800e654:	462a      	mov	r2, r5
 800e656:	4621      	mov	r1, r4
 800e658:	bf28      	it	cs
 800e65a:	4632      	movcs	r2, r6
 800e65c:	f7fe fa87 	bl	800cb6e <memcpy>
 800e660:	4621      	mov	r1, r4
 800e662:	4640      	mov	r0, r8
 800e664:	f7ff f8e0 	bl	800d828 <_free_r>
 800e668:	463c      	mov	r4, r7
 800e66a:	e7e0      	b.n	800e62e <_realloc_r+0x1e>

0800e66c <__ascii_wctomb>:
 800e66c:	4603      	mov	r3, r0
 800e66e:	4608      	mov	r0, r1
 800e670:	b141      	cbz	r1, 800e684 <__ascii_wctomb+0x18>
 800e672:	2aff      	cmp	r2, #255	@ 0xff
 800e674:	d904      	bls.n	800e680 <__ascii_wctomb+0x14>
 800e676:	228a      	movs	r2, #138	@ 0x8a
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	f04f 30ff 	mov.w	r0, #4294967295
 800e67e:	4770      	bx	lr
 800e680:	700a      	strb	r2, [r1, #0]
 800e682:	2001      	movs	r0, #1
 800e684:	4770      	bx	lr
	...

0800e688 <fiprintf>:
 800e688:	b40e      	push	{r1, r2, r3}
 800e68a:	b503      	push	{r0, r1, lr}
 800e68c:	4601      	mov	r1, r0
 800e68e:	ab03      	add	r3, sp, #12
 800e690:	4805      	ldr	r0, [pc, #20]	@ (800e6a8 <fiprintf+0x20>)
 800e692:	f853 2b04 	ldr.w	r2, [r3], #4
 800e696:	6800      	ldr	r0, [r0, #0]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	f000 f83f 	bl	800e71c <_vfiprintf_r>
 800e69e:	b002      	add	sp, #8
 800e6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6a4:	b003      	add	sp, #12
 800e6a6:	4770      	bx	lr
 800e6a8:	20000028 	.word	0x20000028

0800e6ac <abort>:
 800e6ac:	b508      	push	{r3, lr}
 800e6ae:	2006      	movs	r0, #6
 800e6b0:	f000 fa08 	bl	800eac4 <raise>
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	f7f5 f897 	bl	80037e8 <_exit>

0800e6ba <_malloc_usable_size_r>:
 800e6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6be:	1f18      	subs	r0, r3, #4
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bfbc      	itt	lt
 800e6c4:	580b      	ldrlt	r3, [r1, r0]
 800e6c6:	18c0      	addlt	r0, r0, r3
 800e6c8:	4770      	bx	lr

0800e6ca <__sfputc_r>:
 800e6ca:	6893      	ldr	r3, [r2, #8]
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	b410      	push	{r4}
 800e6d2:	6093      	str	r3, [r2, #8]
 800e6d4:	da08      	bge.n	800e6e8 <__sfputc_r+0x1e>
 800e6d6:	6994      	ldr	r4, [r2, #24]
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	db01      	blt.n	800e6e0 <__sfputc_r+0x16>
 800e6dc:	290a      	cmp	r1, #10
 800e6de:	d103      	bne.n	800e6e8 <__sfputc_r+0x1e>
 800e6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6e4:	f000 b932 	b.w	800e94c <__swbuf_r>
 800e6e8:	6813      	ldr	r3, [r2, #0]
 800e6ea:	1c58      	adds	r0, r3, #1
 800e6ec:	6010      	str	r0, [r2, #0]
 800e6ee:	7019      	strb	r1, [r3, #0]
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <__sfputs_r>:
 800e6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	460f      	mov	r7, r1
 800e6fe:	4614      	mov	r4, r2
 800e700:	18d5      	adds	r5, r2, r3
 800e702:	42ac      	cmp	r4, r5
 800e704:	d101      	bne.n	800e70a <__sfputs_r+0x12>
 800e706:	2000      	movs	r0, #0
 800e708:	e007      	b.n	800e71a <__sfputs_r+0x22>
 800e70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70e:	463a      	mov	r2, r7
 800e710:	4630      	mov	r0, r6
 800e712:	f7ff ffda 	bl	800e6ca <__sfputc_r>
 800e716:	1c43      	adds	r3, r0, #1
 800e718:	d1f3      	bne.n	800e702 <__sfputs_r+0xa>
 800e71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e71c <_vfiprintf_r>:
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e720:	460d      	mov	r5, r1
 800e722:	b09d      	sub	sp, #116	@ 0x74
 800e724:	4614      	mov	r4, r2
 800e726:	4698      	mov	r8, r3
 800e728:	4606      	mov	r6, r0
 800e72a:	b118      	cbz	r0, 800e734 <_vfiprintf_r+0x18>
 800e72c:	6a03      	ldr	r3, [r0, #32]
 800e72e:	b90b      	cbnz	r3, 800e734 <_vfiprintf_r+0x18>
 800e730:	f7fe f8ae 	bl	800c890 <__sinit>
 800e734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e736:	07d9      	lsls	r1, r3, #31
 800e738:	d405      	bmi.n	800e746 <_vfiprintf_r+0x2a>
 800e73a:	89ab      	ldrh	r3, [r5, #12]
 800e73c:	059a      	lsls	r2, r3, #22
 800e73e:	d402      	bmi.n	800e746 <_vfiprintf_r+0x2a>
 800e740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e742:	f7fe fa12 	bl	800cb6a <__retarget_lock_acquire_recursive>
 800e746:	89ab      	ldrh	r3, [r5, #12]
 800e748:	071b      	lsls	r3, r3, #28
 800e74a:	d501      	bpl.n	800e750 <_vfiprintf_r+0x34>
 800e74c:	692b      	ldr	r3, [r5, #16]
 800e74e:	b99b      	cbnz	r3, 800e778 <_vfiprintf_r+0x5c>
 800e750:	4629      	mov	r1, r5
 800e752:	4630      	mov	r0, r6
 800e754:	f000 f938 	bl	800e9c8 <__swsetup_r>
 800e758:	b170      	cbz	r0, 800e778 <_vfiprintf_r+0x5c>
 800e75a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e75c:	07dc      	lsls	r4, r3, #31
 800e75e:	d504      	bpl.n	800e76a <_vfiprintf_r+0x4e>
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	b01d      	add	sp, #116	@ 0x74
 800e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	0598      	lsls	r0, r3, #22
 800e76e:	d4f7      	bmi.n	800e760 <_vfiprintf_r+0x44>
 800e770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e772:	f7fe f9fb 	bl	800cb6c <__retarget_lock_release_recursive>
 800e776:	e7f3      	b.n	800e760 <_vfiprintf_r+0x44>
 800e778:	2300      	movs	r3, #0
 800e77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e77c:	2320      	movs	r3, #32
 800e77e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e782:	f8cd 800c 	str.w	r8, [sp, #12]
 800e786:	2330      	movs	r3, #48	@ 0x30
 800e788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e938 <_vfiprintf_r+0x21c>
 800e78c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e790:	f04f 0901 	mov.w	r9, #1
 800e794:	4623      	mov	r3, r4
 800e796:	469a      	mov	sl, r3
 800e798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e79c:	b10a      	cbz	r2, 800e7a2 <_vfiprintf_r+0x86>
 800e79e:	2a25      	cmp	r2, #37	@ 0x25
 800e7a0:	d1f9      	bne.n	800e796 <_vfiprintf_r+0x7a>
 800e7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800e7a6:	d00b      	beq.n	800e7c0 <_vfiprintf_r+0xa4>
 800e7a8:	465b      	mov	r3, fp
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f7ff ffa2 	bl	800e6f8 <__sfputs_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f000 80a7 	beq.w	800e908 <_vfiprintf_r+0x1ec>
 800e7ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7bc:	445a      	add	r2, fp
 800e7be:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 809f 	beq.w	800e908 <_vfiprintf_r+0x1ec>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7d4:	f10a 0a01 	add.w	sl, sl, #1
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	9307      	str	r3, [sp, #28]
 800e7dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7e2:	4654      	mov	r4, sl
 800e7e4:	2205      	movs	r2, #5
 800e7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ea:	4853      	ldr	r0, [pc, #332]	@ (800e938 <_vfiprintf_r+0x21c>)
 800e7ec:	f7f1 fcf0 	bl	80001d0 <memchr>
 800e7f0:	9a04      	ldr	r2, [sp, #16]
 800e7f2:	b9d8      	cbnz	r0, 800e82c <_vfiprintf_r+0x110>
 800e7f4:	06d1      	lsls	r1, r2, #27
 800e7f6:	bf44      	itt	mi
 800e7f8:	2320      	movmi	r3, #32
 800e7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7fe:	0713      	lsls	r3, r2, #28
 800e800:	bf44      	itt	mi
 800e802:	232b      	movmi	r3, #43	@ 0x2b
 800e804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e808:	f89a 3000 	ldrb.w	r3, [sl]
 800e80c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80e:	d015      	beq.n	800e83c <_vfiprintf_r+0x120>
 800e810:	9a07      	ldr	r2, [sp, #28]
 800e812:	4654      	mov	r4, sl
 800e814:	2000      	movs	r0, #0
 800e816:	f04f 0c0a 	mov.w	ip, #10
 800e81a:	4621      	mov	r1, r4
 800e81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e820:	3b30      	subs	r3, #48	@ 0x30
 800e822:	2b09      	cmp	r3, #9
 800e824:	d94b      	bls.n	800e8be <_vfiprintf_r+0x1a2>
 800e826:	b1b0      	cbz	r0, 800e856 <_vfiprintf_r+0x13a>
 800e828:	9207      	str	r2, [sp, #28]
 800e82a:	e014      	b.n	800e856 <_vfiprintf_r+0x13a>
 800e82c:	eba0 0308 	sub.w	r3, r0, r8
 800e830:	fa09 f303 	lsl.w	r3, r9, r3
 800e834:	4313      	orrs	r3, r2
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	46a2      	mov	sl, r4
 800e83a:	e7d2      	b.n	800e7e2 <_vfiprintf_r+0xc6>
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	1d19      	adds	r1, r3, #4
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	9103      	str	r1, [sp, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	bfbb      	ittet	lt
 800e848:	425b      	neglt	r3, r3
 800e84a:	f042 0202 	orrlt.w	r2, r2, #2
 800e84e:	9307      	strge	r3, [sp, #28]
 800e850:	9307      	strlt	r3, [sp, #28]
 800e852:	bfb8      	it	lt
 800e854:	9204      	strlt	r2, [sp, #16]
 800e856:	7823      	ldrb	r3, [r4, #0]
 800e858:	2b2e      	cmp	r3, #46	@ 0x2e
 800e85a:	d10a      	bne.n	800e872 <_vfiprintf_r+0x156>
 800e85c:	7863      	ldrb	r3, [r4, #1]
 800e85e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e860:	d132      	bne.n	800e8c8 <_vfiprintf_r+0x1ac>
 800e862:	9b03      	ldr	r3, [sp, #12]
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	9203      	str	r2, [sp, #12]
 800e86a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e86e:	3402      	adds	r4, #2
 800e870:	9305      	str	r3, [sp, #20]
 800e872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e948 <_vfiprintf_r+0x22c>
 800e876:	7821      	ldrb	r1, [r4, #0]
 800e878:	2203      	movs	r2, #3
 800e87a:	4650      	mov	r0, sl
 800e87c:	f7f1 fca8 	bl	80001d0 <memchr>
 800e880:	b138      	cbz	r0, 800e892 <_vfiprintf_r+0x176>
 800e882:	9b04      	ldr	r3, [sp, #16]
 800e884:	eba0 000a 	sub.w	r0, r0, sl
 800e888:	2240      	movs	r2, #64	@ 0x40
 800e88a:	4082      	lsls	r2, r0
 800e88c:	4313      	orrs	r3, r2
 800e88e:	3401      	adds	r4, #1
 800e890:	9304      	str	r3, [sp, #16]
 800e892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e896:	4829      	ldr	r0, [pc, #164]	@ (800e93c <_vfiprintf_r+0x220>)
 800e898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e89c:	2206      	movs	r2, #6
 800e89e:	f7f1 fc97 	bl	80001d0 <memchr>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d03f      	beq.n	800e926 <_vfiprintf_r+0x20a>
 800e8a6:	4b26      	ldr	r3, [pc, #152]	@ (800e940 <_vfiprintf_r+0x224>)
 800e8a8:	bb1b      	cbnz	r3, 800e8f2 <_vfiprintf_r+0x1d6>
 800e8aa:	9b03      	ldr	r3, [sp, #12]
 800e8ac:	3307      	adds	r3, #7
 800e8ae:	f023 0307 	bic.w	r3, r3, #7
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	9303      	str	r3, [sp, #12]
 800e8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b8:	443b      	add	r3, r7
 800e8ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8bc:	e76a      	b.n	800e794 <_vfiprintf_r+0x78>
 800e8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	e7a8      	b.n	800e81a <_vfiprintf_r+0xfe>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	3401      	adds	r4, #1
 800e8cc:	9305      	str	r3, [sp, #20]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	f04f 0c0a 	mov.w	ip, #10
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8da:	3a30      	subs	r2, #48	@ 0x30
 800e8dc:	2a09      	cmp	r2, #9
 800e8de:	d903      	bls.n	800e8e8 <_vfiprintf_r+0x1cc>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d0c6      	beq.n	800e872 <_vfiprintf_r+0x156>
 800e8e4:	9105      	str	r1, [sp, #20]
 800e8e6:	e7c4      	b.n	800e872 <_vfiprintf_r+0x156>
 800e8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	e7f0      	b.n	800e8d4 <_vfiprintf_r+0x1b8>
 800e8f2:	ab03      	add	r3, sp, #12
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	462a      	mov	r2, r5
 800e8f8:	4b12      	ldr	r3, [pc, #72]	@ (800e944 <_vfiprintf_r+0x228>)
 800e8fa:	a904      	add	r1, sp, #16
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7fd fb83 	bl	800c008 <_printf_float>
 800e902:	4607      	mov	r7, r0
 800e904:	1c78      	adds	r0, r7, #1
 800e906:	d1d6      	bne.n	800e8b6 <_vfiprintf_r+0x19a>
 800e908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e90a:	07d9      	lsls	r1, r3, #31
 800e90c:	d405      	bmi.n	800e91a <_vfiprintf_r+0x1fe>
 800e90e:	89ab      	ldrh	r3, [r5, #12]
 800e910:	059a      	lsls	r2, r3, #22
 800e912:	d402      	bmi.n	800e91a <_vfiprintf_r+0x1fe>
 800e914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e916:	f7fe f929 	bl	800cb6c <__retarget_lock_release_recursive>
 800e91a:	89ab      	ldrh	r3, [r5, #12]
 800e91c:	065b      	lsls	r3, r3, #25
 800e91e:	f53f af1f 	bmi.w	800e760 <_vfiprintf_r+0x44>
 800e922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e924:	e71e      	b.n	800e764 <_vfiprintf_r+0x48>
 800e926:	ab03      	add	r3, sp, #12
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	462a      	mov	r2, r5
 800e92c:	4b05      	ldr	r3, [pc, #20]	@ (800e944 <_vfiprintf_r+0x228>)
 800e92e:	a904      	add	r1, sp, #16
 800e930:	4630      	mov	r0, r6
 800e932:	f7fd fe01 	bl	800c538 <_printf_i>
 800e936:	e7e4      	b.n	800e902 <_vfiprintf_r+0x1e6>
 800e938:	0800faa8 	.word	0x0800faa8
 800e93c:	0800fab2 	.word	0x0800fab2
 800e940:	0800c009 	.word	0x0800c009
 800e944:	0800e6f9 	.word	0x0800e6f9
 800e948:	0800faae 	.word	0x0800faae

0800e94c <__swbuf_r>:
 800e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e94e:	460e      	mov	r6, r1
 800e950:	4614      	mov	r4, r2
 800e952:	4605      	mov	r5, r0
 800e954:	b118      	cbz	r0, 800e95e <__swbuf_r+0x12>
 800e956:	6a03      	ldr	r3, [r0, #32]
 800e958:	b90b      	cbnz	r3, 800e95e <__swbuf_r+0x12>
 800e95a:	f7fd ff99 	bl	800c890 <__sinit>
 800e95e:	69a3      	ldr	r3, [r4, #24]
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	89a3      	ldrh	r3, [r4, #12]
 800e964:	071a      	lsls	r2, r3, #28
 800e966:	d501      	bpl.n	800e96c <__swbuf_r+0x20>
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	b943      	cbnz	r3, 800e97e <__swbuf_r+0x32>
 800e96c:	4621      	mov	r1, r4
 800e96e:	4628      	mov	r0, r5
 800e970:	f000 f82a 	bl	800e9c8 <__swsetup_r>
 800e974:	b118      	cbz	r0, 800e97e <__swbuf_r+0x32>
 800e976:	f04f 37ff 	mov.w	r7, #4294967295
 800e97a:	4638      	mov	r0, r7
 800e97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e97e:	6823      	ldr	r3, [r4, #0]
 800e980:	6922      	ldr	r2, [r4, #16]
 800e982:	1a98      	subs	r0, r3, r2
 800e984:	6963      	ldr	r3, [r4, #20]
 800e986:	b2f6      	uxtb	r6, r6
 800e988:	4283      	cmp	r3, r0
 800e98a:	4637      	mov	r7, r6
 800e98c:	dc05      	bgt.n	800e99a <__swbuf_r+0x4e>
 800e98e:	4621      	mov	r1, r4
 800e990:	4628      	mov	r0, r5
 800e992:	f7ff fda7 	bl	800e4e4 <_fflush_r>
 800e996:	2800      	cmp	r0, #0
 800e998:	d1ed      	bne.n	800e976 <__swbuf_r+0x2a>
 800e99a:	68a3      	ldr	r3, [r4, #8]
 800e99c:	3b01      	subs	r3, #1
 800e99e:	60a3      	str	r3, [r4, #8]
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	1c5a      	adds	r2, r3, #1
 800e9a4:	6022      	str	r2, [r4, #0]
 800e9a6:	701e      	strb	r6, [r3, #0]
 800e9a8:	6962      	ldr	r2, [r4, #20]
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d004      	beq.n	800e9ba <__swbuf_r+0x6e>
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	07db      	lsls	r3, r3, #31
 800e9b4:	d5e1      	bpl.n	800e97a <__swbuf_r+0x2e>
 800e9b6:	2e0a      	cmp	r6, #10
 800e9b8:	d1df      	bne.n	800e97a <__swbuf_r+0x2e>
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	4628      	mov	r0, r5
 800e9be:	f7ff fd91 	bl	800e4e4 <_fflush_r>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d0d9      	beq.n	800e97a <__swbuf_r+0x2e>
 800e9c6:	e7d6      	b.n	800e976 <__swbuf_r+0x2a>

0800e9c8 <__swsetup_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ea70 <__swsetup_r+0xa8>)
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	6818      	ldr	r0, [r3, #0]
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	b118      	cbz	r0, 800e9dc <__swsetup_r+0x14>
 800e9d4:	6a03      	ldr	r3, [r0, #32]
 800e9d6:	b90b      	cbnz	r3, 800e9dc <__swsetup_r+0x14>
 800e9d8:	f7fd ff5a 	bl	800c890 <__sinit>
 800e9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9e0:	0719      	lsls	r1, r3, #28
 800e9e2:	d422      	bmi.n	800ea2a <__swsetup_r+0x62>
 800e9e4:	06da      	lsls	r2, r3, #27
 800e9e6:	d407      	bmi.n	800e9f8 <__swsetup_r+0x30>
 800e9e8:	2209      	movs	r2, #9
 800e9ea:	602a      	str	r2, [r5, #0]
 800e9ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9f0:	81a3      	strh	r3, [r4, #12]
 800e9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f6:	e033      	b.n	800ea60 <__swsetup_r+0x98>
 800e9f8:	0758      	lsls	r0, r3, #29
 800e9fa:	d512      	bpl.n	800ea22 <__swsetup_r+0x5a>
 800e9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e9fe:	b141      	cbz	r1, 800ea12 <__swsetup_r+0x4a>
 800ea00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea04:	4299      	cmp	r1, r3
 800ea06:	d002      	beq.n	800ea0e <__swsetup_r+0x46>
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f7fe ff0d 	bl	800d828 <_free_r>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	6063      	str	r3, [r4, #4]
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f043 0308 	orr.w	r3, r3, #8
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	b94b      	cbnz	r3, 800ea42 <__swsetup_r+0x7a>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea38:	d003      	beq.n	800ea42 <__swsetup_r+0x7a>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f000 f883 	bl	800eb48 <__smakebuf_r>
 800ea42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea46:	f013 0201 	ands.w	r2, r3, #1
 800ea4a:	d00a      	beq.n	800ea62 <__swsetup_r+0x9a>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	60a2      	str	r2, [r4, #8]
 800ea50:	6962      	ldr	r2, [r4, #20]
 800ea52:	4252      	negs	r2, r2
 800ea54:	61a2      	str	r2, [r4, #24]
 800ea56:	6922      	ldr	r2, [r4, #16]
 800ea58:	b942      	cbnz	r2, 800ea6c <__swsetup_r+0xa4>
 800ea5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea5e:	d1c5      	bne.n	800e9ec <__swsetup_r+0x24>
 800ea60:	bd38      	pop	{r3, r4, r5, pc}
 800ea62:	0799      	lsls	r1, r3, #30
 800ea64:	bf58      	it	pl
 800ea66:	6962      	ldrpl	r2, [r4, #20]
 800ea68:	60a2      	str	r2, [r4, #8]
 800ea6a:	e7f4      	b.n	800ea56 <__swsetup_r+0x8e>
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	e7f7      	b.n	800ea60 <__swsetup_r+0x98>
 800ea70:	20000028 	.word	0x20000028

0800ea74 <_raise_r>:
 800ea74:	291f      	cmp	r1, #31
 800ea76:	b538      	push	{r3, r4, r5, lr}
 800ea78:	4605      	mov	r5, r0
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	d904      	bls.n	800ea88 <_raise_r+0x14>
 800ea7e:	2316      	movs	r3, #22
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	f04f 30ff 	mov.w	r0, #4294967295
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea8a:	b112      	cbz	r2, 800ea92 <_raise_r+0x1e>
 800ea8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea90:	b94b      	cbnz	r3, 800eaa6 <_raise_r+0x32>
 800ea92:	4628      	mov	r0, r5
 800ea94:	f000 f830 	bl	800eaf8 <_getpid_r>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaa2:	f000 b817 	b.w	800ead4 <_kill_r>
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d00a      	beq.n	800eac0 <_raise_r+0x4c>
 800eaaa:	1c59      	adds	r1, r3, #1
 800eaac:	d103      	bne.n	800eab6 <_raise_r+0x42>
 800eaae:	2316      	movs	r3, #22
 800eab0:	6003      	str	r3, [r0, #0]
 800eab2:	2001      	movs	r0, #1
 800eab4:	e7e7      	b.n	800ea86 <_raise_r+0x12>
 800eab6:	2100      	movs	r1, #0
 800eab8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eabc:	4620      	mov	r0, r4
 800eabe:	4798      	blx	r3
 800eac0:	2000      	movs	r0, #0
 800eac2:	e7e0      	b.n	800ea86 <_raise_r+0x12>

0800eac4 <raise>:
 800eac4:	4b02      	ldr	r3, [pc, #8]	@ (800ead0 <raise+0xc>)
 800eac6:	4601      	mov	r1, r0
 800eac8:	6818      	ldr	r0, [r3, #0]
 800eaca:	f7ff bfd3 	b.w	800ea74 <_raise_r>
 800eace:	bf00      	nop
 800ead0:	20000028 	.word	0x20000028

0800ead4 <_kill_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4d07      	ldr	r5, [pc, #28]	@ (800eaf4 <_kill_r+0x20>)
 800ead8:	2300      	movs	r3, #0
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	4611      	mov	r1, r2
 800eae0:	602b      	str	r3, [r5, #0]
 800eae2:	f7f4 fe71 	bl	80037c8 <_kill>
 800eae6:	1c43      	adds	r3, r0, #1
 800eae8:	d102      	bne.n	800eaf0 <_kill_r+0x1c>
 800eaea:	682b      	ldr	r3, [r5, #0]
 800eaec:	b103      	cbz	r3, 800eaf0 <_kill_r+0x1c>
 800eaee:	6023      	str	r3, [r4, #0]
 800eaf0:	bd38      	pop	{r3, r4, r5, pc}
 800eaf2:	bf00      	nop
 800eaf4:	20005468 	.word	0x20005468

0800eaf8 <_getpid_r>:
 800eaf8:	f7f4 be5e 	b.w	80037b8 <_getpid>

0800eafc <__swhatbuf_r>:
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	460c      	mov	r4, r1
 800eb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb04:	2900      	cmp	r1, #0
 800eb06:	b096      	sub	sp, #88	@ 0x58
 800eb08:	4615      	mov	r5, r2
 800eb0a:	461e      	mov	r6, r3
 800eb0c:	da0d      	bge.n	800eb2a <__swhatbuf_r+0x2e>
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb14:	f04f 0100 	mov.w	r1, #0
 800eb18:	bf14      	ite	ne
 800eb1a:	2340      	movne	r3, #64	@ 0x40
 800eb1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb20:	2000      	movs	r0, #0
 800eb22:	6031      	str	r1, [r6, #0]
 800eb24:	602b      	str	r3, [r5, #0]
 800eb26:	b016      	add	sp, #88	@ 0x58
 800eb28:	bd70      	pop	{r4, r5, r6, pc}
 800eb2a:	466a      	mov	r2, sp
 800eb2c:	f000 f848 	bl	800ebc0 <_fstat_r>
 800eb30:	2800      	cmp	r0, #0
 800eb32:	dbec      	blt.n	800eb0e <__swhatbuf_r+0x12>
 800eb34:	9901      	ldr	r1, [sp, #4]
 800eb36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb3e:	4259      	negs	r1, r3
 800eb40:	4159      	adcs	r1, r3
 800eb42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb46:	e7eb      	b.n	800eb20 <__swhatbuf_r+0x24>

0800eb48 <__smakebuf_r>:
 800eb48:	898b      	ldrh	r3, [r1, #12]
 800eb4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb4c:	079d      	lsls	r5, r3, #30
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460c      	mov	r4, r1
 800eb52:	d507      	bpl.n	800eb64 <__smakebuf_r+0x1c>
 800eb54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb58:	6023      	str	r3, [r4, #0]
 800eb5a:	6123      	str	r3, [r4, #16]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	6163      	str	r3, [r4, #20]
 800eb60:	b003      	add	sp, #12
 800eb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb64:	ab01      	add	r3, sp, #4
 800eb66:	466a      	mov	r2, sp
 800eb68:	f7ff ffc8 	bl	800eafc <__swhatbuf_r>
 800eb6c:	9f00      	ldr	r7, [sp, #0]
 800eb6e:	4605      	mov	r5, r0
 800eb70:	4639      	mov	r1, r7
 800eb72:	4630      	mov	r0, r6
 800eb74:	f7fe fecc 	bl	800d910 <_malloc_r>
 800eb78:	b948      	cbnz	r0, 800eb8e <__smakebuf_r+0x46>
 800eb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb7e:	059a      	lsls	r2, r3, #22
 800eb80:	d4ee      	bmi.n	800eb60 <__smakebuf_r+0x18>
 800eb82:	f023 0303 	bic.w	r3, r3, #3
 800eb86:	f043 0302 	orr.w	r3, r3, #2
 800eb8a:	81a3      	strh	r3, [r4, #12]
 800eb8c:	e7e2      	b.n	800eb54 <__smakebuf_r+0xc>
 800eb8e:	89a3      	ldrh	r3, [r4, #12]
 800eb90:	6020      	str	r0, [r4, #0]
 800eb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb96:	81a3      	strh	r3, [r4, #12]
 800eb98:	9b01      	ldr	r3, [sp, #4]
 800eb9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800eb9e:	b15b      	cbz	r3, 800ebb8 <__smakebuf_r+0x70>
 800eba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eba4:	4630      	mov	r0, r6
 800eba6:	f000 f81d 	bl	800ebe4 <_isatty_r>
 800ebaa:	b128      	cbz	r0, 800ebb8 <__smakebuf_r+0x70>
 800ebac:	89a3      	ldrh	r3, [r4, #12]
 800ebae:	f023 0303 	bic.w	r3, r3, #3
 800ebb2:	f043 0301 	orr.w	r3, r3, #1
 800ebb6:	81a3      	strh	r3, [r4, #12]
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	431d      	orrs	r5, r3
 800ebbc:	81a5      	strh	r5, [r4, #12]
 800ebbe:	e7cf      	b.n	800eb60 <__smakebuf_r+0x18>

0800ebc0 <_fstat_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	@ (800ebe0 <_fstat_r+0x20>)
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4608      	mov	r0, r1
 800ebca:	4611      	mov	r1, r2
 800ebcc:	602b      	str	r3, [r5, #0]
 800ebce:	f7f4 fe5b 	bl	8003888 <_fstat>
 800ebd2:	1c43      	adds	r3, r0, #1
 800ebd4:	d102      	bne.n	800ebdc <_fstat_r+0x1c>
 800ebd6:	682b      	ldr	r3, [r5, #0]
 800ebd8:	b103      	cbz	r3, 800ebdc <_fstat_r+0x1c>
 800ebda:	6023      	str	r3, [r4, #0]
 800ebdc:	bd38      	pop	{r3, r4, r5, pc}
 800ebde:	bf00      	nop
 800ebe0:	20005468 	.word	0x20005468

0800ebe4 <_isatty_r>:
 800ebe4:	b538      	push	{r3, r4, r5, lr}
 800ebe6:	4d06      	ldr	r5, [pc, #24]	@ (800ec00 <_isatty_r+0x1c>)
 800ebe8:	2300      	movs	r3, #0
 800ebea:	4604      	mov	r4, r0
 800ebec:	4608      	mov	r0, r1
 800ebee:	602b      	str	r3, [r5, #0]
 800ebf0:	f7f4 fe5a 	bl	80038a8 <_isatty>
 800ebf4:	1c43      	adds	r3, r0, #1
 800ebf6:	d102      	bne.n	800ebfe <_isatty_r+0x1a>
 800ebf8:	682b      	ldr	r3, [r5, #0]
 800ebfa:	b103      	cbz	r3, 800ebfe <_isatty_r+0x1a>
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	bd38      	pop	{r3, r4, r5, pc}
 800ec00:	20005468 	.word	0x20005468

0800ec04 <_init>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	bf00      	nop
 800ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	4770      	bx	lr

0800ec10 <_fini>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	bf00      	nop
 800ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec16:	bc08      	pop	{r3}
 800ec18:	469e      	mov	lr, r3
 800ec1a:	4770      	bx	lr
